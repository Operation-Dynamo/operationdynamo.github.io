{"version":3,"sources":["services/utils.ts","hooks/useDateFromNow.ts","services/thumbnail.ts","graphql/schema.generated.ts","../../src/assert.ts","../../../src/validation/common.ts","graphql/fragmentMatcher.generated.ts","../../src/index.ts","components/dxf-viewer.tsx","../../src/memoize.ts","../../src/setting.ts","../../src/singleton.ts","../../../src/validation/index.ts","../../../src/validation/mutation.ts","../../../src/validation/query.ts","components/theme.ts","util/cachedStorage.ts","util/refreshToken.ts","util/index.ts","services/location-search.ts","components/snackbar.tsx","hooks/useSnack.tsx","hooks/useQuery.ts","components/form/file-upload.tsx","components/api-autocomplete.tsx","hooks/useDebounce.ts","components/form/location.tsx","components/tooltip.tsx","components/form/select.tsx","components/form/slider.tsx","components/form/text.tsx","components/form/resolver.tsx","components/form/form.tsx","hooks/useForm.ts","pages/invite.tsx","pages/job.tsx","components/hide-app-bar.tsx","components/menu.tsx","components/modal.tsx","components/page.tsx","components/markdown.tsx","pages/home.tsx","components/card-item.tsx","components/file-renderer.tsx","components/file-item-preview.tsx","components/page-title-bar.tsx","components/wrong-page.tsx","pages/jobs.tsx","components/switch-button.tsx","pages/submissions.tsx","pages/index.tsx","pages/about.tsx","components/picture-button.tsx","components/picture-select.tsx","pages/account/choose.tsx","pages/account/forgot-password.tsx","pages/account/login.tsx","pages/account/logout.tsx","pages/account/password-reset.tsx","pages/account/register.tsx","pages/account/update.tsx","pages/contact.tsx","pages/find.tsx","components/info-list.tsx","components/stepper.tsx","components/card-option.tsx","pages/legal.tsx","pages/legal/disclaimer.tsx","pages/legal/faq.tsx","pages/legal/privacy-policy.tsx","pages/legal/terms-of-service.tsx","components/table.tsx","services/download.ts","pages/submission.tsx","services/jsonToCsv.ts","components/file-preview.tsx","components/tabs.tsx","pages/submission/create.tsx","App.tsx","serviceWorker.ts","index.tsx","client.ts"],"names":["logger","Logging","__filename","removeIn","object","key","copy","contentFromFile","file","onLoad","reader","FileReader","onerror","error","onload","event","target","result","readAsText","svgToPng","dataUrl","canvas","document","createElement","context","getContext","image","Image","src","drawImage","pngUrl","toDataURL","dataURLtoFile","filename","arr","split","first","assert","match","mime","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","File","type","goToNewTab","url","window","open","goTo","nested","path","root","indices","slice","beforeIndex","lastIndex","nestedIndex","previous","reduce","acc","current","undefined","getRenderType","jobType","renderFileType","name","toLowerCase","setNested","value","removeNested","Object","keys","getNested","dayjs","extend","relativeTime","useDateFromNow","date","useMemo","fromNow","dxfToImageBuffer","dxf","strokeColor","theme","palette","primary","main","strokeWidth","svg","Helper","toSVG","replace","Buffer","from","CancelJobDocument","gql","useCancelJobMutation","baseOptions","ApolloReactHooks","CancelSubmissionDocument","useCancelSubmissionMutation","CreateNewJobFromSubmissionDocument","useCreateNewJobFromSubmissionMutation","CreateSubmissionDocument","useCreateSubmissionMutation","ForgotPasswordDocument","useForgotPasswordMutation","LoginDocument","useLoginMutation","LoginRefreshTokenDocument","RegisterDocument","useRegisterMutation","SendInvitationDocument","useSendInvitationMutation","SubmitForgotPasswordDocument","useSubmitForgotPasswordMutation","ToggleJobReceivedDocument","useToggleJobReceivedMutation","UpdateAccountDocument","useUpdateAccountMutation","UpdateJobProgressDocument","useUpdateJobProgressMutation","AcceptedJobsDocument","useAcceptedJobsQuery","AvailableSubmissionsDocument","useAvailableSubmissionsQuery","JobDocument","useJobQuery","MeDocument","useMeQuery","MedicalItemsDocument","useMedicalItemsQuery","SubmissionDocument","useSubmissionQuery","SubmissionJobsDocument","useSubmissionJobsQuery","SubmittedSubmissionsDocument","useSubmittedSubmissionsQuery","throwErr","mixed","oneOf","DXFViewer","height","source","width","useState","base64","changeSBase64","useEffect","updateSvg","test","base64data","toString","debug","a","data","content","fetch","response","text","getDXFData","style","padding","alt","cache","instance","email","common_1","password","createMuiTheme","background","default","red","A400","secondary","typography","fontFamily","join","cachedStorage","clear","localStorage","getItem","removeItem","setItem","tokenExpired","jwt","JSON","parse","decode","exp","Date","now","getNewToken","client","userId","refreshToken","mutate","mutation","variables","errors","loginRefreshToken","token","getJwtToken","jwtToken","GeometryType","Category","OsmType","FeatureType","SnackBarComponent","state","snack","updateSnack","Snackbar","autoHideDuration","onClose","elevation","variant","severity","message","SnackContext","React","createContext","useSnack","useContext","useQuery","URLSearchParams","useLocation","search","MAX_SIZE","FormFileUploadItem","PreviewComponent","accept","handleChange","icon","id","label","multiple","defaultValue","handleChangeStatus","useCallback","_","status","includes","props","SubmitButtonComponent","maxSizeBytes","initialFiles","Array","isArray","onChangeStatus","autoUpload","maxFiles","inputContent","extra","reject","display","flexDirection","Typography","marginLeft","toUpperCase","styles","dropzone","borderColor","dropzoneActive","backgroundColor","dropzoneReject","inputLabel","color","searchLocations","query","encodeURI","json","ApiAutocomplete","freeSolo","objectResolver","onQuery","onSelect","onTextChange","textProps","changeText","debouncedText","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","options","changeOptions","Autocomplete","filterOptions","x","onChange","newValue","renderInput","params","TextField","getOptionLabel","option","FormLocationItem","autoComplete","locationIds","required","setLocation","location","properties","display_name","latitude","longitude","geometry","coordinates","fullWidth","features","feature","TooltipComponent","hint","InputAdornment","position","Tooltip","title","placement","arrow","IconButton","aria-label","FormSelectItem","disabled","selectValue","changeSelectValue","FormControl","InputLabel","Select","endAdornment","labelId","entries","map","MenuItem","useStyles","makeStyles","flex","FormSliderItem","ending","form","max","min","step","classes","className","gutterBottom","Slider","getAriaValueText","valuetext","aria-labelledby","valueLabelDisplay","FormTextItem","multiline","textType","textValue","changeTextValue","htmlFor","OutlinedInput","rows","FormItemResolverComponent","formItem","element","render","unreachable","marginTop","spacing","FormComponent","children","formItems","initialForm","onSubmit","onUpdate","submitButtonTitle","initial","changeForm","updateForm","old","useForm","update","preventDefault","Grid","container","alignment","sm","xs","item","Button","ProgressStep","InvitePageView","user","Submitter","Volunteer","InvitePage","closeModal","onCompleted","sendInvitation","onError","args","createStyles","link","textDecoration","sidebarButtons","justifyContent","previousScroll","HideOnScroll","throttleInverted","window_prop","trigger","useScrollTrigger","threshold","addEventListener","scrollY","Fade","in","HideAppBar","buttons","disableHide","homeButton","invertedInitial","inverted","changeInverted","buttonStyle","fontSize","textTransform","appBar","AppBar","Toolbar","flexGrow","Link","href","button","CssBaseline","MenuComponent","anchorEl","setAnchorEl","Boolean","handleClose","onClick","currentTarget","handleClick","endIcon","startIcon","Menu","keepMounted","PaperProps","maxHeight","ITEM_HEIGHT","card","alignItems","details","modal","titleButton","marginBottom","titleText","ModalComponent","modalOpen","buttonProps","setOpen","handleOpen","renderedContent","Modal","disableBackdropClick","aria-describedby","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Card","CardContent","component","footer","textAlign","PageComponent","rolePages","roleRedirect","showFooter","changeComponent","meData","meError","loading","me","userType","rolePage","find","role","redirect","marginRight","firstName","lastName","paper","maxWidth","MarkdownComponent","fileName","onFinish","variableMaps","changeContent","to","Grow","onEntered","Paper","escapeHtml","cardContent","cardGrid","paddingBottom","paddingTop","cardMedia","heroButtons","heroContent","backgroundImage","backgroundRepeat","backgroundSize","HomePage","Container","align","justify","allow","allowFullScreen","margin","CardItem","ButtonBase","FileRenderStateContainer","createContainer","previewImage","changePreviewImage","FileRender","useContainer","changeElement","inputSource","light","arrayBuffer","painter","captureFrame","model","getPainter","modelColor","rotate","orbitControls","getElement","gridContainer","GridView","child","i","FileItemPreview","items","presignedUrl","Provider","menuButton","PageTitleBar","rightItem","rightActionItem","WrongPageComponent","alignSelf","avatar","cardRoot","expand","transform","transition","transitions","create","duration","shortest","expandOpen","media","progressBar","progressText","fontWeight","JobCard","job","showAvatar","createdAt","progressNumber","progress","CardHeader","Avatar","volunteer","subheader","submission","files","preview","CardMedia","LinearProgress","toFixed","quantity","description","VolunteerJobs","acceptedJobs","sort","b","getTime","SwitchButton","offIcon","onIcon","onStateChange","changeState","sortBy","titleMenu","SubmissionCard","submitter","total","distance","modelQuantity","laserCuttingQuantity","SubmitterSubmissions","submissions","useSortedSubmissions","submittedSubmissions","VolunteerSubmissions","availableSubmissions","fixSortOrder","sortOrder","SubmissionSortContainer","setSortBy","setSortOrder","SortingProperties","IndexPage","AboutPage","focusVisible","opacity","border","zIndex","breakpoints","down","imageBackdrop","common","black","bottom","left","right","top","imageButton","white","imageMarked","imageSrc","backgroundPosition","imageTitle","flexWrap","minWidth","PictureButton","focusRipple","focusVisibleClassName","PictureSelectComponent","images","AccountChoosePage","ForgotPasswordPageView","ForgotPasswordPage","forgotPassword","LoginPageView","LoginPage","login","refetchQueries","LogoutPage","logout","PasswordResetPageView","PasswordResetPage","submitForgotPassword","argToken","get","confirmPassword","RegisterPageView","argUserType","registrationToken","changeUserType","RegisterPage","register","AccountUpdatePageView","changeIsPasswordUpdate","isPasswordUpdate","address","AccountUpdatePage","updateAccount","onSubmitAccount","newPassword","updatePage","ContactPage","FindPageView","FindPage","list","InfoListComponent","List","action","actionItem","ListItem","clipboard","String","callback","ListItemAvatar","ListItemText","primaryTypographyProps","ListItemSecondaryAction","instructions","CustomizedSteppers","steps","currentStep","colors","color1","color2","color3","activeStep","setActiveStep","ColorLibConnector","withStyles","active","alternativeLabel","completed","line","borderRadius","StepConnector","icons","forEach","ColorLibStepIcon","boxShadow","clsx","Stepper","connector","Step","StepLabel","StepIconComponent","jobPageView","viewOriginalSubmissionButton","shippingProviders","jobStepperSteps","PrintCompleteView","onClickPrint","print","updateTrackingNumber","shippingProvider","changeShippingProvider","trim","JobPageStatus","cancelJob","showActionButtons","updateJobProgress","trackingNumber","changeTrackingNumber","done","nextStep","JobPageList","JobPageView","onSubmissionClick","renderType","JobPage","cancelResponse","cancelJobMutation","updateJobProgressMutation","jopPage","CardOptionComponent","subtitle","LegalPage","md","DisclaimerPage","changeShowFooter","FaqPage","PrivacyPolicyPage","TermsOfServicePage","table","visuallyHidden","clip","overflow","descendingComparator","orderBy","EnhancedTableHead","headCells","onRequestSort","order","TableHead","TableRow","TableCell","headCell","numeric","disablePadding","sortDirection","TableSortLabel","direction","property","EnhancedTableToolbar","toolbarBarItems","EnhancedTable","initialOrderProperty","nameProperty","onRowClick","customItems","setOrder","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","emptyRows","Math","TableContainer","Table","size","handleRequestSort","TableBody","array","comparator","stabilizedThis","el","index","stableSort","getComparator","row","hover","tabIndex","paddingRight","scope","customItem","filter","rowName","colSpan","TablePagination","rowsPerPageOptions","count","onChangePage","onChangeRowsPerPage","parseInt","submissionPageView","SubmissionInfo","assemblyUrl","SubmissionActions","useMyUserType","cancelSubmission","cancel","onRemoveSubmission","confirm","SubmissionTitle","SubmissionPageView","showJobs","modelFiles","laserCuttingFiles","SubmissionPage","submissionPage","SubmissionFilesContainer","setJobType","SubmissionSelector","CreateNewJobModal","laserCutterOption","LaserCutting","printingOption","Printing","maxQuantity","submitFormItems","createNewJobFromSubmission","MarkAsReceivedButton","SubmissionJobs","submissionJobs","fileType","blob","Blob","download","URL","createObjectURL","dataset","downloadurl","body","appendChild","click","removeChild","revokeObjectURL","downloadString","objects","objectHandler","values","Error","jsonToCsv","charAt","FilePreview","canCancel","canRemove","canRestart","fileWithMeta","meta","remove","restart","percent","hashName","hash","allFiles","startsWith","TabPanel","other","hidden","Box","p","TabsComponent","currentTab","tabs","setValue","Tabs","textColor","indicatorColor","Tab","SubmissionStateContainer","changeSubmission","changeStep","SubmissionItemSelect","medicalItems","marketplaceId","onMarketplaceSelect","onCustomSelect","custom","assembly","laserCutting","CreateSubmissionPageView","findItemFromId","medicalItem","stepViews","createdSubmission","previewPreview","modelPreview","laserCuttingPreview","uuid","submitted","CreateSubmissionPage","createSubmission","AppView","App","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","InMemoryCache","fragmentMatcher","IntrospectionFragmentMatcher","introspectionQueryResultData","errorLink","graphQLErrors","networkError","locations","stringify","authLink","setContext","headers","authorization","uploadLink","createUploadLink","uri","ApolloLink","ApolloClient"],"mappings":"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","file":"static/js/main.6db61503.chunk.js","sourcesContent":["import {assert} from \"@dynamo/common\"\nimport {Logging} from \"@nimashoghi/logging\"\nimport {RenderType} from \"../components/file-renderer\"\nimport {JobType} from \"../graphql/schema.generated\"\n\nconst logger = Logging.logger({__filename})\n\nexport const nestedIndex = (path: string) => {\n    const indices = path.split(\".\").slice(1)\n    const beforeIndex: string | undefined = indices[indices.length - 2]\n    const lastIndex = indices[indices.length - 1]\n    return {beforeIndex, indices, lastIndex}\n}\n\nexport const removeIn = <T>(object: {[key: string]: T}, key: string) => {\n    const copy = {...object}\n    delete copy[key]\n    return copy\n}\n\nexport const capitalize = (string: string, all = false) => {\n    const regex = all ? /(?:^|\\s)\\S/g : /(?:^|\\s)\\S/\n    return string.replace(regex, (a) => {\n        return a.toUpperCase()\n    })\n}\n\nexport const contentFromFile = ({\n    file,\n    onLoad,\n}: {\n    file: File\n    onLoad: (content: string) => void\n}) => {\n    const reader = new FileReader()\n    reader.onerror = () => {\n        logger.error`error reading file`\n    }\n    reader.onload = (event) => {\n        onLoad(event.target?.result as string)\n    }\n    reader.readAsText(file)\n}\n\nexport const svgToPng = ({\n    dataUrl,\n    onLoad,\n}: {\n    dataUrl: string\n    onLoad: (pngUrl?: string) => void\n}) => {\n    const canvas = document.createElement(\"canvas\")\n    const context = canvas?.getContext(\"2d\")\n\n    const image = new Image()\n    image.src = dataUrl\n\n    image.onload = () => {\n        context?.drawImage(image, 75, 0)\n        const pngUrl = canvas?.toDataURL(\"image/png\")\n        onLoad(pngUrl)\n    }\n}\n\nexport const dataURLtoFile = (dataUrl: string, filename: string) => {\n    try {\n        const arr = dataUrl.split(\",\")\n        const first = arr[0]\n        assert(!!first[0], \"invalid data url\")\n        const match = first.match(/:(.*?);/)\n        assert(!!match, \"invalid data url\")\n        const mime = match[1]\n        const bstr = atob(arr[1])\n        let n = bstr.length\n        const u8arr = new Uint8Array(n)\n\n        while (n--) {\n            u8arr[n] = bstr.charCodeAt(n)\n        }\n\n        return new File([u8arr], filename, {type: mime})\n    } catch {\n        return undefined\n    }\n}\n\nexport const urlFromFile = ({\n    file,\n    onLoad,\n}: {\n    file: File\n    onLoad: (url: string) => void\n}) => {\n    const reader = new FileReader()\n    reader.onerror = () => {\n        logger.error`error reading file`\n    }\n    reader.onload = (event) => {\n        onLoad(event.target?.result as string)\n    }\n    reader.readAsDataURL(file)\n}\n\nexport const goToNewTab = (url: string) => {\n    window.open(url, \"_blank\")\n}\n\nexport const goTo = (url: string) => {\n    window.open(url, \"_self\")\n}\n\nconst nested = <T>(object: {[key: string]: T}, path: string) => {\n    const root = {...object}\n    const {beforeIndex, indices, lastIndex} = nestedIndex(path)\n    return {\n        beforeIndex,\n        lastIndex,\n        previous: indices.slice(0, -1).reduce(\n            // eslint-disable-next-line no-return-assign\n            (acc, current) =>\n                acc[current] !== undefined\n                    ? acc[current]\n                    : // eslint-disable-next-line @typescript-eslint/no-explicit-any, no-param-reassign\n                      (acc[current] = {} as any),\n            root,\n        ),\n        root,\n    }\n}\n\nexport const getRenderType = (jobType: JobType): RenderType => {\n    switch (jobType) {\n        case \"LaserCutting\":\n            return \"dxf\"\n        case \"Printing\":\n            return \"stl\"\n    }\n}\n\nexport const renderFileType = (name: string) => {\n    const type = name.match(/(.*)\\.(.*)/)?.[2]?.toLowerCase()\n    if (\n        type === \"png\" ||\n        type === \"png\" ||\n        type === \"jpeg\" ||\n        type === \"jpg\" ||\n        type === \"tif\" ||\n        type === \"svg\" ||\n        type === \"gif\"\n    ) {\n        return \"image\"\n    }\n    return type as RenderType | undefined\n}\n\nexport const partition = <T>(array: T[], isValid: (element: T) => boolean) => {\n    return array.reduce<T[][]>(\n        ([p, f], e) => (isValid(e) ? [[...p, e], f] : [p, [...f, e]]),\n        [[], []],\n    )\n}\n\nexport const setNested = <T>(object: {}, path: string, value: T) => {\n    const {lastIndex, previous, root} = nested(object, path)\n    previous[lastIndex] = value\n    return root\n}\n\nexport const removeNested = <T>(\n    object: {[key: string]: T},\n    path: string,\n): {[key: string]: T} => {\n    const {beforeIndex, lastIndex, previous, root} = nested(object, path)\n    delete previous[lastIndex]\n\n    if (Object.keys(previous).length === 0) {\n        if (beforeIndex) {\n            return removeNested<T>(root, `.${beforeIndex}`)\n        }\n    }\n    return root\n}\n\nexport const getNested = <T, C>(\n    object: Partial<T>,\n    path: string,\n): C | undefined => {\n    const {lastIndex, previous} = nested(object, path)\n    return previous[lastIndex] as C | undefined\n}\n\n/**\n * Determine the mobile operating system.\n * This function returns one of 'iOS', 'Android', 'Windows Phone', or 'unknown'.\n *\n * @returns {String}\n */\nexport const getMobileOperatingSystem = (): \"android\" | \"ios\" | \"unknown\" => {\n    const userAgent =\n        navigator.userAgent ||\n        navigator.vendor ||\n        ((window as unknown) as {opera: string}).opera\n\n    if (/android/i.test(userAgent)) {\n        return \"android\"\n    }\n\n    // iOS detection from: http://stackoverflow.com/a/9039885/177710\n    if (/iPad|iPhone|iPod/.test(userAgent)) {\n        return \"ios\"\n    }\n\n    return \"unknown\"\n}\n","import dayjs from \"dayjs\"\nimport relativeTime from \"dayjs/plugin/relativeTime\"\nimport {useMemo} from \"react\"\n\ndayjs.extend(relativeTime)\n\nexport const useDateFromNow = (date: Date | string) =>\n    useMemo(() => dayjs(date).fromNow(), [date])\n","import {Helper} from \"dxf\"\nimport {theme} from \"../components/theme\"\n\nexport const dxfToImageBuffer = ({\n    dxf,\n    strokeColor = theme.palette.primary.main,\n    strokeWidth = \"0.2%\",\n}: {\n    dxf: string\n    strokeColor?: string\n    strokeWidth?: string\n}) => {\n    const helper = new Helper(dxf)\n    const svg = helper\n        .toSVG()\n        .replace(`stroke-width=\"0.1%\"`, `stroke-width=\"${strokeWidth}\"`)\n        .replace(`stroke=\"rgb(0, 0, 0)\"`, `stroke=\"${strokeColor}\"`)\n\n        .replace(`stroke=\"#000000\"`, `stroke=\"${strokeColor || \"#000000\"}\"`)\n\n    const buff = Buffer.from(svg)\n    return buff\n}\n","/* eslint-disable */\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null | undefined;\n\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  DateTime: any;\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any;\n  /**\n   * A date string, such as 2007-12-03, compliant with the `full-date` format\n   * outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for\n   * representation of dates and times using the Gregorian calendar.\n   */\n  Date: string;\n};\n\nexport type AuthenticationResult = {\n   __typename: 'AuthenticationResult';\n  id: Scalars['ID'];\n  refreshToken: Scalars['String'];\n  token: Scalars['String'];\n  user: CurrentUser;\n};\n\nexport type CurrentUser = {\n   __typename: 'CurrentUser';\n  id: Scalars['ID'];\n  user: User;\n};\n\n\n\nexport type File = {\n   __typename: 'File';\n  id: Scalars['String'];\n  presignedUrl: Scalars['String'];\n};\n\nexport type GeolocationInput = {\n  latitude: Scalars['Float'];\n  longitude: Scalars['Float'];\n};\n\nexport type Job = {\n   __typename: 'Job';\n  createdAt: Scalars['DateTime'];\n  description?: Maybe<Scalars['String']>;\n  files: Array<File>;\n  id: Scalars['String'];\n  name: Scalars['String'];\n  progress: JobProgress;\n  quantity: Scalars['Int'];\n  submission: Submission;\n  trackingNumber?: Maybe<Scalars['String']>;\n  type: JobType;\n  volunteer: User;\n};\n\nexport type JobProgress = \n  'Assigned' |\n  'PrintComplete' |\n  'PrintStarted' |\n  'Received' |\n  'Shipped';\n\nexport type JobType = \n  'LaserCutting' |\n  'Printing';\n\nexport type MedicalItem = {\n   __typename: 'MedicalItem';\n  createdAt: Scalars['DateTime'];\n  description: Scalars['String'];\n  files: SubmissionFiles;\n  id: Scalars['String'];\n  name: Scalars['String'];\n};\n\nexport type Mutation = {\n   __typename: 'Mutation';\n  cancelJob: Job;\n  cancelSubmission: Submission;\n  createNewJobFromSubmission: Job;\n  createSubmission: Submission;\n  forgotPassword: Scalars['DateTime'];\n  login: AuthenticationResult;\n  loginRefreshToken: AuthenticationResult;\n  register: AuthenticationResult;\n  sendInvitation: Scalars['DateTime'];\n  submitForgotPassword: AuthenticationResult;\n  toggleJobReceived: Job;\n  updateAccount: User;\n  updateJobProgress: Job;\n};\n\n\nexport type MutationCancelJobArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationCancelSubmissionArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationCreateNewJobFromSubmissionArgs = {\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n  type: JobType;\n};\n\n\nexport type MutationCreateSubmissionArgs = {\n  address?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  files?: Maybe<SubmissionFilesInput>;\n  geolocation?: Maybe<GeolocationInput>;\n  marketplaceId?: Maybe<Scalars['ID']>;\n  name: Scalars['String'];\n  quantity: Scalars['Int'];\n};\n\n\nexport type MutationForgotPasswordArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationLoginArgs = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type MutationLoginRefreshTokenArgs = {\n  refreshToken: Scalars['String'];\n  userId: Scalars['ID'];\n};\n\n\nexport type MutationRegisterArgs = {\n  address: Scalars['String'];\n  email: Scalars['String'];\n  firstName: Scalars['String'];\n  geolocation: GeolocationInput;\n  lastName: Scalars['String'];\n  password: Scalars['String'];\n  registrationToken: Scalars['String'];\n  type: UserType;\n};\n\n\nexport type MutationSendInvitationArgs = {\n  email: Scalars['String'];\n  type: UserType;\n};\n\n\nexport type MutationSubmitForgotPasswordArgs = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n  token: Scalars['String'];\n};\n\n\nexport type MutationToggleJobReceivedArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationUpdateAccountArgs = {\n  address?: Maybe<Scalars['String']>;\n  firstName?: Maybe<Scalars['String']>;\n  geolocation?: Maybe<GeolocationInput>;\n  lastName?: Maybe<Scalars['String']>;\n  password?: Maybe<PasswordUpdateInput>;\n};\n\n\nexport type MutationUpdateJobProgressArgs = {\n  id: Scalars['ID'];\n  progress: JobProgress;\n  trackingNumber?: Maybe<Scalars['String']>;\n};\n\nexport type PasswordUpdateInput = {\n  newPassword: Scalars['String'];\n  oldPassword: Scalars['String'];\n};\n\nexport type Query = {\n   __typename: 'Query';\n  acceptedJobs: Array<Job>;\n  availableSubmissions: Array<Submission>;\n  job: Job;\n  me: CurrentUser;\n  medicalItems: Array<MedicalItem>;\n  submission: Submission;\n  submissionJobs: Array<Job>;\n  submittedSubmissions: Array<Submission>;\n};\n\n\nexport type QueryJobArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QuerySubmissionArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QuerySubmissionJobsArgs = {\n  id: Scalars['ID'];\n};\n\nexport type Submission = {\n   __typename: 'Submission';\n  address: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  description?: Maybe<Scalars['String']>;\n  distance: Scalars['Float'];\n  files: SubmissionFiles;\n  id: Scalars['String'];\n  latitude: Scalars['Float'];\n  longitude: Scalars['Float'];\n  name: Scalars['String'];\n  progress: SubmissionProgress;\n  quantity: Scalars['Int'];\n  status: SubmissionStatus;\n  submitter: User;\n};\n\nexport type SubmissionFiles = {\n   __typename: 'SubmissionFiles';\n  assemblyUrl?: Maybe<Scalars['String']>;\n  createdAt: Scalars['DateTime'];\n  id: Scalars['String'];\n  laserCuttingFiles: Array<File>;\n  modelFiles: Array<File>;\n  preview?: Maybe<File>;\n};\n\nexport type SubmissionFilesInput = {\n  assembly?: Maybe<Scalars['Upload']>;\n  assemblyUrl?: Maybe<Scalars['String']>;\n  laserCutting: Array<Scalars['Upload']>;\n  model: Array<Scalars['Upload']>;\n  preview?: Maybe<Scalars['Upload']>;\n};\n\nexport type SubmissionProgress = {\n   __typename: 'SubmissionProgress';\n  laserCutting: Scalars['Float'];\n  laserCuttingQuantity: Scalars['Float'];\n  model: Scalars['Float'];\n  modelQuantity: Scalars['Float'];\n  total: Scalars['Float'];\n};\n\nexport type SubmissionStatus = \n  'Finished' |\n  'InProgress' |\n  'Pending';\n\n\nexport type User = {\n   __typename: 'User';\n  address: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  email: Scalars['String'];\n  firstName: Scalars['String'];\n  id: Scalars['String'];\n  isMe: Scalars['Boolean'];\n  lastName: Scalars['String'];\n  latitude: Scalars['Float'];\n  longitude: Scalars['Float'];\n  type: UserType;\n};\n\nexport type UserType = \n  'Submitter' |\n  'Volunteer';\n\nexport type CancelJobMutationVariables = {\n  id: Scalars['ID'];\n};\n\n\nexport type CancelJobMutation = (\n  { __typename: 'Mutation' }\n  & { cancelJob: (\n    { __typename: 'Job' }\n    & Pick<Job, 'createdAt' | 'description' | 'id' | 'name' | 'progress' | 'quantity' | 'trackingNumber' | 'type'>\n    & { files: Array<(\n      { __typename: 'File' }\n      & Pick<File, 'id' | 'presignedUrl'>\n    )>, submission: (\n      { __typename: 'Submission' }\n      & Pick<Submission, 'address' | 'createdAt' | 'description' | 'distance' | 'id' | 'latitude' | 'longitude' | 'name' | 'quantity' | 'status'>\n      & { files: (\n        { __typename: 'SubmissionFiles' }\n        & Pick<SubmissionFiles, 'assemblyUrl' | 'createdAt' | 'id'>\n        & { laserCuttingFiles: Array<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )>, modelFiles: Array<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )>, preview?: Maybe<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )> }\n      ), progress: (\n        { __typename: 'SubmissionProgress' }\n        & Pick<SubmissionProgress, 'laserCutting' | 'laserCuttingQuantity' | 'model' | 'modelQuantity' | 'total'>\n      ), submitter: (\n        { __typename: 'User' }\n        & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n      ) }\n    ), volunteer: (\n      { __typename: 'User' }\n      & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n    ) }\n  ) }\n);\n\nexport type CancelSubmissionMutationVariables = {\n  id: Scalars['ID'];\n};\n\n\nexport type CancelSubmissionMutation = (\n  { __typename: 'Mutation' }\n  & { cancelSubmission: (\n    { __typename: 'Submission' }\n    & Pick<Submission, 'address' | 'createdAt' | 'description' | 'distance' | 'id' | 'latitude' | 'longitude' | 'name' | 'quantity' | 'status'>\n    & { files: (\n      { __typename: 'SubmissionFiles' }\n      & Pick<SubmissionFiles, 'assemblyUrl' | 'createdAt' | 'id'>\n      & { laserCuttingFiles: Array<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )>, modelFiles: Array<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )>, preview?: Maybe<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )> }\n    ), progress: (\n      { __typename: 'SubmissionProgress' }\n      & Pick<SubmissionProgress, 'laserCutting' | 'laserCuttingQuantity' | 'model' | 'modelQuantity' | 'total'>\n    ), submitter: (\n      { __typename: 'User' }\n      & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n    ) }\n  ) }\n);\n\nexport type CreateNewJobFromSubmissionMutationVariables = {\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n  type: JobType;\n};\n\n\nexport type CreateNewJobFromSubmissionMutation = (\n  { __typename: 'Mutation' }\n  & { createNewJobFromSubmission: (\n    { __typename: 'Job' }\n    & Pick<Job, 'createdAt' | 'description' | 'id' | 'name' | 'progress' | 'quantity' | 'trackingNumber' | 'type'>\n    & { files: Array<(\n      { __typename: 'File' }\n      & Pick<File, 'id' | 'presignedUrl'>\n    )>, submission: (\n      { __typename: 'Submission' }\n      & Pick<Submission, 'address' | 'createdAt' | 'description' | 'distance' | 'id' | 'latitude' | 'longitude' | 'name' | 'quantity' | 'status'>\n      & { files: (\n        { __typename: 'SubmissionFiles' }\n        & Pick<SubmissionFiles, 'assemblyUrl' | 'createdAt' | 'id'>\n        & { laserCuttingFiles: Array<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )>, modelFiles: Array<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )>, preview?: Maybe<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )> }\n      ), progress: (\n        { __typename: 'SubmissionProgress' }\n        & Pick<SubmissionProgress, 'laserCutting' | 'laserCuttingQuantity' | 'model' | 'modelQuantity' | 'total'>\n      ), submitter: (\n        { __typename: 'User' }\n        & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n      ) }\n    ), volunteer: (\n      { __typename: 'User' }\n      & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n    ) }\n  ) }\n);\n\nexport type CreateSubmissionMutationVariables = {\n  address?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  files?: Maybe<SubmissionFilesInput>;\n  geolocation?: Maybe<GeolocationInput>;\n  marketplaceId?: Maybe<Scalars['ID']>;\n  name: Scalars['String'];\n  quantity: Scalars['Int'];\n};\n\n\nexport type CreateSubmissionMutation = (\n  { __typename: 'Mutation' }\n  & { createSubmission: (\n    { __typename: 'Submission' }\n    & Pick<Submission, 'address' | 'createdAt' | 'description' | 'distance' | 'id' | 'latitude' | 'longitude' | 'name' | 'quantity' | 'status'>\n    & { files: (\n      { __typename: 'SubmissionFiles' }\n      & Pick<SubmissionFiles, 'assemblyUrl' | 'createdAt' | 'id'>\n      & { laserCuttingFiles: Array<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )>, modelFiles: Array<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )>, preview?: Maybe<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )> }\n    ), progress: (\n      { __typename: 'SubmissionProgress' }\n      & Pick<SubmissionProgress, 'laserCutting' | 'laserCuttingQuantity' | 'model' | 'modelQuantity' | 'total'>\n    ), submitter: (\n      { __typename: 'User' }\n      & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n    ) }\n  ) }\n);\n\nexport type ForgotPasswordMutationVariables = {\n  email: Scalars['String'];\n};\n\n\nexport type ForgotPasswordMutation = (\n  { __typename: 'Mutation' }\n  & Pick<Mutation, 'forgotPassword'>\n);\n\nexport type LoginMutationVariables = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type LoginMutation = (\n  { __typename: 'Mutation' }\n  & { login: (\n    { __typename: 'AuthenticationResult' }\n    & Pick<AuthenticationResult, 'id' | 'refreshToken' | 'token'>\n    & { user: (\n      { __typename: 'CurrentUser' }\n      & Pick<CurrentUser, 'id'>\n      & { user: (\n        { __typename: 'User' }\n        & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n      ) }\n    ) }\n  ) }\n);\n\nexport type LoginRefreshTokenMutationVariables = {\n  refreshToken: Scalars['String'];\n  userId: Scalars['ID'];\n};\n\n\nexport type LoginRefreshTokenMutation = (\n  { __typename: 'Mutation' }\n  & { loginRefreshToken: (\n    { __typename: 'AuthenticationResult' }\n    & Pick<AuthenticationResult, 'id' | 'refreshToken' | 'token'>\n    & { user: (\n      { __typename: 'CurrentUser' }\n      & Pick<CurrentUser, 'id'>\n      & { user: (\n        { __typename: 'User' }\n        & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n      ) }\n    ) }\n  ) }\n);\n\nexport type RegisterMutationVariables = {\n  address: Scalars['String'];\n  email: Scalars['String'];\n  firstName: Scalars['String'];\n  geolocation: GeolocationInput;\n  lastName: Scalars['String'];\n  password: Scalars['String'];\n  registrationToken: Scalars['String'];\n  type: UserType;\n};\n\n\nexport type RegisterMutation = (\n  { __typename: 'Mutation' }\n  & { register: (\n    { __typename: 'AuthenticationResult' }\n    & Pick<AuthenticationResult, 'id' | 'refreshToken' | 'token'>\n    & { user: (\n      { __typename: 'CurrentUser' }\n      & Pick<CurrentUser, 'id'>\n      & { user: (\n        { __typename: 'User' }\n        & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n      ) }\n    ) }\n  ) }\n);\n\nexport type SendInvitationMutationVariables = {\n  email: Scalars['String'];\n  type: UserType;\n};\n\n\nexport type SendInvitationMutation = (\n  { __typename: 'Mutation' }\n  & Pick<Mutation, 'sendInvitation'>\n);\n\nexport type SubmitForgotPasswordMutationVariables = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n  token: Scalars['String'];\n};\n\n\nexport type SubmitForgotPasswordMutation = (\n  { __typename: 'Mutation' }\n  & { submitForgotPassword: (\n    { __typename: 'AuthenticationResult' }\n    & Pick<AuthenticationResult, 'id' | 'refreshToken' | 'token'>\n    & { user: (\n      { __typename: 'CurrentUser' }\n      & Pick<CurrentUser, 'id'>\n      & { user: (\n        { __typename: 'User' }\n        & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n      ) }\n    ) }\n  ) }\n);\n\nexport type ToggleJobReceivedMutationVariables = {\n  id: Scalars['ID'];\n};\n\n\nexport type ToggleJobReceivedMutation = (\n  { __typename: 'Mutation' }\n  & { toggleJobReceived: (\n    { __typename: 'Job' }\n    & Pick<Job, 'createdAt' | 'description' | 'id' | 'name' | 'progress' | 'quantity' | 'trackingNumber' | 'type'>\n    & { files: Array<(\n      { __typename: 'File' }\n      & Pick<File, 'id' | 'presignedUrl'>\n    )>, submission: (\n      { __typename: 'Submission' }\n      & Pick<Submission, 'address' | 'createdAt' | 'description' | 'distance' | 'id' | 'latitude' | 'longitude' | 'name' | 'quantity' | 'status'>\n      & { files: (\n        { __typename: 'SubmissionFiles' }\n        & Pick<SubmissionFiles, 'assemblyUrl' | 'createdAt' | 'id'>\n        & { laserCuttingFiles: Array<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )>, modelFiles: Array<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )>, preview?: Maybe<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )> }\n      ), progress: (\n        { __typename: 'SubmissionProgress' }\n        & Pick<SubmissionProgress, 'laserCutting' | 'laserCuttingQuantity' | 'model' | 'modelQuantity' | 'total'>\n      ), submitter: (\n        { __typename: 'User' }\n        & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n      ) }\n    ), volunteer: (\n      { __typename: 'User' }\n      & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n    ) }\n  ) }\n);\n\nexport type UpdateAccountMutationVariables = {\n  address?: Maybe<Scalars['String']>;\n  firstName?: Maybe<Scalars['String']>;\n  geolocation?: Maybe<GeolocationInput>;\n  lastName?: Maybe<Scalars['String']>;\n  password?: Maybe<PasswordUpdateInput>;\n};\n\n\nexport type UpdateAccountMutation = (\n  { __typename: 'Mutation' }\n  & { updateAccount: (\n    { __typename: 'User' }\n    & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n  ) }\n);\n\nexport type UpdateJobProgressMutationVariables = {\n  id: Scalars['ID'];\n  progress: JobProgress;\n  trackingNumber?: Maybe<Scalars['String']>;\n};\n\n\nexport type UpdateJobProgressMutation = (\n  { __typename: 'Mutation' }\n  & { updateJobProgress: (\n    { __typename: 'Job' }\n    & Pick<Job, 'createdAt' | 'description' | 'id' | 'name' | 'progress' | 'quantity' | 'trackingNumber' | 'type'>\n    & { files: Array<(\n      { __typename: 'File' }\n      & Pick<File, 'id' | 'presignedUrl'>\n    )>, submission: (\n      { __typename: 'Submission' }\n      & Pick<Submission, 'address' | 'createdAt' | 'description' | 'distance' | 'id' | 'latitude' | 'longitude' | 'name' | 'quantity' | 'status'>\n      & { files: (\n        { __typename: 'SubmissionFiles' }\n        & Pick<SubmissionFiles, 'assemblyUrl' | 'createdAt' | 'id'>\n        & { laserCuttingFiles: Array<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )>, modelFiles: Array<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )>, preview?: Maybe<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )> }\n      ), progress: (\n        { __typename: 'SubmissionProgress' }\n        & Pick<SubmissionProgress, 'laserCutting' | 'laserCuttingQuantity' | 'model' | 'modelQuantity' | 'total'>\n      ), submitter: (\n        { __typename: 'User' }\n        & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n      ) }\n    ), volunteer: (\n      { __typename: 'User' }\n      & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n    ) }\n  ) }\n);\n\nexport type AcceptedJobsQueryVariables = {};\n\n\nexport type AcceptedJobsQuery = (\n  { __typename: 'Query' }\n  & { acceptedJobs: Array<(\n    { __typename: 'Job' }\n    & Pick<Job, 'createdAt' | 'description' | 'id' | 'name' | 'progress' | 'quantity' | 'trackingNumber' | 'type'>\n    & { files: Array<(\n      { __typename: 'File' }\n      & Pick<File, 'id' | 'presignedUrl'>\n    )>, submission: (\n      { __typename: 'Submission' }\n      & Pick<Submission, 'address' | 'createdAt' | 'description' | 'distance' | 'id' | 'latitude' | 'longitude' | 'name' | 'quantity' | 'status'>\n      & { files: (\n        { __typename: 'SubmissionFiles' }\n        & Pick<SubmissionFiles, 'assemblyUrl' | 'createdAt' | 'id'>\n        & { laserCuttingFiles: Array<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )>, modelFiles: Array<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )>, preview?: Maybe<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )> }\n      ), progress: (\n        { __typename: 'SubmissionProgress' }\n        & Pick<SubmissionProgress, 'laserCutting' | 'laserCuttingQuantity' | 'model' | 'modelQuantity' | 'total'>\n      ), submitter: (\n        { __typename: 'User' }\n        & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n      ) }\n    ), volunteer: (\n      { __typename: 'User' }\n      & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n    ) }\n  )> }\n);\n\nexport type AvailableSubmissionsQueryVariables = {};\n\n\nexport type AvailableSubmissionsQuery = (\n  { __typename: 'Query' }\n  & { availableSubmissions: Array<(\n    { __typename: 'Submission' }\n    & Pick<Submission, 'address' | 'createdAt' | 'description' | 'distance' | 'id' | 'latitude' | 'longitude' | 'name' | 'quantity' | 'status'>\n    & { files: (\n      { __typename: 'SubmissionFiles' }\n      & Pick<SubmissionFiles, 'assemblyUrl' | 'createdAt' | 'id'>\n      & { laserCuttingFiles: Array<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )>, modelFiles: Array<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )>, preview?: Maybe<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )> }\n    ), progress: (\n      { __typename: 'SubmissionProgress' }\n      & Pick<SubmissionProgress, 'laserCutting' | 'laserCuttingQuantity' | 'model' | 'modelQuantity' | 'total'>\n    ), submitter: (\n      { __typename: 'User' }\n      & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n    ) }\n  )> }\n);\n\nexport type JobQueryVariables = {\n  id: Scalars['ID'];\n};\n\n\nexport type JobQuery = (\n  { __typename: 'Query' }\n  & { job: (\n    { __typename: 'Job' }\n    & Pick<Job, 'createdAt' | 'description' | 'id' | 'name' | 'progress' | 'quantity' | 'trackingNumber' | 'type'>\n    & { files: Array<(\n      { __typename: 'File' }\n      & Pick<File, 'id' | 'presignedUrl'>\n    )>, submission: (\n      { __typename: 'Submission' }\n      & Pick<Submission, 'address' | 'createdAt' | 'description' | 'distance' | 'id' | 'latitude' | 'longitude' | 'name' | 'quantity' | 'status'>\n      & { files: (\n        { __typename: 'SubmissionFiles' }\n        & Pick<SubmissionFiles, 'assemblyUrl' | 'createdAt' | 'id'>\n        & { laserCuttingFiles: Array<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )>, modelFiles: Array<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )>, preview?: Maybe<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )> }\n      ), progress: (\n        { __typename: 'SubmissionProgress' }\n        & Pick<SubmissionProgress, 'laserCutting' | 'laserCuttingQuantity' | 'model' | 'modelQuantity' | 'total'>\n      ), submitter: (\n        { __typename: 'User' }\n        & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n      ) }\n    ), volunteer: (\n      { __typename: 'User' }\n      & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n    ) }\n  ) }\n);\n\nexport type MeQueryVariables = {};\n\n\nexport type MeQuery = (\n  { __typename: 'Query' }\n  & { me: (\n    { __typename: 'CurrentUser' }\n    & Pick<CurrentUser, 'id'>\n    & { user: (\n      { __typename: 'User' }\n      & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n    ) }\n  ) }\n);\n\nexport type MedicalItemsQueryVariables = {};\n\n\nexport type MedicalItemsQuery = (\n  { __typename: 'Query' }\n  & { medicalItems: Array<(\n    { __typename: 'MedicalItem' }\n    & Pick<MedicalItem, 'createdAt' | 'description' | 'id' | 'name'>\n    & { files: (\n      { __typename: 'SubmissionFiles' }\n      & Pick<SubmissionFiles, 'assemblyUrl' | 'createdAt' | 'id'>\n      & { laserCuttingFiles: Array<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )>, modelFiles: Array<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )>, preview?: Maybe<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )> }\n    ) }\n  )> }\n);\n\nexport type SubmissionQueryVariables = {\n  id: Scalars['ID'];\n};\n\n\nexport type SubmissionQuery = (\n  { __typename: 'Query' }\n  & { submission: (\n    { __typename: 'Submission' }\n    & Pick<Submission, 'address' | 'createdAt' | 'description' | 'distance' | 'id' | 'latitude' | 'longitude' | 'name' | 'quantity' | 'status'>\n    & { files: (\n      { __typename: 'SubmissionFiles' }\n      & Pick<SubmissionFiles, 'assemblyUrl' | 'createdAt' | 'id'>\n      & { laserCuttingFiles: Array<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )>, modelFiles: Array<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )>, preview?: Maybe<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )> }\n    ), progress: (\n      { __typename: 'SubmissionProgress' }\n      & Pick<SubmissionProgress, 'laserCutting' | 'laserCuttingQuantity' | 'model' | 'modelQuantity' | 'total'>\n    ), submitter: (\n      { __typename: 'User' }\n      & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n    ) }\n  ) }\n);\n\nexport type SubmissionJobsQueryVariables = {\n  id: Scalars['ID'];\n};\n\n\nexport type SubmissionJobsQuery = (\n  { __typename: 'Query' }\n  & { submissionJobs: Array<(\n    { __typename: 'Job' }\n    & Pick<Job, 'createdAt' | 'description' | 'id' | 'name' | 'progress' | 'quantity' | 'trackingNumber' | 'type'>\n    & { files: Array<(\n      { __typename: 'File' }\n      & Pick<File, 'id' | 'presignedUrl'>\n    )>, submission: (\n      { __typename: 'Submission' }\n      & Pick<Submission, 'address' | 'createdAt' | 'description' | 'distance' | 'id' | 'latitude' | 'longitude' | 'name' | 'quantity' | 'status'>\n      & { files: (\n        { __typename: 'SubmissionFiles' }\n        & Pick<SubmissionFiles, 'assemblyUrl' | 'createdAt' | 'id'>\n        & { laserCuttingFiles: Array<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )>, modelFiles: Array<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )>, preview?: Maybe<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )> }\n      ), progress: (\n        { __typename: 'SubmissionProgress' }\n        & Pick<SubmissionProgress, 'laserCutting' | 'laserCuttingQuantity' | 'model' | 'modelQuantity' | 'total'>\n      ), submitter: (\n        { __typename: 'User' }\n        & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n      ) }\n    ), volunteer: (\n      { __typename: 'User' }\n      & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n    ) }\n  )> }\n);\n\nexport type SubmittedSubmissionsQueryVariables = {};\n\n\nexport type SubmittedSubmissionsQuery = (\n  { __typename: 'Query' }\n  & { submittedSubmissions: Array<(\n    { __typename: 'Submission' }\n    & Pick<Submission, 'address' | 'createdAt' | 'description' | 'distance' | 'id' | 'latitude' | 'longitude' | 'name' | 'quantity' | 'status'>\n    & { files: (\n      { __typename: 'SubmissionFiles' }\n      & Pick<SubmissionFiles, 'assemblyUrl' | 'createdAt' | 'id'>\n      & { laserCuttingFiles: Array<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )>, modelFiles: Array<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )>, preview?: Maybe<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )> }\n    ), progress: (\n      { __typename: 'SubmissionProgress' }\n      & Pick<SubmissionProgress, 'laserCutting' | 'laserCuttingQuantity' | 'model' | 'modelQuantity' | 'total'>\n    ), submitter: (\n      { __typename: 'User' }\n      & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n    ) }\n  )> }\n);\n\n\nexport const CancelJobDocument = gql`\n    mutation cancelJob($id: ID!) {\n  cancelJob(id: $id) {\n    createdAt\n    description\n    files {\n      id\n      presignedUrl\n    }\n    id\n    name\n    progress\n    quantity\n    submission {\n      address\n      createdAt\n      description\n      distance\n      files {\n        assemblyUrl\n        createdAt\n        id\n        laserCuttingFiles {\n          id\n          presignedUrl\n        }\n        modelFiles {\n          id\n          presignedUrl\n        }\n        preview {\n          id\n          presignedUrl\n        }\n      }\n      id\n      latitude\n      longitude\n      name\n      progress {\n        laserCutting\n        laserCuttingQuantity\n        model\n        modelQuantity\n        total\n      }\n      quantity\n      status\n      submitter {\n        address\n        createdAt\n        email\n        firstName\n        id\n        isMe\n        lastName\n        latitude\n        longitude\n        type\n      }\n    }\n    trackingNumber\n    type\n    volunteer {\n      address\n      createdAt\n      email\n      firstName\n      id\n      isMe\n      lastName\n      latitude\n      longitude\n      type\n    }\n  }\n}\n    `;\nexport type CancelJobMutationFn = ApolloReactCommon.MutationFunction<CancelJobMutation, CancelJobMutationVariables>;\n\n/**\n * __useCancelJobMutation__\n *\n * To run a mutation, you first call `useCancelJobMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCancelJobMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [cancelJobMutation, { data, loading, error }] = useCancelJobMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useCancelJobMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CancelJobMutation, CancelJobMutationVariables>) {\n        return ApolloReactHooks.useMutation<CancelJobMutation, CancelJobMutationVariables>(CancelJobDocument, baseOptions);\n      }\nexport type CancelJobMutationHookResult = ReturnType<typeof useCancelJobMutation>;\nexport type CancelJobMutationResult = ApolloReactCommon.MutationResult<CancelJobMutation>;\nexport type CancelJobMutationOptions = ApolloReactCommon.BaseMutationOptions<CancelJobMutation, CancelJobMutationVariables>;\nexport const CancelSubmissionDocument = gql`\n    mutation cancelSubmission($id: ID!) {\n  cancelSubmission(id: $id) {\n    address\n    createdAt\n    description\n    distance\n    files {\n      assemblyUrl\n      createdAt\n      id\n      laserCuttingFiles {\n        id\n        presignedUrl\n      }\n      modelFiles {\n        id\n        presignedUrl\n      }\n      preview {\n        id\n        presignedUrl\n      }\n    }\n    id\n    latitude\n    longitude\n    name\n    progress {\n      laserCutting\n      laserCuttingQuantity\n      model\n      modelQuantity\n      total\n    }\n    quantity\n    status\n    submitter {\n      address\n      createdAt\n      email\n      firstName\n      id\n      isMe\n      lastName\n      latitude\n      longitude\n      type\n    }\n  }\n}\n    `;\nexport type CancelSubmissionMutationFn = ApolloReactCommon.MutationFunction<CancelSubmissionMutation, CancelSubmissionMutationVariables>;\n\n/**\n * __useCancelSubmissionMutation__\n *\n * To run a mutation, you first call `useCancelSubmissionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCancelSubmissionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [cancelSubmissionMutation, { data, loading, error }] = useCancelSubmissionMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useCancelSubmissionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CancelSubmissionMutation, CancelSubmissionMutationVariables>) {\n        return ApolloReactHooks.useMutation<CancelSubmissionMutation, CancelSubmissionMutationVariables>(CancelSubmissionDocument, baseOptions);\n      }\nexport type CancelSubmissionMutationHookResult = ReturnType<typeof useCancelSubmissionMutation>;\nexport type CancelSubmissionMutationResult = ApolloReactCommon.MutationResult<CancelSubmissionMutation>;\nexport type CancelSubmissionMutationOptions = ApolloReactCommon.BaseMutationOptions<CancelSubmissionMutation, CancelSubmissionMutationVariables>;\nexport const CreateNewJobFromSubmissionDocument = gql`\n    mutation createNewJobFromSubmission($id: ID!, $quantity: Int!, $type: JobType!) {\n  createNewJobFromSubmission(id: $id, quantity: $quantity, type: $type) {\n    createdAt\n    description\n    files {\n      id\n      presignedUrl\n    }\n    id\n    name\n    progress\n    quantity\n    submission {\n      address\n      createdAt\n      description\n      distance\n      files {\n        assemblyUrl\n        createdAt\n        id\n        laserCuttingFiles {\n          id\n          presignedUrl\n        }\n        modelFiles {\n          id\n          presignedUrl\n        }\n        preview {\n          id\n          presignedUrl\n        }\n      }\n      id\n      latitude\n      longitude\n      name\n      progress {\n        laserCutting\n        laserCuttingQuantity\n        model\n        modelQuantity\n        total\n      }\n      quantity\n      status\n      submitter {\n        address\n        createdAt\n        email\n        firstName\n        id\n        isMe\n        lastName\n        latitude\n        longitude\n        type\n      }\n    }\n    trackingNumber\n    type\n    volunteer {\n      address\n      createdAt\n      email\n      firstName\n      id\n      isMe\n      lastName\n      latitude\n      longitude\n      type\n    }\n  }\n}\n    `;\nexport type CreateNewJobFromSubmissionMutationFn = ApolloReactCommon.MutationFunction<CreateNewJobFromSubmissionMutation, CreateNewJobFromSubmissionMutationVariables>;\n\n/**\n * __useCreateNewJobFromSubmissionMutation__\n *\n * To run a mutation, you first call `useCreateNewJobFromSubmissionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateNewJobFromSubmissionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createNewJobFromSubmissionMutation, { data, loading, error }] = useCreateNewJobFromSubmissionMutation({\n *   variables: {\n *      id: // value for 'id'\n *      quantity: // value for 'quantity'\n *      type: // value for 'type'\n *   },\n * });\n */\nexport function useCreateNewJobFromSubmissionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateNewJobFromSubmissionMutation, CreateNewJobFromSubmissionMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateNewJobFromSubmissionMutation, CreateNewJobFromSubmissionMutationVariables>(CreateNewJobFromSubmissionDocument, baseOptions);\n      }\nexport type CreateNewJobFromSubmissionMutationHookResult = ReturnType<typeof useCreateNewJobFromSubmissionMutation>;\nexport type CreateNewJobFromSubmissionMutationResult = ApolloReactCommon.MutationResult<CreateNewJobFromSubmissionMutation>;\nexport type CreateNewJobFromSubmissionMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateNewJobFromSubmissionMutation, CreateNewJobFromSubmissionMutationVariables>;\nexport const CreateSubmissionDocument = gql`\n    mutation createSubmission($address: String, $description: String, $files: SubmissionFilesInput, $geolocation: GeolocationInput, $marketplaceId: ID, $name: String!, $quantity: Int!) {\n  createSubmission(address: $address, description: $description, files: $files, geolocation: $geolocation, marketplaceId: $marketplaceId, name: $name, quantity: $quantity) {\n    address\n    createdAt\n    description\n    distance\n    files {\n      assemblyUrl\n      createdAt\n      id\n      laserCuttingFiles {\n        id\n        presignedUrl\n      }\n      modelFiles {\n        id\n        presignedUrl\n      }\n      preview {\n        id\n        presignedUrl\n      }\n    }\n    id\n    latitude\n    longitude\n    name\n    progress {\n      laserCutting\n      laserCuttingQuantity\n      model\n      modelQuantity\n      total\n    }\n    quantity\n    status\n    submitter {\n      address\n      createdAt\n      email\n      firstName\n      id\n      isMe\n      lastName\n      latitude\n      longitude\n      type\n    }\n  }\n}\n    `;\nexport type CreateSubmissionMutationFn = ApolloReactCommon.MutationFunction<CreateSubmissionMutation, CreateSubmissionMutationVariables>;\n\n/**\n * __useCreateSubmissionMutation__\n *\n * To run a mutation, you first call `useCreateSubmissionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateSubmissionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createSubmissionMutation, { data, loading, error }] = useCreateSubmissionMutation({\n *   variables: {\n *      address: // value for 'address'\n *      description: // value for 'description'\n *      files: // value for 'files'\n *      geolocation: // value for 'geolocation'\n *      marketplaceId: // value for 'marketplaceId'\n *      name: // value for 'name'\n *      quantity: // value for 'quantity'\n *   },\n * });\n */\nexport function useCreateSubmissionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateSubmissionMutation, CreateSubmissionMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateSubmissionMutation, CreateSubmissionMutationVariables>(CreateSubmissionDocument, baseOptions);\n      }\nexport type CreateSubmissionMutationHookResult = ReturnType<typeof useCreateSubmissionMutation>;\nexport type CreateSubmissionMutationResult = ApolloReactCommon.MutationResult<CreateSubmissionMutation>;\nexport type CreateSubmissionMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateSubmissionMutation, CreateSubmissionMutationVariables>;\nexport const ForgotPasswordDocument = gql`\n    mutation forgotPassword($email: String!) {\n  forgotPassword(email: $email)\n}\n    `;\nexport type ForgotPasswordMutationFn = ApolloReactCommon.MutationFunction<ForgotPasswordMutation, ForgotPasswordMutationVariables>;\n\n/**\n * __useForgotPasswordMutation__\n *\n * To run a mutation, you first call `useForgotPasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useForgotPasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [forgotPasswordMutation, { data, loading, error }] = useForgotPasswordMutation({\n *   variables: {\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useForgotPasswordMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables>) {\n        return ApolloReactHooks.useMutation<ForgotPasswordMutation, ForgotPasswordMutationVariables>(ForgotPasswordDocument, baseOptions);\n      }\nexport type ForgotPasswordMutationHookResult = ReturnType<typeof useForgotPasswordMutation>;\nexport type ForgotPasswordMutationResult = ApolloReactCommon.MutationResult<ForgotPasswordMutation>;\nexport type ForgotPasswordMutationOptions = ApolloReactCommon.BaseMutationOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables>;\nexport const LoginDocument = gql`\n    mutation login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    id\n    refreshToken\n    token\n    user {\n      id\n      user {\n        address\n        createdAt\n        email\n        firstName\n        id\n        isMe\n        lastName\n        latitude\n        longitude\n        type\n      }\n    }\n  }\n}\n    `;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LoginRefreshTokenDocument = gql`\n    mutation loginRefreshToken($refreshToken: String!, $userId: ID!) {\n  loginRefreshToken(refreshToken: $refreshToken, userId: $userId) {\n    id\n    refreshToken\n    token\n    user {\n      id\n      user {\n        address\n        createdAt\n        email\n        firstName\n        id\n        isMe\n        lastName\n        latitude\n        longitude\n        type\n      }\n    }\n  }\n}\n    `;\nexport type LoginRefreshTokenMutationFn = ApolloReactCommon.MutationFunction<LoginRefreshTokenMutation, LoginRefreshTokenMutationVariables>;\n\n/**\n * __useLoginRefreshTokenMutation__\n *\n * To run a mutation, you first call `useLoginRefreshTokenMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginRefreshTokenMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginRefreshTokenMutation, { data, loading, error }] = useLoginRefreshTokenMutation({\n *   variables: {\n *      refreshToken: // value for 'refreshToken'\n *      userId: // value for 'userId'\n *   },\n * });\n */\nexport function useLoginRefreshTokenMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginRefreshTokenMutation, LoginRefreshTokenMutationVariables>) {\n        return ApolloReactHooks.useMutation<LoginRefreshTokenMutation, LoginRefreshTokenMutationVariables>(LoginRefreshTokenDocument, baseOptions);\n      }\nexport type LoginRefreshTokenMutationHookResult = ReturnType<typeof useLoginRefreshTokenMutation>;\nexport type LoginRefreshTokenMutationResult = ApolloReactCommon.MutationResult<LoginRefreshTokenMutation>;\nexport type LoginRefreshTokenMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginRefreshTokenMutation, LoginRefreshTokenMutationVariables>;\nexport const RegisterDocument = gql`\n    mutation register($address: String!, $email: String!, $firstName: String!, $geolocation: GeolocationInput!, $lastName: String!, $password: String!, $registrationToken: String!, $type: UserType!) {\n  register(address: $address, email: $email, firstName: $firstName, geolocation: $geolocation, lastName: $lastName, password: $password, registrationToken: $registrationToken, type: $type) {\n    id\n    refreshToken\n    token\n    user {\n      id\n      user {\n        address\n        createdAt\n        email\n        firstName\n        id\n        isMe\n        lastName\n        latitude\n        longitude\n        type\n      }\n    }\n  }\n}\n    `;\nexport type RegisterMutationFn = ApolloReactCommon.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      address: // value for 'address'\n *      email: // value for 'email'\n *      firstName: // value for 'firstName'\n *      geolocation: // value for 'geolocation'\n *      lastName: // value for 'lastName'\n *      password: // value for 'password'\n *      registrationToken: // value for 'registrationToken'\n *      type: // value for 'type'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        return ApolloReactHooks.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = ApolloReactCommon.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = ApolloReactCommon.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const SendInvitationDocument = gql`\n    mutation sendInvitation($email: String!, $type: UserType!) {\n  sendInvitation(email: $email, type: $type)\n}\n    `;\nexport type SendInvitationMutationFn = ApolloReactCommon.MutationFunction<SendInvitationMutation, SendInvitationMutationVariables>;\n\n/**\n * __useSendInvitationMutation__\n *\n * To run a mutation, you first call `useSendInvitationMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSendInvitationMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [sendInvitationMutation, { data, loading, error }] = useSendInvitationMutation({\n *   variables: {\n *      email: // value for 'email'\n *      type: // value for 'type'\n *   },\n * });\n */\nexport function useSendInvitationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SendInvitationMutation, SendInvitationMutationVariables>) {\n        return ApolloReactHooks.useMutation<SendInvitationMutation, SendInvitationMutationVariables>(SendInvitationDocument, baseOptions);\n      }\nexport type SendInvitationMutationHookResult = ReturnType<typeof useSendInvitationMutation>;\nexport type SendInvitationMutationResult = ApolloReactCommon.MutationResult<SendInvitationMutation>;\nexport type SendInvitationMutationOptions = ApolloReactCommon.BaseMutationOptions<SendInvitationMutation, SendInvitationMutationVariables>;\nexport const SubmitForgotPasswordDocument = gql`\n    mutation submitForgotPassword($email: String!, $password: String!, $token: String!) {\n  submitForgotPassword(email: $email, password: $password, token: $token) {\n    id\n    refreshToken\n    token\n    user {\n      id\n      user {\n        address\n        createdAt\n        email\n        firstName\n        id\n        isMe\n        lastName\n        latitude\n        longitude\n        type\n      }\n    }\n  }\n}\n    `;\nexport type SubmitForgotPasswordMutationFn = ApolloReactCommon.MutationFunction<SubmitForgotPasswordMutation, SubmitForgotPasswordMutationVariables>;\n\n/**\n * __useSubmitForgotPasswordMutation__\n *\n * To run a mutation, you first call `useSubmitForgotPasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSubmitForgotPasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [submitForgotPasswordMutation, { data, loading, error }] = useSubmitForgotPasswordMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *      token: // value for 'token'\n *   },\n * });\n */\nexport function useSubmitForgotPasswordMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SubmitForgotPasswordMutation, SubmitForgotPasswordMutationVariables>) {\n        return ApolloReactHooks.useMutation<SubmitForgotPasswordMutation, SubmitForgotPasswordMutationVariables>(SubmitForgotPasswordDocument, baseOptions);\n      }\nexport type SubmitForgotPasswordMutationHookResult = ReturnType<typeof useSubmitForgotPasswordMutation>;\nexport type SubmitForgotPasswordMutationResult = ApolloReactCommon.MutationResult<SubmitForgotPasswordMutation>;\nexport type SubmitForgotPasswordMutationOptions = ApolloReactCommon.BaseMutationOptions<SubmitForgotPasswordMutation, SubmitForgotPasswordMutationVariables>;\nexport const ToggleJobReceivedDocument = gql`\n    mutation toggleJobReceived($id: ID!) {\n  toggleJobReceived(id: $id) {\n    createdAt\n    description\n    files {\n      id\n      presignedUrl\n    }\n    id\n    name\n    progress\n    quantity\n    submission {\n      address\n      createdAt\n      description\n      distance\n      files {\n        assemblyUrl\n        createdAt\n        id\n        laserCuttingFiles {\n          id\n          presignedUrl\n        }\n        modelFiles {\n          id\n          presignedUrl\n        }\n        preview {\n          id\n          presignedUrl\n        }\n      }\n      id\n      latitude\n      longitude\n      name\n      progress {\n        laserCutting\n        laserCuttingQuantity\n        model\n        modelQuantity\n        total\n      }\n      quantity\n      status\n      submitter {\n        address\n        createdAt\n        email\n        firstName\n        id\n        isMe\n        lastName\n        latitude\n        longitude\n        type\n      }\n    }\n    trackingNumber\n    type\n    volunteer {\n      address\n      createdAt\n      email\n      firstName\n      id\n      isMe\n      lastName\n      latitude\n      longitude\n      type\n    }\n  }\n}\n    `;\nexport type ToggleJobReceivedMutationFn = ApolloReactCommon.MutationFunction<ToggleJobReceivedMutation, ToggleJobReceivedMutationVariables>;\n\n/**\n * __useToggleJobReceivedMutation__\n *\n * To run a mutation, you first call `useToggleJobReceivedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useToggleJobReceivedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [toggleJobReceivedMutation, { data, loading, error }] = useToggleJobReceivedMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useToggleJobReceivedMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ToggleJobReceivedMutation, ToggleJobReceivedMutationVariables>) {\n        return ApolloReactHooks.useMutation<ToggleJobReceivedMutation, ToggleJobReceivedMutationVariables>(ToggleJobReceivedDocument, baseOptions);\n      }\nexport type ToggleJobReceivedMutationHookResult = ReturnType<typeof useToggleJobReceivedMutation>;\nexport type ToggleJobReceivedMutationResult = ApolloReactCommon.MutationResult<ToggleJobReceivedMutation>;\nexport type ToggleJobReceivedMutationOptions = ApolloReactCommon.BaseMutationOptions<ToggleJobReceivedMutation, ToggleJobReceivedMutationVariables>;\nexport const UpdateAccountDocument = gql`\n    mutation updateAccount($address: String, $firstName: String, $geolocation: GeolocationInput, $lastName: String, $password: PasswordUpdateInput) {\n  updateAccount(address: $address, firstName: $firstName, geolocation: $geolocation, lastName: $lastName, password: $password) {\n    address\n    createdAt\n    email\n    firstName\n    id\n    isMe\n    lastName\n    latitude\n    longitude\n    type\n  }\n}\n    `;\nexport type UpdateAccountMutationFn = ApolloReactCommon.MutationFunction<UpdateAccountMutation, UpdateAccountMutationVariables>;\n\n/**\n * __useUpdateAccountMutation__\n *\n * To run a mutation, you first call `useUpdateAccountMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateAccountMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateAccountMutation, { data, loading, error }] = useUpdateAccountMutation({\n *   variables: {\n *      address: // value for 'address'\n *      firstName: // value for 'firstName'\n *      geolocation: // value for 'geolocation'\n *      lastName: // value for 'lastName'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useUpdateAccountMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateAccountMutation, UpdateAccountMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateAccountMutation, UpdateAccountMutationVariables>(UpdateAccountDocument, baseOptions);\n      }\nexport type UpdateAccountMutationHookResult = ReturnType<typeof useUpdateAccountMutation>;\nexport type UpdateAccountMutationResult = ApolloReactCommon.MutationResult<UpdateAccountMutation>;\nexport type UpdateAccountMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateAccountMutation, UpdateAccountMutationVariables>;\nexport const UpdateJobProgressDocument = gql`\n    mutation updateJobProgress($id: ID!, $progress: JobProgress!, $trackingNumber: String) {\n  updateJobProgress(id: $id, progress: $progress, trackingNumber: $trackingNumber) {\n    createdAt\n    description\n    files {\n      id\n      presignedUrl\n    }\n    id\n    name\n    progress\n    quantity\n    submission {\n      address\n      createdAt\n      description\n      distance\n      files {\n        assemblyUrl\n        createdAt\n        id\n        laserCuttingFiles {\n          id\n          presignedUrl\n        }\n        modelFiles {\n          id\n          presignedUrl\n        }\n        preview {\n          id\n          presignedUrl\n        }\n      }\n      id\n      latitude\n      longitude\n      name\n      progress {\n        laserCutting\n        laserCuttingQuantity\n        model\n        modelQuantity\n        total\n      }\n      quantity\n      status\n      submitter {\n        address\n        createdAt\n        email\n        firstName\n        id\n        isMe\n        lastName\n        latitude\n        longitude\n        type\n      }\n    }\n    trackingNumber\n    type\n    volunteer {\n      address\n      createdAt\n      email\n      firstName\n      id\n      isMe\n      lastName\n      latitude\n      longitude\n      type\n    }\n  }\n}\n    `;\nexport type UpdateJobProgressMutationFn = ApolloReactCommon.MutationFunction<UpdateJobProgressMutation, UpdateJobProgressMutationVariables>;\n\n/**\n * __useUpdateJobProgressMutation__\n *\n * To run a mutation, you first call `useUpdateJobProgressMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateJobProgressMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateJobProgressMutation, { data, loading, error }] = useUpdateJobProgressMutation({\n *   variables: {\n *      id: // value for 'id'\n *      progress: // value for 'progress'\n *      trackingNumber: // value for 'trackingNumber'\n *   },\n * });\n */\nexport function useUpdateJobProgressMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateJobProgressMutation, UpdateJobProgressMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateJobProgressMutation, UpdateJobProgressMutationVariables>(UpdateJobProgressDocument, baseOptions);\n      }\nexport type UpdateJobProgressMutationHookResult = ReturnType<typeof useUpdateJobProgressMutation>;\nexport type UpdateJobProgressMutationResult = ApolloReactCommon.MutationResult<UpdateJobProgressMutation>;\nexport type UpdateJobProgressMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateJobProgressMutation, UpdateJobProgressMutationVariables>;\nexport const AcceptedJobsDocument = gql`\n    query acceptedJobs {\n  acceptedJobs {\n    createdAt\n    description\n    files {\n      id\n      presignedUrl\n    }\n    id\n    name\n    progress\n    quantity\n    submission {\n      address\n      createdAt\n      description\n      distance\n      files {\n        assemblyUrl\n        createdAt\n        id\n        laserCuttingFiles {\n          id\n          presignedUrl\n        }\n        modelFiles {\n          id\n          presignedUrl\n        }\n        preview {\n          id\n          presignedUrl\n        }\n      }\n      id\n      latitude\n      longitude\n      name\n      progress {\n        laserCutting\n        laserCuttingQuantity\n        model\n        modelQuantity\n        total\n      }\n      quantity\n      status\n      submitter {\n        address\n        createdAt\n        email\n        firstName\n        id\n        isMe\n        lastName\n        latitude\n        longitude\n        type\n      }\n    }\n    trackingNumber\n    type\n    volunteer {\n      address\n      createdAt\n      email\n      firstName\n      id\n      isMe\n      lastName\n      latitude\n      longitude\n      type\n    }\n  }\n}\n    `;\n\n/**\n * __useAcceptedJobsQuery__\n *\n * To run a query within a React component, call `useAcceptedJobsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAcceptedJobsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAcceptedJobsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAcceptedJobsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AcceptedJobsQuery, AcceptedJobsQueryVariables>) {\n        return ApolloReactHooks.useQuery<AcceptedJobsQuery, AcceptedJobsQueryVariables>(AcceptedJobsDocument, baseOptions);\n      }\nexport function useAcceptedJobsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AcceptedJobsQuery, AcceptedJobsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AcceptedJobsQuery, AcceptedJobsQueryVariables>(AcceptedJobsDocument, baseOptions);\n        }\nexport type AcceptedJobsQueryHookResult = ReturnType<typeof useAcceptedJobsQuery>;\nexport type AcceptedJobsLazyQueryHookResult = ReturnType<typeof useAcceptedJobsLazyQuery>;\nexport type AcceptedJobsQueryResult = ApolloReactCommon.QueryResult<AcceptedJobsQuery, AcceptedJobsQueryVariables>;\nexport const AvailableSubmissionsDocument = gql`\n    query availableSubmissions {\n  availableSubmissions {\n    address\n    createdAt\n    description\n    distance\n    files {\n      assemblyUrl\n      createdAt\n      id\n      laserCuttingFiles {\n        id\n        presignedUrl\n      }\n      modelFiles {\n        id\n        presignedUrl\n      }\n      preview {\n        id\n        presignedUrl\n      }\n    }\n    id\n    latitude\n    longitude\n    name\n    progress {\n      laserCutting\n      laserCuttingQuantity\n      model\n      modelQuantity\n      total\n    }\n    quantity\n    status\n    submitter {\n      address\n      createdAt\n      email\n      firstName\n      id\n      isMe\n      lastName\n      latitude\n      longitude\n      type\n    }\n  }\n}\n    `;\n\n/**\n * __useAvailableSubmissionsQuery__\n *\n * To run a query within a React component, call `useAvailableSubmissionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAvailableSubmissionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAvailableSubmissionsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAvailableSubmissionsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AvailableSubmissionsQuery, AvailableSubmissionsQueryVariables>) {\n        return ApolloReactHooks.useQuery<AvailableSubmissionsQuery, AvailableSubmissionsQueryVariables>(AvailableSubmissionsDocument, baseOptions);\n      }\nexport function useAvailableSubmissionsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AvailableSubmissionsQuery, AvailableSubmissionsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AvailableSubmissionsQuery, AvailableSubmissionsQueryVariables>(AvailableSubmissionsDocument, baseOptions);\n        }\nexport type AvailableSubmissionsQueryHookResult = ReturnType<typeof useAvailableSubmissionsQuery>;\nexport type AvailableSubmissionsLazyQueryHookResult = ReturnType<typeof useAvailableSubmissionsLazyQuery>;\nexport type AvailableSubmissionsQueryResult = ApolloReactCommon.QueryResult<AvailableSubmissionsQuery, AvailableSubmissionsQueryVariables>;\nexport const JobDocument = gql`\n    query job($id: ID!) {\n  job(id: $id) {\n    createdAt\n    description\n    files {\n      id\n      presignedUrl\n    }\n    id\n    name\n    progress\n    quantity\n    submission {\n      address\n      createdAt\n      description\n      distance\n      files {\n        assemblyUrl\n        createdAt\n        id\n        laserCuttingFiles {\n          id\n          presignedUrl\n        }\n        modelFiles {\n          id\n          presignedUrl\n        }\n        preview {\n          id\n          presignedUrl\n        }\n      }\n      id\n      latitude\n      longitude\n      name\n      progress {\n        laserCutting\n        laserCuttingQuantity\n        model\n        modelQuantity\n        total\n      }\n      quantity\n      status\n      submitter {\n        address\n        createdAt\n        email\n        firstName\n        id\n        isMe\n        lastName\n        latitude\n        longitude\n        type\n      }\n    }\n    trackingNumber\n    type\n    volunteer {\n      address\n      createdAt\n      email\n      firstName\n      id\n      isMe\n      lastName\n      latitude\n      longitude\n      type\n    }\n  }\n}\n    `;\n\n/**\n * __useJobQuery__\n *\n * To run a query within a React component, call `useJobQuery` and pass it any options that fit your needs.\n * When your component renders, `useJobQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useJobQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useJobQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<JobQuery, JobQueryVariables>) {\n        return ApolloReactHooks.useQuery<JobQuery, JobQueryVariables>(JobDocument, baseOptions);\n      }\nexport function useJobLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<JobQuery, JobQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<JobQuery, JobQueryVariables>(JobDocument, baseOptions);\n        }\nexport type JobQueryHookResult = ReturnType<typeof useJobQuery>;\nexport type JobLazyQueryHookResult = ReturnType<typeof useJobLazyQuery>;\nexport type JobQueryResult = ApolloReactCommon.QueryResult<JobQuery, JobQueryVariables>;\nexport const MeDocument = gql`\n    query me {\n  me {\n    id\n    user {\n      address\n      createdAt\n      email\n      firstName\n      id\n      isMe\n      lastName\n      latitude\n      longitude\n      type\n    }\n  }\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return ApolloReactHooks.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = ApolloReactCommon.QueryResult<MeQuery, MeQueryVariables>;\nexport const MedicalItemsDocument = gql`\n    query medicalItems {\n  medicalItems {\n    createdAt\n    description\n    files {\n      assemblyUrl\n      createdAt\n      id\n      laserCuttingFiles {\n        id\n        presignedUrl\n      }\n      modelFiles {\n        id\n        presignedUrl\n      }\n      preview {\n        id\n        presignedUrl\n      }\n    }\n    id\n    name\n  }\n}\n    `;\n\n/**\n * __useMedicalItemsQuery__\n *\n * To run a query within a React component, call `useMedicalItemsQuery` and pass it any options that fit your needs.\n * When your component renders, `useMedicalItemsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMedicalItemsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMedicalItemsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MedicalItemsQuery, MedicalItemsQueryVariables>) {\n        return ApolloReactHooks.useQuery<MedicalItemsQuery, MedicalItemsQueryVariables>(MedicalItemsDocument, baseOptions);\n      }\nexport function useMedicalItemsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MedicalItemsQuery, MedicalItemsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MedicalItemsQuery, MedicalItemsQueryVariables>(MedicalItemsDocument, baseOptions);\n        }\nexport type MedicalItemsQueryHookResult = ReturnType<typeof useMedicalItemsQuery>;\nexport type MedicalItemsLazyQueryHookResult = ReturnType<typeof useMedicalItemsLazyQuery>;\nexport type MedicalItemsQueryResult = ApolloReactCommon.QueryResult<MedicalItemsQuery, MedicalItemsQueryVariables>;\nexport const SubmissionDocument = gql`\n    query submission($id: ID!) {\n  submission(id: $id) {\n    address\n    createdAt\n    description\n    distance\n    files {\n      assemblyUrl\n      createdAt\n      id\n      laserCuttingFiles {\n        id\n        presignedUrl\n      }\n      modelFiles {\n        id\n        presignedUrl\n      }\n      preview {\n        id\n        presignedUrl\n      }\n    }\n    id\n    latitude\n    longitude\n    name\n    progress {\n      laserCutting\n      laserCuttingQuantity\n      model\n      modelQuantity\n      total\n    }\n    quantity\n    status\n    submitter {\n      address\n      createdAt\n      email\n      firstName\n      id\n      isMe\n      lastName\n      latitude\n      longitude\n      type\n    }\n  }\n}\n    `;\n\n/**\n * __useSubmissionQuery__\n *\n * To run a query within a React component, call `useSubmissionQuery` and pass it any options that fit your needs.\n * When your component renders, `useSubmissionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSubmissionQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useSubmissionQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SubmissionQuery, SubmissionQueryVariables>) {\n        return ApolloReactHooks.useQuery<SubmissionQuery, SubmissionQueryVariables>(SubmissionDocument, baseOptions);\n      }\nexport function useSubmissionLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SubmissionQuery, SubmissionQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<SubmissionQuery, SubmissionQueryVariables>(SubmissionDocument, baseOptions);\n        }\nexport type SubmissionQueryHookResult = ReturnType<typeof useSubmissionQuery>;\nexport type SubmissionLazyQueryHookResult = ReturnType<typeof useSubmissionLazyQuery>;\nexport type SubmissionQueryResult = ApolloReactCommon.QueryResult<SubmissionQuery, SubmissionQueryVariables>;\nexport const SubmissionJobsDocument = gql`\n    query submissionJobs($id: ID!) {\n  submissionJobs(id: $id) {\n    createdAt\n    description\n    files {\n      id\n      presignedUrl\n    }\n    id\n    name\n    progress\n    quantity\n    submission {\n      address\n      createdAt\n      description\n      distance\n      files {\n        assemblyUrl\n        createdAt\n        id\n        laserCuttingFiles {\n          id\n          presignedUrl\n        }\n        modelFiles {\n          id\n          presignedUrl\n        }\n        preview {\n          id\n          presignedUrl\n        }\n      }\n      id\n      latitude\n      longitude\n      name\n      progress {\n        laserCutting\n        laserCuttingQuantity\n        model\n        modelQuantity\n        total\n      }\n      quantity\n      status\n      submitter {\n        address\n        createdAt\n        email\n        firstName\n        id\n        isMe\n        lastName\n        latitude\n        longitude\n        type\n      }\n    }\n    trackingNumber\n    type\n    volunteer {\n      address\n      createdAt\n      email\n      firstName\n      id\n      isMe\n      lastName\n      latitude\n      longitude\n      type\n    }\n  }\n}\n    `;\n\n/**\n * __useSubmissionJobsQuery__\n *\n * To run a query within a React component, call `useSubmissionJobsQuery` and pass it any options that fit your needs.\n * When your component renders, `useSubmissionJobsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSubmissionJobsQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useSubmissionJobsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SubmissionJobsQuery, SubmissionJobsQueryVariables>) {\n        return ApolloReactHooks.useQuery<SubmissionJobsQuery, SubmissionJobsQueryVariables>(SubmissionJobsDocument, baseOptions);\n      }\nexport function useSubmissionJobsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SubmissionJobsQuery, SubmissionJobsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<SubmissionJobsQuery, SubmissionJobsQueryVariables>(SubmissionJobsDocument, baseOptions);\n        }\nexport type SubmissionJobsQueryHookResult = ReturnType<typeof useSubmissionJobsQuery>;\nexport type SubmissionJobsLazyQueryHookResult = ReturnType<typeof useSubmissionJobsLazyQuery>;\nexport type SubmissionJobsQueryResult = ApolloReactCommon.QueryResult<SubmissionJobsQuery, SubmissionJobsQueryVariables>;\nexport const SubmittedSubmissionsDocument = gql`\n    query submittedSubmissions {\n  submittedSubmissions {\n    address\n    createdAt\n    description\n    distance\n    files {\n      assemblyUrl\n      createdAt\n      id\n      laserCuttingFiles {\n        id\n        presignedUrl\n      }\n      modelFiles {\n        id\n        presignedUrl\n      }\n      preview {\n        id\n        presignedUrl\n      }\n    }\n    id\n    latitude\n    longitude\n    name\n    progress {\n      laserCutting\n      laserCuttingQuantity\n      model\n      modelQuantity\n      total\n    }\n    quantity\n    status\n    submitter {\n      address\n      createdAt\n      email\n      firstName\n      id\n      isMe\n      lastName\n      latitude\n      longitude\n      type\n    }\n  }\n}\n    `;\n\n/**\n * __useSubmittedSubmissionsQuery__\n *\n * To run a query within a React component, call `useSubmittedSubmissionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useSubmittedSubmissionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSubmittedSubmissionsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useSubmittedSubmissionsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SubmittedSubmissionsQuery, SubmittedSubmissionsQueryVariables>) {\n        return ApolloReactHooks.useQuery<SubmittedSubmissionsQuery, SubmittedSubmissionsQueryVariables>(SubmittedSubmissionsDocument, baseOptions);\n      }\nexport function useSubmittedSubmissionsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SubmittedSubmissionsQuery, SubmittedSubmissionsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<SubmittedSubmissionsQuery, SubmittedSubmissionsQueryVariables>(SubmittedSubmissionsDocument, baseOptions);\n        }\nexport type SubmittedSubmissionsQueryHookResult = ReturnType<typeof useSubmittedSubmissionsQuery>;\nexport type SubmittedSubmissionsLazyQueryHookResult = ReturnType<typeof useSubmittedSubmissionsLazyQuery>;\nexport type SubmittedSubmissionsQueryResult = ApolloReactCommon.QueryResult<SubmittedSubmissionsQuery, SubmittedSubmissionsQueryVariables>;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst throwErr = (err, defaultMessage) => {\n    if (err === undefined || typeof err === \"string\") {\n        throw new Error(err !== null && err !== void 0 ? err : defaultMessage);\n    }\n    else if (typeof err === \"function\") {\n        throw new err();\n    }\n    else {\n        throw err;\n    }\n};\nfunction assert(condition, err) {\n    if (!condition) {\n        throwErr(err, \"Assertion failed\");\n    }\n}\nexports.assert = assert;\nfunction assertDefined(value, err) {\n    if (value === null || value === undefined) {\n        throwErr(err, \"Assertion failed\");\n    }\n    return value;\n}\nexports.assertDefined = assertDefined;\nfunction unreachable(err) {\n    return throwErr(err, \"Unreachable code detected!\");\n}\nexports.unreachable = unreachable;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXJ0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2Fzc2VydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLE1BQU0sUUFBUSxHQUFHLENBQ2IsR0FBMkIsRUFDM0IsY0FBc0IsRUFDakIsRUFBRTtJQUNQLElBQUksR0FBRyxLQUFLLFNBQVMsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7UUFDOUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLGFBQUgsR0FBRyxjQUFILEdBQUcsR0FBSSxjQUFjLENBQUMsQ0FBQTtLQUN6QztTQUFNLElBQUksT0FBTyxHQUFHLEtBQUssVUFBVSxFQUFFO1FBQ2xDLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQTtLQUNsQjtTQUFNO1FBQ0gsTUFBTSxHQUFHLENBQUE7S0FDWjtBQUNMLENBQUMsQ0FBQTtBQUVELFNBQWdCLE1BQU0sQ0FBQyxTQUFrQixFQUFFLEdBQWU7SUFDdEQsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUNaLFFBQVEsQ0FBQyxHQUFHLEVBQUUsa0JBQWtCLENBQUMsQ0FBQTtLQUNwQztBQUNMLENBQUM7QUFKRCx3QkFJQztBQUVELFNBQWdCLGFBQWEsQ0FBSSxLQUFRLEVBQUUsR0FBZTtJQUN0RCxJQUFJLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtRQUN2QyxRQUFRLENBQUMsR0FBRyxFQUFFLGtCQUFrQixDQUFDLENBQUE7S0FDcEM7SUFDRCxPQUFPLEtBQXVCLENBQUE7QUFDbEMsQ0FBQztBQUxELHNDQUtDO0FBRUQsU0FBZ0IsV0FBVyxDQUFDLEdBQWU7SUFDdkMsT0FBTyxRQUFRLENBQUMsR0FBRyxFQUFFLDRCQUE0QixDQUFDLENBQUE7QUFDdEQsQ0FBQztBQUZELGtDQUVDIn0=","\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst is_uuid_1 = require(\"is-uuid\");\nconst yup = __importStar(require(\"yup\"));\nexports.address = yup.string();\nexports.geolocation = yup.object({\n    latitude: yup.number().required(),\n    longitude: yup.number().required(),\n});\nexports.jobProgress = yup\n    .mixed()\n    .oneOf([\"Assigned\", \"PrintStarted\", \"PrintComplete\", \"Shipped\", \"Received\"]);\nexports.id = yup.string().test(\"uuid\", ({ value }) => `Invalid UUID: ${value}`, (value) => value === undefined || is_uuid_1.anyNonNil(value));\nexports.email = yup\n    .string()\n    .email()\n    .transform((value) => value.toLowerCase());\nexports.password = yup.string();\nexports.registrationToken = yup.string();\nexports.trackingNumber = yup.string();\nexports.userType = yup\n    .mixed()\n    .oneOf([\"Submitter\", \"Volunteer\"]);\nexports.file = yup.mixed();\nexports.forgotPasswordToken = yup.string();\nexports.refreshToken = yup.string();\nexports.jobType = yup\n    .mixed()\n    .oneOf([\"LaserCutting\", \"Printing\"]);\nexports.passwordUpdate = yup.object({\n    newPassword: exports.password.required(),\n    oldPassword: exports.password.required(),\n});\nexports.upload = yup.mixed().nullable();\nexports.files = yup.object({\n    assembly: exports.upload,\n    laserCutting: yup.array(exports.upload).ensure(),\n    model: yup.array(exports.upload).ensure(),\n    preview: exports.upload,\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3ZhbGlkYXRpb24vY29tbW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHFDQUEyQztBQUMzQyx5Q0FBMEI7QUFPYixRQUFBLE9BQU8sR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUE7QUFFdEIsUUFBQSxXQUFXLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBbUI7SUFDcEQsUUFBUSxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDakMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7Q0FDckMsQ0FBQyxDQUFBO0FBRVcsUUFBQSxXQUFXLEdBQUcsR0FBRztLQUN6QixLQUFLLEVBRUg7S0FDRixLQUFLLENBQUMsQ0FBQyxVQUFVLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQTtBQUVuRSxRQUFBLEVBQUUsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUMvQixNQUFNLEVBQ04sQ0FBQyxFQUFDLEtBQUssRUFBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsS0FBSyxFQUFFLEVBQ3JDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLEtBQUssU0FBUyxJQUFJLG1CQUFNLENBQUMsS0FBSyxDQUFDLENBQ2xELENBQUE7QUFDWSxRQUFBLEtBQUssR0FBRyxHQUFHO0tBQ25CLE1BQU0sRUFBRTtLQUNSLEtBQUssRUFBRTtLQUNQLFNBQVMsQ0FBQyxDQUFDLEtBQWEsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUE7QUFDekMsUUFBQSxRQUFRLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFBO0FBQ3ZCLFFBQUEsaUJBQWlCLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFBO0FBQ2hDLFFBQUEsY0FBYyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtBQUM3QixRQUFBLFFBQVEsR0FBRyxHQUFHO0tBQ3RCLEtBQUssRUFBNkI7S0FDbEMsS0FBSyxDQUFDLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUE7QUFDekIsUUFBQSxJQUFJLEdBQUcsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFBO0FBQ2xCLFFBQUEsbUJBQW1CLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFBO0FBQ2xDLFFBQUEsWUFBWSxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtBQUMzQixRQUFBLE9BQU8sR0FBRyxHQUFHO0tBQ3JCLEtBQUssRUFBK0I7S0FDcEMsS0FBSyxDQUFDLENBQUMsY0FBYyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUE7QUFFM0IsUUFBQSxjQUFjLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBc0I7SUFDMUQsV0FBVyxFQUFFLGdCQUFRLENBQUMsUUFBUSxFQUFFO0lBQ2hDLFdBQVcsRUFBRSxnQkFBUSxDQUFDLFFBQVEsRUFBRTtDQUNuQyxDQUFDLENBQUE7QUFFVyxRQUFBLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUE7QUFDL0IsUUFBQSxLQUFLLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBdUI7SUFDbEQsUUFBUSxFQUFFLGNBQU07SUFDaEIsWUFBWSxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsY0FBTSxDQUFDLENBQUMsTUFBTSxFQUFFO0lBQ3hDLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLGNBQU0sQ0FBQyxDQUFDLE1BQU0sRUFBRTtJQUNqQyxPQUFPLEVBQUUsY0FBTTtDQUNsQixDQUFDLENBQUEifQ==","/* eslint-disable */\n\n\n      export interface IntrospectionResultData {\n        __schema: {\n          types: {\n            kind: string;\n            name: string;\n            possibleTypes: {\n              name: string;\n            }[];\n          }[];\n        };\n      }\n      const result: IntrospectionResultData = {\n  \"__schema\": {\n    \"types\": []\n  }\n};\n      export default result;\n    ","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./assert\"));\n__export(require(\"./memoize\"));\n__export(require(\"./setting\"));\n__export(require(\"./singleton\"));\n__export(require(\"./validation\"));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw4QkFBd0I7QUFDeEIsK0JBQXlCO0FBQ3pCLCtCQUF5QjtBQUN6QixpQ0FBMkI7QUFDM0Isa0NBQTRCIn0=","import {Logging} from \"@nimashoghi/logging\"\nimport React, {useEffect, useState} from \"react\"\nimport {dxfToImageBuffer} from \"../services/thumbnail\"\nimport {contentFromFile} from \"../services/utils\"\n\nconst logger = Logging.logger({__filename})\n\nexport interface DXFViewerProps {\n    height: number\n    source:\n        | {type: \"url\"; url: string}\n        | {data: string; type: \"data\"}\n        | {file: File; type: \"file\"}\n    strokeColor?: string\n    strokeWidth?: string\n    width: number\n}\nexport const DXFViewer: React.FC<DXFViewerProps> = ({\n    height,\n    source,\n    strokeColor,\n    strokeWidth,\n    width,\n}) => {\n    const [base64, changeSBase64] = useState<string>()\n\n    useEffect(() => {\n        const updateSvg = (dxf: string) => {\n            try {\n                // eslint-disable-next-line no-control-regex\n                const isAscii = /^[\\x00-\\x7F]*$/.test(dxf)\n                if (isAscii) {\n                    const buff = dxfToImageBuffer({\n                        dxf,\n                        strokeColor,\n                        strokeWidth,\n                    })\n                    const base64data = buff.toString(\"base64\")\n                    changeSBase64(base64data)\n                }\n            } catch (error) {\n                logger.debug`Got error ${error}... Ignoring`\n            }\n        }\n\n        const getDXFData = async () => {\n            if (source.type === \"data\") {\n                updateSvg(source.data)\n            } else if (source.type === \"file\") {\n                contentFromFile({\n                    file: source.file,\n                    onLoad: (content) => {\n                        updateSvg(content)\n                    },\n                })\n            } else {\n                logger.debug`${source.url}`\n                const response = await fetch(source.url)\n                const dxf = await response.text()\n                updateSvg(dxf)\n            }\n        }\n        getDXFData()\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return (\n        <div style={{height, width}}>\n            {base64 ? (\n                <div style={{padding: width * 0.08}}>\n                    <img src={`data:image/svg+xml;base64,${base64}`} alt=\"\" />\n                </div>\n            ) : null}\n        </div>\n    )\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexports.memoize = (f, stringify) => {\n    const cache = {};\n    return (...args) => {\n        const key = stringify(...args);\n        if (key in cache) {\n            return cache[key];\n        }\n        const value = f(...args);\n        cache[key] = value;\n        return value;\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVtb2l6ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tZW1vaXplLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsOERBQThEO0FBQ2pELFFBQUEsT0FBTyxHQUFHLENBQ25CLENBQXVCLEVBQ3ZCLFNBQW9DLEVBQ3RDLEVBQUU7SUFDQSxNQUFNLEtBQUssR0FBc0IsRUFBRSxDQUFBO0lBQ25DLE9BQU8sQ0FBQyxHQUFHLElBQVUsRUFBRSxFQUFFO1FBQ3JCLE1BQU0sR0FBRyxHQUFHLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFBO1FBQzlCLElBQUksR0FBRyxJQUFJLEtBQUssRUFBRTtZQUNkLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1NBQ3BCO1FBQ0QsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUE7UUFDeEIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQTtRQUNsQixPQUFPLEtBQUssQ0FBQTtJQUNoQixDQUFDLENBQUE7QUFDTCxDQUFDLENBQUEifQ==","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nif (typeof globalThis.window === \"undefined\") {\n    require(\"dotenv\").config({\n        path: require(\"path\").join(__dirname, \"../../../.env\"),\n    });\n}\nconst assert_1 = require(\"./assert\");\nexports.setting = (name, transformer, defaultValue) => {\n    const value = process.env[name];\n    if (value === undefined) {\n        assert_1.assert(defaultValue, `Environment variable \"${name}\" doesn't exist and default value is not set!`);\n        return defaultValue;\n    }\n    return transformer(value);\n};\nexports.setting.boolean = (name, defaultValue) => exports.setting(name, (value) => {\n    if ([\"1\", \"true\", \"TRUE\", \"True\"].includes(value)) {\n        return true;\n    }\n    if ([\"0\", \"false\", \"FALSE\", \"False\"].includes(value)) {\n        return false;\n    }\n    throw new Error(`Environment variable \"${name}\" must be a boolean!`);\n}, defaultValue);\nexports.setting.int = (name, defaultValue) => exports.setting(name, (value) => parseInt(value), defaultValue);\nexports.setting.number = (name, defaultValue) => exports.setting(name, (value) => parseFloat(value), defaultValue);\nexports.setting.string = (name, defaultValue) => exports.setting(name, (value) => value, defaultValue);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zZXR0aW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSSxPQUFRLFVBQWtCLENBQUMsTUFBTSxLQUFLLFdBQVcsRUFBRTtJQUNuRCxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQ3JCLElBQUksRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxlQUFlLENBQUM7S0FDekQsQ0FBQyxDQUFBO0NBQ0w7QUFFRCxxQ0FBK0I7QUFFbEIsUUFBQSxPQUFPLEdBQUcsQ0FDbkIsSUFBWSxFQUNaLFdBQWlDLEVBQ2pDLFlBQWdCLEVBQ2YsRUFBRTtJQUNILE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDL0IsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO1FBQ3JCLGVBQU0sQ0FDRixZQUFZLEVBQ1oseUJBQXlCLElBQUksK0NBQStDLENBQy9FLENBQUE7UUFDRCxPQUFPLFlBQVksQ0FBQTtLQUN0QjtJQUNELE9BQU8sV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQzdCLENBQUMsQ0FBQTtBQUVELGVBQU8sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFZLEVBQUUsWUFBc0IsRUFBRSxFQUFFLENBQ3ZELGVBQU8sQ0FDSCxJQUFJLEVBQ0osQ0FBQyxLQUFLLEVBQUUsRUFBRTtJQUNOLElBQUksQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDL0MsT0FBTyxJQUFJLENBQUE7S0FDZDtJQUVELElBQUksQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDbEQsT0FBTyxLQUFLLENBQUE7S0FDZjtJQUVELE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLElBQUksc0JBQXNCLENBQUMsQ0FBQTtBQUN4RSxDQUFDLEVBQ0QsWUFBWSxDQUNmLENBQUE7QUFFTCxlQUFPLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBWSxFQUFFLFlBQXFCLEVBQUUsRUFBRSxDQUNsRCxlQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUE7QUFFM0QsZUFBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQVksRUFBRSxZQUFxQixFQUFFLEVBQUUsQ0FDckQsZUFBTyxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFBO0FBRTdELGVBQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFZLEVBQUUsWUFBcUIsRUFBRSxFQUFFLENBQ3JELGVBQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQSJ9","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.singleton = (factory) => {\n    let instance;\n    return () => {\n        if (instance === undefined) {\n            instance = factory();\n        }\n        return instance;\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xldG9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NpbmdsZXRvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFhLFFBQUEsU0FBUyxHQUFHLENBQUksT0FBZ0IsRUFBRSxFQUFFO0lBQzdDLElBQUksUUFBdUIsQ0FBQTtJQUUzQixPQUFPLEdBQUcsRUFBRTtRQUNSLElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtZQUN4QixRQUFRLEdBQUcsT0FBTyxFQUFFLENBQUE7U0FDdkI7UUFDRCxPQUFPLFFBQVEsQ0FBQTtJQUNuQixDQUFDLENBQUE7QUFDTCxDQUFDLENBQUEifQ==","\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Mutation = __importStar(require(\"./mutation\"));\nconst Query = __importStar(require(\"./query\"));\nexports.validation = { Mutation, Query };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdmFsaWRhdGlvbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxxREFBc0M7QUFDdEMsK0NBQWdDO0FBRW5CLFFBQUEsVUFBVSxHQUFHLEVBQUMsUUFBUSxFQUFFLEtBQUssRUFBQyxDQUFBIn0=","\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst yup = __importStar(require(\"yup\"));\nconst common_1 = require(\"./common\");\nexports.cancelJob = yup.object({ id: common_1.id.required() });\nexports.cancelSubmission = yup.object({\n    id: common_1.id.required(),\n});\nexports.createNewJobFromSubmission = yup.object({\n    id: common_1.id.required(),\n    quantity: yup.number().min(1),\n    type: common_1.jobType.required(),\n});\nexports.createSubmission = yup\n    .object({\n    address: common_1.address,\n    description: yup.string(),\n    files: common_1.files.nullable().default(null),\n    geolocation: common_1.geolocation.nullable().default(null),\n    marketplaceId: common_1.id,\n    name: yup.string().required(),\n    quantity: yup.number().min(1),\n})\n    .test(\"valid file input\", `You must either provide input files or a medical item ID!`, (value) => !!(value.files || value.marketplaceId));\nexports.register = yup.object({\n    address: common_1.address.required(),\n    email: common_1.email.required(),\n    firstName: yup.string().required(),\n    geolocation: common_1.geolocation.required(),\n    lastName: yup.string().required(),\n    password: common_1.password.required(),\n    registrationToken: common_1.registrationToken.required(),\n    type: common_1.userType.required(),\n});\nexports.login = yup.object({\n    email: common_1.email.required(),\n    password: common_1.password.required(),\n});\nexports.updateAccount = yup.object({\n    address: common_1.address,\n    firstName: yup.string(),\n    geolocation: common_1.geolocation.nullable().default(null),\n    lastName: yup.string(),\n    password: common_1.passwordUpdate.nullable().default(null),\n});\nexports.updateJobProgress = yup\n    .object({\n    id: common_1.id.required(),\n    progress: common_1.jobProgress.required(),\n    trackingNumber: common_1.trackingNumber,\n})\n    .test(\"valid tracking number\", `You must provide a valid tracking number when the progress is Shipped!`, (value) => (value === null || value === void 0 ? void 0 : value.progress) !== \"Shipped\" ||\n    (value === null || value === void 0 ? void 0 : value.trackingNumber) !== undefined);\nexports.forgotPassword = yup.object({\n    email: common_1.email.required(),\n});\nexports.submitForgotPassword = yup.object({\n    email: common_1.email.required(),\n    password: common_1.password.required(),\n    token: common_1.forgotPasswordToken.required(),\n});\nexports.loginRefreshToken = yup.object({\n    refreshToken: common_1.refreshToken.required(),\n    userId: common_1.id.required(),\n});\nexports.sendInvitation = yup.object({\n    email: common_1.email.required(),\n    type: common_1.userType.required(),\n});\nexports.toggleJobReceived = yup.object({\n    id: common_1.id.required(),\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXV0YXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdmFsaWRhdGlvbi9tdXRhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSx5Q0FBMEI7QUFnQjFCLHFDQWVpQjtBQUVKLFFBQUEsU0FBUyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQXdCLEVBQUMsRUFBRSxFQUFFLFdBQUUsQ0FBQyxRQUFRLEVBQUUsRUFBQyxDQUFDLENBQUE7QUFDbEUsUUFBQSxnQkFBZ0IsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUErQjtJQUNyRSxFQUFFLEVBQUUsV0FBRSxDQUFDLFFBQVEsRUFBRTtDQUNwQixDQUFDLENBQUE7QUFDVyxRQUFBLDBCQUEwQixHQUFHLEdBQUcsQ0FBQyxNQUFNLENBRWxEO0lBQ0UsRUFBRSxFQUFFLFdBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDakIsUUFBUSxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzdCLElBQUksRUFBRSxnQkFBTyxDQUFDLFFBQVEsRUFBRTtDQUMzQixDQUFDLENBQUE7QUFDVyxRQUFBLGdCQUFnQixHQUFHLEdBQUc7S0FDOUIsTUFBTSxDQUErQjtJQUNsQyxPQUFPLEVBQVAsZ0JBQU87SUFDUCxXQUFXLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRTtJQUN6QixLQUFLLEVBQUUsY0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFDckMsV0FBVyxFQUFFLG9CQUFXLENBQUMsUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztJQUNqRCxhQUFhLEVBQUUsV0FBRTtJQUNqQixJQUFJLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtJQUM3QixRQUFRLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Q0FDaEMsQ0FBQztLQUNELElBQUksQ0FDRCxrQkFBa0IsRUFDbEIsMkRBQTJELEVBQzNELENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FDcEQsQ0FBQTtBQUNRLFFBQUEsUUFBUSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQXVCO0lBQ3JELE9BQU8sRUFBRSxnQkFBTyxDQUFDLFFBQVEsRUFBRTtJQUMzQixLQUFLLEVBQUUsY0FBSyxDQUFDLFFBQVEsRUFBRTtJQUN2QixTQUFTLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtJQUNsQyxXQUFXLEVBQUUsb0JBQVcsQ0FBQyxRQUFRLEVBQUU7SUFDbkMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDakMsUUFBUSxFQUFFLGlCQUFRLENBQUMsUUFBUSxFQUFFO0lBQzdCLGlCQUFpQixFQUFFLDBCQUFpQixDQUFDLFFBQVEsRUFBRTtJQUMvQyxJQUFJLEVBQUUsaUJBQVEsQ0FBQyxRQUFRLEVBQUU7Q0FDNUIsQ0FBQyxDQUFBO0FBRVcsUUFBQSxLQUFLLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBb0I7SUFDL0MsS0FBSyxFQUFFLGNBQUssQ0FBQyxRQUFRLEVBQUU7SUFDdkIsUUFBUSxFQUFFLGlCQUFRLENBQUMsUUFBUSxFQUFFO0NBQ2hDLENBQUMsQ0FBQTtBQUVXLFFBQUEsYUFBYSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQTRCO0lBQy9ELE9BQU8sRUFBUCxnQkFBTztJQUNQLFNBQVMsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFO0lBQ3ZCLFdBQVcsRUFBRSxvQkFBVyxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFDakQsUUFBUSxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUU7SUFDdEIsUUFBUSxFQUFFLHVCQUFjLENBQUMsUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztDQUNwRCxDQUFDLENBQUE7QUFFVyxRQUFBLGlCQUFpQixHQUFHLEdBQUc7S0FDL0IsTUFBTSxDQUFnQztJQUNuQyxFQUFFLEVBQUUsV0FBRSxDQUFDLFFBQVEsRUFBRTtJQUNqQixRQUFRLEVBQUUsb0JBQVcsQ0FBQyxRQUFRLEVBQUU7SUFDaEMsY0FBYyxFQUFFLHVCQUFjO0NBQ2pDLENBQUM7S0FDRCxJQUFJLENBQ0QsdUJBQXVCLEVBQ3ZCLHdFQUF3RSxFQUN4RSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQ04sQ0FBQSxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsUUFBUSxNQUFLLFNBQVM7SUFDN0IsQ0FBQSxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsY0FBYyxNQUFLLFNBQVMsQ0FDMUMsQ0FBQTtBQUVRLFFBQUEsY0FBYyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQTZCO0lBQ2pFLEtBQUssRUFBRSxjQUFLLENBQUMsUUFBUSxFQUFFO0NBQzFCLENBQUMsQ0FBQTtBQUVXLFFBQUEsb0JBQW9CLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FFNUM7SUFDRSxLQUFLLEVBQUUsY0FBSyxDQUFDLFFBQVEsRUFBRTtJQUN2QixRQUFRLEVBQUUsaUJBQVEsQ0FBQyxRQUFRLEVBQUU7SUFDN0IsS0FBSyxFQUFFLDRCQUFtQixDQUFDLFFBQVEsRUFBRTtDQUN4QyxDQUFDLENBQUE7QUFFVyxRQUFBLGlCQUFpQixHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQWdDO0lBQ3ZFLFlBQVksRUFBRSxxQkFBWSxDQUFDLFFBQVEsRUFBRTtJQUNyQyxNQUFNLEVBQUUsV0FBRSxDQUFDLFFBQVEsRUFBRTtDQUN4QixDQUFDLENBQUE7QUFFVyxRQUFBLGNBQWMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUE2QjtJQUNqRSxLQUFLLEVBQUUsY0FBSyxDQUFDLFFBQVEsRUFBRTtJQUN2QixJQUFJLEVBQUUsaUJBQVEsQ0FBQyxRQUFRLEVBQUU7Q0FDNUIsQ0FBQyxDQUFBO0FBRVcsUUFBQSxpQkFBaUIsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFnQztJQUN2RSxFQUFFLEVBQUUsV0FBRSxDQUFDLFFBQVEsRUFBRTtDQUNwQixDQUFDLENBQUEifQ==","\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst yup = __importStar(require(\"yup\"));\nconst common_1 = require(\"./common\");\nexports.acceptedJobs = yup.object({});\nexports.availableJobs = yup.object({});\nexports.job = yup.object({ id: common_1.id.required() });\nexports.me = yup.object({});\nexports.medicalItems = yup.object({});\nexports.submission = yup.object({ id: common_1.id.required() });\nexports.submissionJobs = yup.object({\n    id: common_1.id.required(),\n});\nexports.submittedSubmissions = yup.object({});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdmFsaWRhdGlvbi9xdWVyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSx5Q0FBMEI7QUFNMUIscUNBQTJCO0FBRWQsUUFBQSxZQUFZLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBSyxFQUFFLENBQUMsQ0FBQTtBQUNqQyxRQUFBLGFBQWEsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFLLEVBQUUsQ0FBQyxDQUFBO0FBQ2xDLFFBQUEsR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQWUsRUFBQyxFQUFFLEVBQUUsV0FBRSxDQUFDLFFBQVEsRUFBRSxFQUFDLENBQUMsQ0FBQTtBQUNuRCxRQUFBLEVBQUUsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFLLEVBQUUsQ0FBQyxDQUFBO0FBQ3ZCLFFBQUEsWUFBWSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUssRUFBRSxDQUFDLENBQUE7QUFDakMsUUFBQSxVQUFVLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBc0IsRUFBQyxFQUFFLEVBQUUsV0FBRSxDQUFDLFFBQVEsRUFBRSxFQUFDLENBQUMsQ0FBQTtBQUNqRSxRQUFBLGNBQWMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUEwQjtJQUM5RCxFQUFFLEVBQUUsV0FBRSxDQUFDLFFBQVEsRUFBRTtDQUNwQixDQUFDLENBQUE7QUFDVyxRQUFBLG9CQUFvQixHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUssRUFBRSxDQUFDLENBQUEifQ==","import {red} from \"@material-ui/core/colors\"\nimport {createMuiTheme} from \"@material-ui/core/styles\"\n\nexport const background = \"white\"\n\n// Create a theme instance.\nexport const theme = createMuiTheme({\n    palette: {\n        background: {\n            default: \"#fff\",\n        },\n        error: {\n            main: red.A400,\n        },\n        primary: {\n            main: \"#2e48a8\",\n        },\n        secondary: {\n            main: \"#19857b\",\n        },\n    },\n    typography: {\n        fontFamily: [\"Righteous\"].join(\",\"),\n    },\n})\n","/* eslint-disable no-return-assign */\nlet cache: Record<string, string | null> = {}\n\ntype KeyType = \"JWT_TOKEN\" | \"REFRESH_TOKEN\" | \"USER_ID\"\n\nexport const cachedStorage = {\n    clear: () => {\n        cache = {}\n        localStorage.clear()\n    },\n    getItem: (key: KeyType) =>\n        cache[key] ?? (cache[key] = localStorage.getItem(key)),\n    removeItem: (key: KeyType) => {\n        delete cache[key]\n        localStorage.removeItem(key)\n    },\n    setItem: (key: KeyType, value: string) => {\n        cache[key] = value\n        localStorage.setItem(key, value)\n    },\n} as const\n","import {NormalizedCacheObject} from \"apollo-cache-inmemory\"\nimport ApolloClient from \"apollo-client\"\nimport {cachedStorage} from \".\"\nimport {\n    LoginRefreshTokenDocument,\n    LoginRefreshTokenMutation,\n    LoginRefreshTokenMutationVariables,\n} from \"../graphql/schema.generated\"\n\nconst decode = (jwt: string): {exp?: number} | undefined =>\n    jwt && JSON.parse(atob(jwt.split(\".\")[1]))\n\nconst tokenExpired = (jwt: string) =>\n    (decode(jwt)?.exp ?? 0) * 1000.0 <= Date.now()\n\nconst getNewToken = async (client: ApolloClient<NormalizedCacheObject>) => {\n    const [userId, refreshToken] = [\n        cachedStorage.getItem(\"USER_ID\"),\n        cachedStorage.getItem(\"REFRESH_TOKEN\"),\n    ] as const\n    if (!userId || !refreshToken) {\n        // logout()\n        return \"\"\n    }\n\n    const {data, errors} = await client.mutate<\n        LoginRefreshTokenMutation,\n        LoginRefreshTokenMutationVariables\n    >({\n        mutation: LoginRefreshTokenDocument,\n        variables: {refreshToken, userId},\n    })\n    if (errors || !data?.loginRefreshToken?.token) {\n        // logout()\n        return \"\"\n    }\n\n    cachedStorage.setItem(\"JWT_TOKEN\", data.loginRefreshToken.token)\n    return data?.loginRefreshToken?.token\n}\n\nexport const getJwtToken = async (\n    client: ApolloClient<NormalizedCacheObject>,\n) => {\n    const jwtToken = cachedStorage.getItem(\"JWT_TOKEN\")\n    if (!jwtToken || tokenExpired(jwtToken)) {\n        return await getNewToken(client)\n    }\n    return jwtToken\n}\n","export * from \"./cachedStorage\"\nexport * from \"../hooks/useDateFromNow\"\nexport * from \"./refreshToken\"\n","export interface LocationSearch {\n    features: LocationFeature[]\n    licence: string\n    type: string\n}\n\nexport interface LocationFeature {\n    bbox?: number[]\n    geometry?: Geometry\n    properties: Properties\n    type?: FeatureType\n}\n\nexport interface Geometry {\n    coordinates: number[]\n    type: GeometryType\n}\n\nexport enum GeometryType {\n    Point = \"Point\",\n}\n\nexport interface Properties {\n    category?: Category\n    display_name: string\n    icon?: string\n    importance?: number\n    osm_id?: number\n    osm_type?: OsmType\n    place_id?: number\n    place_rank?: number\n    type?: string\n}\n\nexport enum Category {\n    Boundary = \"boundary\",\n    Place = \"place\",\n    Railway = \"railway\",\n}\n\nexport enum OsmType {\n    Node = \"node\",\n    Relation = \"relation\",\n    Way = \"way\",\n}\n\nexport enum FeatureType {\n    Feature = \"Feature\",\n}\n\nexport const searchLocations = async (\n    query: string,\n): Promise<LocationSearch> => {\n    const response = await fetch(\n        `https://nominatim.openstreetmap.org/search?q=${encodeURI(\n            query,\n        )}&format=geojson`,\n    )\n    return response.json()\n}\n","import {Snackbar} from \"@material-ui/core\"\nimport MuiAlert from \"@material-ui/lab/Alert\"\nimport React from \"react\"\nimport {NotifyMessage} from \"../client\"\n\nexport interface SnackBarComponentProps {\n    state: [\n        NotifyMessage | undefined,\n        React.Dispatch<React.SetStateAction<NotifyMessage | undefined>>,\n    ]\n}\nexport const SnackBarComponent: React.FC<SnackBarComponentProps> = ({\n    state: [snack, updateSnack],\n}) => {\n    return (\n        <Snackbar\n            open={!!snack}\n            autoHideDuration={6000}\n            onClose={(event) => {\n                if (!event) {\n                    updateSnack(undefined)\n                }\n            }}>\n            <MuiAlert\n                elevation={6}\n                variant=\"filled\"\n                severity={snack?.severity || \"error\"}>\n                {snack ? snack.message.replace(\"GraphQL error:\", \"\") : \"\"}\n            </MuiAlert>\n        </Snackbar>\n    )\n}\n","import React, {useContext} from \"react\"\nimport {NotifyMessage} from \"../client\"\n\ninterface Snack {\n    updateSnack: (snack: NotifyMessage | undefined) => void\n}\nexport const SnackContext = React.createContext<Snack>({updateSnack: () => {}})\nexport const useSnack = () => useContext(SnackContext)\n","import {useLocation} from \"react-router-dom\"\n\nexport const useQuery = () => {\n    return new URLSearchParams(useLocation().search)\n}\n","import {Typography} from \"@material-ui/core\"\nimport BackupIcon from \"@material-ui/icons/Backup\"\nimport React, {useCallback, useMemo} from \"react\"\nimport Dropzone, {IFileWithMeta, StatusValue} from \"react-dropzone-uploader\"\nimport \"react-dropzone-uploader/dist/styles.css\"\nimport {useSnack} from \"../../hooks\"\nimport {theme} from \"../theme\"\nimport \"./extra.css\"\nimport {FileUploadFormItem} from \"./form\"\n\nconst MAX_SIZE = 30 ** 20\n\nexport type FormFileUploadItemProps = FileUploadFormItem & {\n    handleChange: (id: string, value: File[] | File | undefined) => void\n}\nexport const FormFileUploadItem: React.FC<FormFileUploadItemProps> = ({\n    PreviewComponent,\n    accept,\n    handleChange,\n    icon,\n    id,\n    label,\n    multiple = true,\n    defaultValue = [],\n}) => {\n    const {updateSnack} = useSnack()\n\n    const handleChangeStatus = useCallback(\n        (_: IFileWithMeta, status: StatusValue) => {\n            if (status.includes(\"rejected\")) {\n                updateSnack({message: status})\n            }\n        },\n        [updateSnack],\n    )\n\n    const fileUploadComponent = useMemo(() => {\n        return (\n            <Dropzone\n                PreviewComponent={\n                    PreviewComponent &&\n                    ((props) => (\n                        // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n                        // @ts-ignore\n                        <PreviewComponent\n                            {...props}\n                            id={id}\n                            handleChange={(\n                                value: File[] | File | undefined,\n                            ) => {\n                                handleChange(id, value)\n                            }}\n                        />\n                    ))\n                }\n                SubmitButtonComponent={null as never}\n                maxSizeBytes={MAX_SIZE}\n                initialFiles={\n                    Array.isArray(defaultValue) ? defaultValue : [defaultValue]\n                }\n                onChangeStatus={handleChangeStatus}\n                accept={accept}\n                autoUpload\n                maxFiles={multiple ? 10 : 1}\n                multiple={multiple}\n                inputContent={(_, extra) => {\n                    return extra.reject ? (\n                        \"File type not supported\"\n                    ) : (\n                        <div\n                            key=\"upload-btn\"\n                            style={{display: \"flex\", flexDirection: \"row\"}}>\n                            {icon || <BackupIcon />}\n                            <Typography\n                                style={{marginLeft: 10}}\n                                variant=\"body1\">\n                                {label.toUpperCase()}\n                            </Typography>\n                        </div>\n                    )\n                }}\n                styles={{\n                    dropzone: {\n                        borderColor: theme.palette.primary.main,\n                        padding: 10,\n                    },\n\n                    dropzoneActive: {\n                        backgroundColor: \"rgba(46,73,168,0.1)\",\n                    },\n                    dropzoneReject: {\n                        backgroundColor: \"#DAA\",\n                        borderColor: \"red\",\n                    },\n                    inputLabel: (_, extra) =>\n                        extra.reject\n                            ? {color: \"red\"}\n                            : {color: theme.palette.primary.main},\n                }}\n            />\n        )\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return fileUploadComponent\n}\n","/* eslint-disable no-use-before-define */\n\nimport TextField, {TextFieldProps} from \"@material-ui/core/TextField\"\nimport Autocomplete from \"@material-ui/lab/Autocomplete\"\nimport React, {useEffect, useState} from \"react\"\nimport {useDebounce} from \"../hooks/useDebounce\"\n\nexport interface ApiAutocompleteProps<T> {\n    defaultValue?: T\n    freeSolo: boolean\n    objectResolver: (object: T) => string\n    onQuery: (query: string) => Promise<T[]>\n    onSelect?: (object: T | null) => void\n    onTextChange?: (value: string) => void\n    textProps?: TextFieldProps\n}\nexport function ApiAutocomplete<T>({\n    defaultValue,\n    freeSolo,\n    objectResolver,\n    onQuery,\n    onSelect,\n    onTextChange,\n    textProps,\n}: ApiAutocompleteProps<T>) {\n    const [text, changeText] = useState<string>(\"\")\n    const debouncedText = useDebounce(text, 500)\n    const [options, changeOptions] = useState<T[]>([])\n    useEffect(() => {\n        const search = async () => {\n            if (debouncedText !== \"\") {\n                const search = await onQuery(debouncedText)\n                changeOptions(() => {\n                    return [...search]\n                })\n            }\n        }\n        search()\n    }, [debouncedText, onQuery])\n\n    return (\n        <Autocomplete\n            defaultValue={defaultValue}\n            freeSolo={freeSolo}\n            id=\"combo-box-demo\"\n            filterOptions={(x) => x}\n            onChange={(_: unknown, newValue: T | null) => {\n                if (onSelect) {\n                    onSelect(newValue)\n                }\n            }}\n            renderInput={(params) => (\n                <TextField\n                    {...params}\n                    {...textProps}\n                    onChange={({target: {value}}) => {\n                        changeText(value)\n                        if (onSelect && onTextChange) {\n                            onTextChange(value)\n                        }\n                    }}\n                />\n            )}\n            options={options}\n            getOptionLabel={(option) => objectResolver(option)}\n        />\n    )\n}\n","import {useEffect, useState} from \"react\"\n\n// Our hook\nexport const useDebounce = <T>(value: T, delay: number) => {\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value)\n\n    useEffect(() => {\n        // Set debouncedValue to value (passed in) after the specified delay\n        const handler = setTimeout(() => {\n            setDebouncedValue(value)\n        }, delay)\n\n        // Return a cleanup function that will be called every time ...\n        // ... useEffect is re-called. useEffect will only be re-called ...\n        // ... if value changes (see the inputs array below).\n        // This is how we prevent debouncedValue from changing if value is ...\n        // ... changed within the delay period. Timeout gets cleared and restarted.\n        // To put it in context, if the user is typing within our app's ...\n        // ... search box, we don't want the debouncedValue to update until ...\n        // ... they've stopped typing for more than 500ms.\n        return () => {\n            clearTimeout(handler)\n        }\n    }, [value, delay]) // ... need to be able to change that dynamically. // You could also add the \"delay\" var to inputs array if you ... // Only re-call effect if value changes\n\n    return debouncedValue\n}\n","import React, {useCallback, useEffect} from \"react\"\nimport {LocationFeature, searchLocations} from \"../../services/location-search\"\nimport {ApiAutocomplete} from \"../api-autocomplete\"\nimport {LocationFormItem} from \"./form\"\n\nexport type FormLocationItemProps = LocationFormItem & {\n    handleChange: (id: string, value: string | number) => void\n}\nexport const FormLocationItem = ({\n    autoComplete,\n    defaultValue,\n    freeSolo = false,\n    handleChange,\n    id,\n    label,\n    locationIds,\n    required,\n}: FormLocationItemProps) => {\n    const setLocation = useCallback(\n        (location: LocationFeature | undefined | null) => {\n            if (location) {\n                handleChange(id, location.properties.display_name)\n                if (locationIds) {\n                    const {latitude, longitude} = locationIds\n                    if (location.geometry) {\n                        handleChange(latitude, location.geometry.coordinates[1])\n                        handleChange(\n                            longitude,\n                            location.geometry.coordinates[0],\n                        )\n                    }\n                }\n            }\n        },\n        [handleChange, id, locationIds],\n    )\n\n    useEffect(() => {\n        setLocation(defaultValue)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return (\n        <ApiAutocomplete\n            textProps={{\n                autoComplete,\n                fullWidth: true,\n                id,\n                label,\n                name: id,\n                required,\n                variant: \"outlined\",\n            }}\n            onQuery={async (query) => {\n                const search = await searchLocations(query)\n                return search.features\n            }}\n            objectResolver={(feature: LocationFeature) => {\n                return feature.properties.display_name\n            }}\n            onTextChange={(query: string) => {\n                setLocation({\n                    properties: {\n                        display_name: query,\n                    },\n                })\n            }}\n            freeSolo={freeSolo}\n            defaultValue={defaultValue}\n            onSelect={setLocation}\n        />\n    )\n}\n","import {IconButton, InputAdornment, Tooltip} from \"@material-ui/core\"\nimport React from \"react\"\n\nexport interface TooltipComponentProps {\n    hint: string\n    icon: JSX.Element\n}\nexport const TooltipComponent: React.FC<TooltipComponentProps> = ({\n    hint,\n    icon,\n}) => (\n    <InputAdornment position=\"end\">\n        <Tooltip title={hint} placement=\"top\" arrow>\n            <IconButton aria-label=\"delete\">{icon}</IconButton>\n        </Tooltip>\n    </InputAdornment>\n)\n","import {InputLabel, MenuItem, Select} from \"@material-ui/core\"\nimport FormControl from \"@material-ui/core/FormControl\"\nimport HelpIcon from \"@material-ui/icons/Help\"\nimport React, {useEffect, useState} from \"react\"\nimport {TooltipComponent} from \"../tooltip\"\nimport {SelectFormItem} from \"./form\"\n\nexport type FormSelectItemProps = SelectFormItem & {\n    handleChange: (id: string, value: string) => void\n}\nexport const FormSelectItem: React.FC<FormSelectItemProps> = ({\n    autoComplete,\n    defaultValue = \"\",\n    disabled = false,\n    handleChange,\n    hint,\n    id,\n    label,\n    options,\n    required,\n}) => {\n    const [selectValue, changeSelectValue] = useState<string>(defaultValue)\n\n    useEffect(() => {\n        handleChange(id, defaultValue)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return (\n        <FormControl required={required} variant=\"outlined\" fullWidth>\n            <InputLabel id=\"select-outlined-label\">{label}</InputLabel>\n            <Select\n                disabled={disabled}\n                endAdornment={\n                    hint ? (\n                        <TooltipComponent hint={hint} icon={<HelpIcon />} />\n                    ) : undefined\n                }\n                required={required}\n                value={selectValue}\n                autoComplete={autoComplete}\n                labelId=\"select-outlined-label\"\n                id={id}\n                onChange={({target: {value}}) => {\n                    if (typeof value === \"string\") {\n                        changeSelectValue(value)\n                        handleChange(id, value)\n                    }\n                }}\n                label={label}>\n                {Object.entries(options).map(([key, value]) => (\n                    <MenuItem {...{key}} value={key}>\n                        {value}\n                    </MenuItem>\n                ))}\n            </Select>\n        </FormControl>\n    )\n}\n","import {makeStyles, Slider, Typography} from \"@material-ui/core\"\nimport React, {useEffect, useMemo} from \"react\"\nimport {getNested} from \"../../services/utils\"\nimport {SliderFormItem} from \"./form\"\n\nconst useStyles = makeStyles({\n    root: {\n        flex: 1,\n    },\n})\n\nconst valuetext = (value: number, ending: string) => `${value} ${ending}`\n\nexport type FormSliderItemProps = SliderFormItem & {\n    form: any\n    handleChange: (id: string, value: number) => void\n}\nexport const FormSliderItem = ({\n    defaultValue = 0,\n    ending = \"\",\n    form,\n    handleChange,\n    id,\n    label,\n    max,\n    min,\n    step,\n}: FormSliderItemProps) => {\n    const classes = useStyles()\n    useEffect(() => {\n        handleChange(id, defaultValue)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n    const value = useMemo(() => getNested(form, id), [form, id])\n\n    return (\n        <div className={classes.root}>\n            <Typography id=\"discrete-slider\" gutterBottom>\n                {`${label} (${value})`}\n            </Typography>\n            <Slider\n                id={id}\n                onChange={(_, value) => {\n                    if (typeof value === \"number\") {\n                        handleChange(id, value)\n                    }\n                }}\n                defaultValue={defaultValue}\n                getAriaValueText={(value) => valuetext(value, ending)}\n                aria-labelledby=\"discrete-slider-always\"\n                step={step}\n                valueLabelDisplay=\"auto\"\n                min={min}\n                max={max}\n            />\n        </div>\n    )\n}\n","import {FormControl, InputLabel, OutlinedInput} from \"@material-ui/core\"\nimport HelpIcon from \"@material-ui/icons/Help\"\nimport React, {useEffect, useState} from \"react\"\nimport {TooltipComponent} from \"../tooltip\"\nimport {TextFormItem} from \"./form\"\n\nexport type FormTextItemProps = TextFormItem & {\n    handleChange: (id: string, value: string) => void\n}\nexport const FormTextItem = ({\n    autoComplete,\n    defaultValue,\n    handleChange,\n    hint,\n    id,\n    label,\n    multiline,\n    required,\n    textType,\n}: FormTextItemProps) => {\n    const [textValue, changeTextValue] = useState<string>(defaultValue || \"\")\n\n    useEffect(() => {\n        handleChange(id, defaultValue)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return (\n        <div style={{display: \"flex\"}}>\n            <FormControl fullWidth variant=\"outlined\">\n                <InputLabel htmlFor={id}>{label}</InputLabel>\n                <OutlinedInput\n                    fullWidth\n                    multiline={!!multiline}\n                    rows={multiline ? 5 : undefined}\n                    type={textType}\n                    required={required}\n                    value={textValue}\n                    onChange={({target: {name, value}}) => {\n                        changeTextValue(value)\n                        handleChange(name, value)\n                    }}\n                    id={id}\n                    name={id}\n                    label={label}\n                    autoComplete={autoComplete}\n                    endAdornment={\n                        hint ? (\n                            <TooltipComponent hint={hint} icon={<HelpIcon />} />\n                        ) : undefined\n                    }\n                />\n            </FormControl>\n        </div>\n    )\n}\n","import {unreachable} from \"@dynamo/common\"\nimport React from \"react\"\nimport {FormFileUploadItem} from \"./file-upload\"\nimport {FormItem} from \"./form\"\nimport {FormLocationItem} from \"./location\"\nimport {FormSelectItem} from \"./select\"\nimport {FormSliderItem} from \"./slider\"\nimport {FormTextItem} from \"./text\"\n\nexport type FormItemResolverComponentProps = FormItem & {\n    form: unknown\n    handleChange: (id: string, value: unknown) => void\n}\nexport const FormItemResolverComponent: React.FC<FormItemResolverComponentProps> = (\n    formItem,\n) => {\n    let element: JSX.Element\n    switch (formItem.type) {\n        case \"text\":\n            element = <FormTextItem {...formItem} />\n            break\n        case \"select\":\n            element = <FormSelectItem {...formItem} />\n            break\n        case \"slider\":\n            element = <FormSliderItem {...formItem} />\n            break\n        case \"location\":\n            element = <FormLocationItem {...formItem} />\n            break\n        case \"file-upload\":\n            element = <FormFileUploadItem {...formItem} />\n            break\n        case \"custom\":\n            element = formItem.render(formItem)\n            break\n        default:\n            unreachable(\"impossible case\")\n    }\n\n    return <div>{element}</div>\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport {Button, Grid, makeStyles} from \"@material-ui/core\"\nimport React, {useCallback} from \"react\"\nimport {IPreviewProps} from \"react-dropzone-uploader\"\nimport {useForm} from \"../../hooks/useForm\"\nimport {FormItemResolverComponent} from \"./resolver\"\n\nexport type ReactComponent<Props> = (\n    props: Props,\n) => React.ReactNode | React.Component<Props>\n\nexport interface FormItemBase {\n    alignment: {sm?: 12 | 6; xs?: 12 | 6}\n    autoComplete?: string\n    defaultValue?: any\n    hint?: string\n    id: string\n    label: string\n    multiline?: boolean\n    required?: boolean\n}\n\nexport interface TextFormItem extends FormItemBase {\n    textType?: string\n    type: \"text\"\n}\n\nexport interface LocationFormItem extends FormItemBase {\n    freeSolo?: boolean\n    locationIds?: {\n        latitude: string\n        longitude: string\n    }\n    textType?: string\n    type: \"location\"\n}\n\nexport interface SliderFormItem extends FormItemBase {\n    ending?: string\n    max: number\n    min: number\n    step: number\n    type: \"slider\"\n}\n\nexport interface SelectFormItem extends FormItemBase {\n    disabled?: boolean\n    options: {[value: string]: string}\n    type: \"select\"\n}\n\nexport interface FileUploadFormItem extends FormItemBase {\n    PreviewComponent?: ReactComponent<\n        IPreviewProps & {\n            handleChange: (value: File[] | File | undefined) => void\n            id: string\n        }\n    >\n    accept?: string\n    icon?: JSX.Element\n    multiple?: boolean\n    type: \"file-upload\"\n}\n\nexport interface CustomFormItem extends FormItemBase {\n    render: (props: FormItemBase) => JSX.Element\n    type: \"custom\"\n}\n\nexport type FormItem =\n    | TextFormItem\n    | SelectFormItem\n    | SliderFormItem\n    | LocationFormItem\n    | FileUploadFormItem\n    | CustomFormItem\n\nconst useStyles = makeStyles((theme) => ({\n    form: {\n        marginTop: theme.spacing(3), // Fix IE 11 issue.\n        width: \"100%\",\n    },\n    spacing: {\n        marginTop: 30,\n    },\n}))\n\nexport interface FormComponentProps<T> {\n    children?: JSX.Element | JSX.Element[]\n    formItems: FormItem[]\n    initialForm?: Partial<T>\n    onSubmit: (form: T) => void\n    onUpdate?: (id: string, value: any) => void\n    submitButtonTitle: string\n}\nexport function FormComponent<T>({\n    children,\n    formItems,\n    initialForm,\n    onSubmit,\n    onUpdate,\n    submitButtonTitle,\n}: FormComponentProps<T>) {\n    const classes = useStyles()\n    const {form, updateForm} = useForm<T>(initialForm)\n\n    const update = useCallback(\n        (id: string, value: any) => {\n            updateForm(id, value)\n            if (onUpdate) {\n                onUpdate(id, value)\n            }\n        },\n        [updateForm, onUpdate],\n    )\n\n    return (\n        <form\n            className={classes.form}\n            onSubmit={(event) => {\n                event.preventDefault()\n                onSubmit(form as T)\n            }}>\n            <Grid container spacing={2}>\n                {formItems.map((formItem) => {\n                    const {sm, xs} = formItem.alignment\n                    return (\n                        <Grid item xs={xs} sm={sm} key={formItem.id}>\n                            <FormItemResolverComponent\n                                handleChange={update}\n                                {...{form}}\n                                {...formItem}\n                            />\n                        </Grid>\n                    )\n                })}\n            </Grid>\n            {children}\n            <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.spacing}>\n                {submitButtonTitle}\n            </Button>\n        </form>\n    )\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport {useState} from \"react\"\nimport {setNested} from \"../services/utils\"\n\nexport const useForm = <\n    T extends {\n        [key: string]: any\n    }\n>(\n    initial: Partial<T> | undefined = {},\n) => {\n    const [form, changeForm] = useState<Partial<T>>(initial)\n\n    const updateForm = (path: string, value: any) => {\n        changeForm((old) => {\n            const newV: Partial<T> = setNested(old, path, value) as any\n            return newV\n        })\n    }\n    return {form, updateForm}\n}\n","import React, {useCallback, useMemo} from \"react\"\nimport {FormComponent, FormItem} from \"../components/form/form\"\nimport {\n    MutationSendInvitationArgs,\n    User,\n    useSendInvitationMutation,\n} from \"../graphql/schema.generated\"\nimport {useSnack} from \"../hooks\"\n\nexport interface InvitePageViewProps {\n    onSubmit: (args: MutationSendInvitationArgs) => void\n    user: User\n}\nexport const InvitePageView: React.FC<InvitePageViewProps> = ({\n    onSubmit,\n    user,\n}) => {\n    const formItems = useMemo(\n        () =>\n            [\n                {\n                    alignment: {xs: 12},\n                    defaultValue: user.type,\n                    disabled: user.type !== \"Submitter\",\n                    id: \".type\",\n                    label: \"User Type\",\n                    options: {\n                        Submitter: \"Medical\",\n                        Volunteer: \"Maker\",\n                    },\n                    required: true,\n                    type: \"select\",\n                },\n\n                {\n                    alignment: {xs: 12},\n                    autoComplete: \"email\",\n                    id: \".email\",\n                    label: \"Email\",\n                    required: true,\n                    textType: \"email\",\n                    type: \"text\",\n                },\n            ] as FormItem[],\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [],\n    )\n\n    return (\n        <FormComponent\n            submitButtonTitle=\"Invite\"\n            formItems={formItems}\n            onSubmit={onSubmit}\n        />\n    )\n}\n\nexport interface InvitePageProps {\n    closeModal: () => void\n    user: User\n}\nexport const InvitePage: React.FC<InvitePageProps> = ({closeModal, user}) => {\n    const {updateSnack} = useSnack()\n    const [mutate] = useSendInvitationMutation({\n        onCompleted: (data) => {\n            if (data.sendInvitation) {\n                updateSnack({\n                    message: \"successfully sent invitation\",\n                    severity: \"success\",\n                })\n                closeModal()\n            }\n        },\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n    })\n\n    const onSubmit = useCallback(\n        (args: MutationSendInvitationArgs) => mutate({variables: args}),\n        [mutate],\n    )\n\n    return <InvitePageView user={user} onSubmit={onSubmit} />\n}\n","/* eslint-disable no-restricted-globals */\n\nimport {assert} from \"@dynamo/common\"\nimport {\n    Button,\n    Card,\n    CardContent,\n    createStyles,\n    FormControl,\n    InputLabel,\n    Link,\n    makeStyles,\n    MenuItem,\n    Select,\n    Theme,\n    Typography,\n} from \"@material-ui/core\"\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\"\nimport AssignmentIcon from \"@material-ui/icons/Assignment\"\nimport DeleteIcon from \"@material-ui/icons/Delete\"\nimport DoneAllIcon from \"@material-ui/icons/DoneAll\"\nimport HourglassEmptyIcon from \"@material-ui/icons/HourglassEmpty\"\nimport * as React from \"react\"\nimport {useCallback, useState} from \"react\"\nimport {FileItemPreview} from \"../components/file-item-preview\"\nimport {InfoListComponent, InfoListItem} from \"../components/info-list\"\nimport {PageComponent, RolePage} from \"../components/page\"\nimport {CustomizedSteppers, StepperStep} from \"../components/stepper\"\nimport {WrongPageComponent} from \"../components/wrong-page\"\nimport {\n    Job,\n    JobProgress,\n    useCancelJobMutation,\n    useJobQuery,\n    UserType,\n    useUpdateJobProgressMutation,\n} from \"../graphql/schema.generated\"\nimport {useDateFromNow, useQuery, useSnack} from \"../hooks\"\nimport {getRenderType, goTo} from \"../services/utils\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        button: {\n            margin: theme.spacing(1),\n        },\n\n        jobPageView: {\n            maxWidth: 1200,\n            minWidth: 500,\n            width: \"50vw\",\n        },\n\n        viewOriginalSubmissionButton: {marginBottom: 35},\n    }),\n)\n\nconst shippingProviders = [\"UPS\", \"USPS\", \"Fedex\", \"Other\"] as const\ntype ShippingType = typeof shippingProviders[number]\n\nenum ProgressStep {\n    Assigned = 0,\n    PrintStarted = 1,\n    PrintComplete = 2,\n    Shipped = 3,\n    Received = 4,\n}\nconst jobStepperSteps: StepperStep[] = [\n    {icon: <AssignmentIcon />, label: \"Assigned\"},\n    {icon: <HourglassEmptyIcon />, label: \"Print Started\"},\n    {icon: <HourglassEmptyIcon />, label: \"Print Complete\"},\n    {icon: <HourglassEmptyIcon />, label: \"Shipped\"},\n    {icon: <DoneAllIcon />, label: \"Received\"},\n]\n\nexport interface PrintProps {\n    onClickPrint?: () => void\n    updateTrackingNumber: (trackingNumber?: string) => void\n}\nexport const PrintCompleteView: React.FC<PrintProps> = ({\n    onClickPrint = print,\n    updateTrackingNumber,\n}) => {\n    const [shippingProvider, changeShippingProvider] = useState<ShippingType>(\n        \"UPS\",\n    )\n\n    return (\n        <div>\n            <Link {...{onClick: onClickPrint}}>\n                <Typography\n                    style={{\n                        alignSelf: \"center\",\n                        marginBottom: 10,\n                    }}\n                    variant=\"subtitle1\">\n                    Print this page and send in package\n                </Typography>\n            </Link>\n\n            <FormControl variant=\"outlined\">\n                <InputLabel id=\"shipping-select-label\">Type</InputLabel>\n                <Select\n                    labelId=\"shipping-select-label\"\n                    label=\"Type\"\n                    id=\"shipping-select\"\n                    value={shippingProvider}\n                    onChange={({target: {value}}) => {\n                        if (typeof value === \"string\") {\n                            changeShippingProvider(value as ShippingType)\n                        }\n                    }}>\n                    {shippingProviders.map((shippingProvider, i) => {\n                        return (\n                            // eslint-disable-next-line react/no-array-index-key\n                            <MenuItem key={i} value={shippingProvider}>\n                                {shippingProvider}\n                            </MenuItem>\n                        )\n                    })}\n                </Select>\n            </FormControl>\n\n            <FormControl style={{marginLeft: 10}} variant=\"outlined\">\n                <InputLabel htmlFor=\"tracking-number\">\n                    Tracking Number\n                </InputLabel>\n                <OutlinedInput\n                    label=\"Tracking Number\"\n                    id=\"tracking-number\"\n                    onChange={({target: {value}}) => {\n                        updateTrackingNumber(\n                            value\n                                ? `${shippingProvider}-${value.trim()}`\n                                : undefined,\n                        )\n                    }}\n                />\n            </FormControl>\n        </div>\n    )\n}\n\nexport interface JobStatusPageProps extends JobPageViewProps {}\nexport const JobPageStatus: React.FC<JobStatusPageProps> = ({\n    cancelJob,\n    job: {id, progress},\n    showActionButtons,\n    updateJobProgress,\n}) => {\n    const classes = useStyles()\n    const {updateSnack} = useSnack()\n    const [trackingNumber, changeTrackingNumber] = useState<string>()\n    const {done, step} = {\n        done: progress === \"Shipped\" || progress === \"Received\",\n        step: ProgressStep[progress],\n    }\n    const nextStep = step + 1\n\n    return (\n        <div>\n            <CustomizedSteppers currentStep={step} steps={jobStepperSteps} />\n            <div>\n                {progress === \"PrintComplete\" && (\n                    <PrintCompleteView\n                        updateTrackingNumber={changeTrackingNumber}\n                    />\n                )}\n\n                {!done && showActionButtons && (\n                    <div>\n                        <Button\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            onClick={() => {\n                                cancelJob(id)\n                            }}\n                            className={classes.button}\n                            startIcon={<DeleteIcon />}>\n                            Cancel Job\n                        </Button>\n\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            disabled={done}\n                            onClick={() => {\n                                if (\n                                    progress === \"PrintComplete\" &&\n                                    !trackingNumber\n                                ) {\n                                    updateSnack({\n                                        message:\n                                            \"Tracking number is required. For other shipping options please pick other and explain\",\n                                    })\n                                } else {\n                                    updateJobProgress({\n                                        id,\n                                        progress: String(\n                                            ProgressStep[nextStep],\n                                        ) as JobProgress,\n                                        trackingNumber,\n                                    })\n                                }\n                            }}\n                            className={classes.button}\n                            endIcon={jobStepperSteps[nextStep].icon}>\n                            {jobStepperSteps[nextStep].label}\n                        </Button>\n                    </div>\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport interface JobPageListProps extends JobPageViewProps {}\nexport const JobPageList: React.FC<JobPageListProps> = ({\n    job: {\n        createdAt,\n        description,\n        id,\n        quantity,\n        submission: {address, submitter},\n        trackingNumber,\n        type,\n        volunteer,\n    },\n}) => {\n    const date = useDateFromNow(createdAt)\n    return (\n        <InfoListComponent\n            items={\n                [\n                    {\n                        action: {type: \"copy\"},\n                        description: id,\n                        name: \"Id\",\n                    },\n                    {\n                        action: {type: \"copy\"},\n                        description: quantity,\n                        name: \"Quantity\",\n                    },\n                    {\n                        action: {type: \"copy\"},\n                        description: date,\n                        name: \"Created\",\n                    },\n                    {\n                        action: {type: \"copy\"},\n                        description: description ?? \"N/A\",\n                        name: \"Description\",\n                    },\n                    {\n                        action: {type: \"copy\", value: submitter.email},\n                        description: `${submitter.firstName} ${submitter.lastName} <${submitter.email}>`,\n                        name: \"Submitter\",\n                    },\n                    {\n                        action: {type: \"copy\", value: volunteer},\n                        description: volunteer\n                            ? `${volunteer.firstName} ${volunteer.lastName} <${volunteer.email}>`\n                            : \"Not Assigned Yet\",\n                        name: \"Assignee\",\n                    },\n                    {\n                        action: {type: \"copy\"},\n                        description: address,\n                        name: \"Shipping Address\",\n                    },\n                    {\n                        action: {type: \"copy\"},\n                        description: trackingNumber || \"N/A\",\n                        name: \"Tracking Number\",\n                    },\n                    {\n                        action: {type: \"copy\"},\n                        description:\n                            type === \"LaserCutting\" ? \"Laser Cut\" : \"3D Print\",\n                        name: \"Job Type\",\n                    },\n                ] as InfoListItem[]\n            }\n        />\n    )\n}\n\nexport interface JobPageViewProps {\n    cancelJob: (id: string) => void\n    job: Job\n    showActionButtons: boolean\n    updateJobProgress: (args: {\n        id: string\n        progress: JobProgress\n        trackingNumber?: string | undefined\n    }) => void\n}\nexport const JobPageView: React.FC<JobPageViewProps> = (props) => {\n    const {\n        job: {createdAt, files, name, submission, type},\n    } = props\n    const date = useDateFromNow(createdAt)\n    const classes = useStyles()\n\n    const onSubmissionClick = useCallback(\n        () => goTo(`/submission/?id=${submission.id}`),\n        [submission.id],\n    )\n\n    const renderType = getRenderType(type)\n\n    return (\n        <div className={classes.jobPageView}>\n            <Card>\n                <CardContent style={{textAlign: \"center\"}}>\n                    <Typography component=\"h5\" variant=\"h5\">\n                        {name}\n                    </Typography>\n                    <Typography color=\"textSecondary\" variant=\"h6\">\n                        {date}\n                    </Typography>\n                    <Button\n                        style={{marginTop: 10}}\n                        className={classes.viewOriginalSubmissionButton}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={onSubmissionClick}>\n                        View Original Submission\n                    </Button>\n                    <FileItemPreview\n                        items={files.map((file) => {\n                            return {file, type: renderType}\n                        })}\n                    />\n\n                    <JobPageList {...props} />\n\n                    <JobPageStatus {...props} />\n                </CardContent>\n            </Card>\n        </div>\n    )\n}\n\nexport interface JobPageProps {}\nexport const JobPage: React.FC<JobPageProps> = () => {\n    const {updateSnack} = useSnack()\n    const id = useQuery().get(\"id\")\n\n    assert(id, \"Invalid job ID!\")\n\n    const {data} = useJobQuery({\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n        variables: {id},\n    })\n\n    const [cancelJobMutation] = useCancelJobMutation({\n        onCompleted: (cancelResponse) => {\n            if (cancelResponse.cancelJob) {\n                goTo(\"/\")\n            }\n        },\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n    })\n\n    const [updateJobProgressMutation] = useUpdateJobProgressMutation({\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n    })\n\n    const cancelJob = useCallback(\n        (id: string) => {\n            cancelJobMutation({variables: {id}})\n        },\n        [cancelJobMutation],\n    )\n\n    const updateJobProgress = useCallback(\n        (args: {\n            id: string\n            progress: JobProgress\n            trackingNumber?: string\n        }) => {\n            updateJobProgressMutation({variables: args})\n        },\n        [updateJobProgressMutation],\n    )\n\n    const jopPage = useCallback(\n        (userType: UserType, showActionButtons: boolean): RolePage => {\n            return {\n                component: (user) => (\n                    <div style={{display: \"flex\", justifyContent: \"center\"}}>\n                        {data?.job && (\n                            <JobPageView\n                                job={data.job}\n                                {...{\n                                    cancelJob,\n                                    showActionButtons,\n                                    updateJobProgress,\n                                    user,\n                                }}\n                            />\n                        )}\n                    </div>\n                ),\n                role: userType,\n            }\n        },\n        [cancelJob, data, updateJobProgress],\n    )\n\n    return (\n        <PageComponent\n            disableHide={false}\n            showFooter\n            title=\"Job\"\n            rolePages={[\n                jopPage(\"Submitter\", false),\n                jopPage(\"Volunteer\", true),\n            ]}>\n            <WrongPageComponent text=\"Must be signed in to view Job\" />\n        </PageComponent>\n    )\n}\n","import {\n    Button,\n    ButtonProps,\n    createStyles,\n    Fade,\n    makeStyles,\n} from \"@material-ui/core\"\nimport AppBar from \"@material-ui/core/AppBar\"\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\nimport Link from \"@material-ui/core/Link\"\nimport Toolbar from \"@material-ui/core/Toolbar\"\nimport useScrollTrigger from \"@material-ui/core/useScrollTrigger\"\nimport React, {useEffect, useState} from \"react\"\nimport {theme} from \"./theme\"\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        link: {\n            textDecoration: \"none\",\n        },\n        sidebarButtons: {\n            display: \"flex\",\n            justifyContent: \"flex-start\",\n        },\n    }),\n)\n\nexport interface SideBarButton {\n    path: string\n    props?: ButtonProps\n    title: string\n    type: \"bar-button\"\n}\n\nlet previousScroll = 0\n\nexport interface HideAppBarProps {\n    buttons: ((SideBarButton | {element: JSX.Element; type: \"element\"}) & {\n        key: string\n    })[]\n    disableHide: boolean\n    homeButton: SideBarButton\n    inverted: boolean\n    window?: () => Window\n}\n\ninterface HideOnScorllProps extends HideAppBarProps {\n    throttleInverted: (inverted: boolean) => void\n}\nconst HideOnScroll: React.FC<\n    HideOnScorllProps & {\n        children: React.ReactElement | undefined\n    }\n> = ({children, throttleInverted, window: window_prop}) => {\n    // Note that you normally won't need to set the window ref as useScrollTrigger\n    // will default to window.\n    // This is only being set here because the demo is in an iframe.\n\n    const threshold = 50\n    const trigger = useScrollTrigger({\n        target: window_prop ? window_prop() : undefined,\n        threshold,\n    })\n    useEffect(() => {\n        window.addEventListener(\"scroll\", () => {\n            if (window.scrollY <= 0) {\n                throttleInverted(false)\n            } else if (\n                window.scrollY < previousScroll &&\n                !trigger &&\n                window.scrollY > threshold\n            ) {\n                throttleInverted(true)\n            }\n            previousScroll = window.scrollY\n        })\n    }, [throttleInverted, trigger])\n\n    return <Fade in={!trigger}>{children}</Fade>\n}\n\nexport const HideAppBar: React.FC<HideAppBarProps> = (props) => {\n    const {\n        buttons,\n        children,\n        disableHide,\n        homeButton,\n        inverted: invertedInitial,\n    } = props\n\n    const classes = useStyles()\n    const [inverted, changeInverted] = useState(invertedInitial)\n    const buttonStyle = {\n        color: inverted ? \"white\" : theme.palette.primary.main,\n        fontFamily: theme.typography.fontFamily,\n        fontSize: 15,\n        textTransform: \"none\" as \"none\",\n    }\n\n    const appBar = (\n        <AppBar\n            elevation={0}\n            style={{\n                background: inverted ? theme.palette.primary.main : \"white\",\n            }}>\n            <Toolbar className={classes.sidebarButtons}>\n                <div style={{flexGrow: 1}}>\n                    <Link href={homeButton.path}>\n                        <Button style={buttonStyle} color=\"inherit\">\n                            {homeButton.title}\n                        </Button>\n                    </Link>\n                </div>\n                <div>\n                    {buttons.map(({key, ...button}) => {\n                        if (button.type === \"element\") {\n                            return <Link {...{key}}>{button.element}</Link>\n                        }\n                        const {path, props, title} = button\n                        return (\n                            <Link {...{key}} href={path}>\n                                <Button\n                                    style={buttonStyle}\n                                    color=\"inherit\"\n                                    {...props}>\n                                    {title}\n                                </Button>\n                            </Link>\n                        )\n                    })}\n                </div>\n            </Toolbar>\n        </AppBar>\n    )\n\n    return (\n        <>\n            <CssBaseline />\n            {disableHide ? (\n                <div>{appBar}</div>\n            ) : (\n                <HideOnScroll throttleInverted={changeInverted} {...props}>\n                    {appBar}\n                </HideOnScroll>\n            )}\n\n            <Toolbar />\n            {children}\n        </>\n    )\n}\n","import {Button} from \"@material-ui/core\"\nimport Menu from \"@material-ui/core/Menu\"\nimport MenuItem from \"@material-ui/core/MenuItem\"\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\"\nimport React from \"react\"\nimport {goTo} from \"../services/utils\"\n\nconst ITEM_HEIGHT = 48\n\nexport interface MenuComponentProps {\n    icon: JSX.Element\n    name: string\n    options: {key: string; name: string; url: string}[]\n}\nexport const MenuComponent: React.FC<MenuComponentProps> = ({\n    icon,\n    name,\n    options,\n}) => {\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null)\n    const open = Boolean(anchorEl)\n\n    const handleClick = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n        setAnchorEl(event.currentTarget)\n    }\n\n    const handleClose = (url?: string) => {\n        setAnchorEl(null)\n        if (url) {\n            goTo(url)\n        }\n    }\n\n    return (\n        <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={(event) => {\n                if (!open) handleClick(event)\n            }}\n            endIcon={<KeyboardArrowDownIcon />}\n            startIcon={icon}>\n            {name}\n\n            <Menu\n                id=\"long-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={open}\n                onClose={() => {\n                    handleClose()\n                }}\n                PaperProps={{\n                    style: {\n                        maxHeight: ITEM_HEIGHT * 4.5,\n                        width: \"20ch\",\n                    },\n                }}>\n                {options.map(({key, name, url}) => (\n                    <MenuItem onClick={() => handleClose(url)} {...{key}}>\n                        {name}\n                    </MenuItem>\n                ))}\n            </Menu>\n        </Button>\n    )\n}\n","import {\n    Button,\n    ButtonProps,\n    Card,\n    CardContent,\n    IconButton,\n    Typography,\n} from \"@material-ui/core\"\nimport Backdrop from \"@material-ui/core/Backdrop\"\nimport Fade from \"@material-ui/core/Fade\"\nimport Modal from \"@material-ui/core/Modal\"\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\"\nimport CloseIcon from \"@material-ui/icons/Close\"\nimport React, {useCallback, useMemo, useState} from \"react\"\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        card: {\n            alignItems: \"column\",\n            display: \"flex\",\n            textDecoration: \"none\",\n        },\n\n        children: {\n            width: \"38vw\",\n        },\n\n        content: {\n            flex: \"1 0 auto\",\n        },\n        details: {\n            display: \"flex\",\n            flexDirection: \"column\",\n        },\n\n        modal: {\n            alignItems: \"center\",\n            display: \"flex\",\n            justifyContent: \"center\",\n        },\n\n        title: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            height: 25,\n        },\n\n        titleButton: {\n            flex: 0.01,\n            marginBottom: 20,\n        },\n        titleText: {\n            flex: 0.99,\n            marginTop: 8,\n        },\n    }),\n)\n\nexport interface ModalContentProps {\n    closeModal: () => void\n}\n\nexport interface ModalComponentProps {\n    buttonProps?: ButtonProps\n    children:\n        | ((props: ModalContentProps) => JSX.Element | undefined | null)\n        | JSX.Element\n    modalOpen?: boolean\n    title?: string\n}\nexport const ModalComponent: React.FC<ModalComponentProps> = ({\n    children,\n    modalOpen = false,\n    title = \"\",\n    buttonProps = {},\n}) => {\n    const classes = useStyles()\n    const [open, setOpen] = useState(modalOpen)\n\n    const handleOpen = useCallback(() => {\n        if (!open) {\n            setOpen(true)\n        }\n    }, [open, setOpen])\n\n    const handleClose = useCallback(() => {\n        setOpen(false)\n    }, [setOpen])\n\n    const renderedContent = useMemo(\n        () =>\n            typeof children === \"function\"\n                ? children({closeModal: handleClose})\n                : children,\n        [children, handleClose],\n    )\n\n    return (\n        <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleOpen}\n            {...buttonProps}>\n            {title}\n\n            <Modal\n                disableBackdropClick={false}\n                aria-labelledby=\"transition-modal-title\"\n                aria-describedby=\"transition-modal-description\"\n                className={classes.modal}\n                open={open}\n                onClose={handleClose}\n                closeAfterTransition\n                BackdropComponent={Backdrop}\n                BackdropProps={{\n                    timeout: 500,\n                }}>\n                <div>\n                    <Fade in={open}>\n                        <Card className={classes.card}>\n                            <div className={classes.details}>\n                                <CardContent className={classes.content}>\n                                    <div className={classes.title}>\n                                        <Typography\n                                            className={classes.titleText}\n                                            gutterBottom\n                                            variant=\"h5\"\n                                            component=\"h2\">\n                                            {title}\n                                        </Typography>\n\n                                        <IconButton\n                                            onClick={handleClose}\n                                            className={classes.titleButton}\n                                            aria-label=\"close\">\n                                            <CloseIcon />\n                                        </IconButton>\n                                    </div>\n                                    <div className={classes.children}>\n                                        {renderedContent ?? <div />}\n                                    </div>\n                                </CardContent>\n                            </div>\n                        </Card>\n                    </Fade>\n                </div>\n            </Modal>\n        </Button>\n    )\n}\n","import {ButtonProps, Fade, makeStyles, Typography} from \"@material-ui/core\"\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\"\nimport LockIcon from \"@material-ui/icons/Lock\"\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\"\nimport React, {useEffect, useState} from \"react\"\nimport {NotifyMessage} from \"../client\"\nimport {useMeQuery, User, UserType} from \"../graphql/schema.generated\"\nimport {InvitePage} from \"../pages/invite\"\nimport {goTo} from \"../services/utils\"\nimport {HideAppBar, SideBarButton} from \"./hide-app-bar\"\nimport {MenuComponent} from \"./menu\"\nimport {ModalComponent} from \"./modal\"\nimport {SnackBarComponent} from \"./snackbar\"\n\nexport interface RolePage {\n    component?: (user: User) => React.ReactNode\n    redirect?: string\n    role: UserType\n    title?: string\n}\n\nconst useStyles = makeStyles(() => ({\n    container: {\n        display: \"flex\",\n        flexDirection: \"column\",\n    },\n    footer: {\n        marginTop: \"7vh\",\n        textAlign: \"center\",\n    },\n}))\n\nexport interface PageComponentProps {\n    disableHide?: boolean\n    rolePages?: RolePage[]\n    roleRedirect?: string\n    showFooter?: boolean\n    title: string\n}\nexport const PageComponent: React.FunctionComponent<PageComponentProps> = ({\n    children,\n    disableHide = true,\n    rolePages,\n    roleRedirect,\n    showFooter = false,\n    title,\n}) => {\n    const classes = useStyles()\n    const [snack, updateSnack] = useState<NotifyMessage>()\n\n    useEffect(() => {\n        document.title = `Op Dynamo | ${title}`\n    }, [title])\n\n    const [component, changeComponent] = useState<React.ReactNode>()\n    const {data: meData, error: meError, loading} = useMeQuery()\n\n    const alwaysButtons = [\n        {\n            key: \"loggedOutLegal\",\n            path: \"/legal\",\n            title: \"Legal\",\n            type: \"bar-button\",\n        },\n        {\n            key: \"loggedOutAbout\",\n            path: \"/about\",\n            title: \"About\",\n            type: \"bar-button\",\n        },\n        {\n            key: \"loggedOutContact\",\n            path: \"/contact\",\n            title: \"Contact\",\n            type: \"bar-button\",\n        },\n        {key: \"loggedOutFAQ\", path: \"/faq\", title: \"FAQ\"},\n    ]\n\n    useEffect(() => {\n        if (!meError && rolePages && meData?.me?.user) {\n            const userType = meData.me.user.type\n            const rolePage = rolePages.find((rolePage) => {\n                return rolePage.role === userType\n            })\n            if (!rolePage) {\n                if (roleRedirect) {\n                    goTo(roleRedirect)\n                }\n            } else {\n                if (rolePage.component) {\n                    changeComponent(rolePage.component(meData.me.user))\n                }\n                if (rolePage.redirect) {\n                    goTo(rolePage.redirect)\n                }\n            }\n        } else if (!loading) {\n            changeComponent(children)\n        }\n    }, [rolePages, meData, meError, roleRedirect, children, loading])\n\n    return (\n        <div>\n            <HideAppBar\n                disableHide={disableHide}\n                inverted={false}\n                homeButton={{\n                    path: \"/\",\n                    title: \"Operation Dynamo\",\n                    type: \"bar-button\",\n                }}\n                buttons={\n                    [\n                        ...alwaysButtons,\n                        ...(meData?.me?.user\n                            ? [\n                                  {\n                                      element: (\n                                          <ModalComponent\n                                              title=\"Invite\"\n                                              buttonProps={{\n                                                  startIcon: <PersonAddIcon />,\n                                                  style: {marginRight: 10},\n                                              }}>\n                                              {({closeModal}) =>\n                                                  meData?.me?.user && (\n                                                      <InvitePage\n                                                          user={\n                                                              meData?.me?.user\n                                                          }\n                                                          closeModal={\n                                                              closeModal\n                                                          }\n                                                      />\n                                                  )\n                                              }\n                                          </ModalComponent>\n                                      ),\n                                      key: \"invite\",\n                                      type: \"element\",\n                                  },\n\n                                  {\n                                      element: (\n                                          <MenuComponent\n                                              name={`${meData.me.user.firstName} ${meData.me.user.lastName}`}\n                                              icon={<AccountCircleIcon />}\n                                              options={[\n                                                  {\n                                                      key: \"update\",\n                                                      name: \"Update Account\",\n                                                      url: \"/account/update\",\n                                                  },\n                                                  {\n                                                      key: \"logout\",\n                                                      name: \"Logout\",\n                                                      url: \"/account/logout\",\n                                                  },\n                                              ]}\n                                          />\n                                      ),\n                                      key: \"loggedIn\",\n                                      type: \"element\",\n                                  },\n                              ]\n                            : [\n                                  {\n                                      key: \"loggedOutLogin\",\n                                      path: \"/account/login\",\n                                      props: {\n                                          color: \"primary\",\n                                          startIcon: <LockIcon />,\n                                          style: {\n                                              color: \"white\",\n                                              height: 35,\n                                              marginLeft: 10,\n                                          },\n                                          variant: \"contained\",\n                                      } as ButtonProps,\n                                      title: \"Login\",\n                                      type: \"bar-button\",\n                                  },\n                              ]),\n                    ] as ((SideBarButton & {\n                        element: JSX.Element\n                        type: \"element\"\n                    }) & {key: string})[]\n                }>\n                <div style={{marginTop: 40}}>{component}</div>\n            </HideAppBar>\n            <footer className={classes.footer}>\n                {showFooter ? (\n                    <Fade timeout={1000} in={showFooter}>\n                        <Typography variant=\"caption\" component=\"h3\">\n                            © Operation Dynamo A Creation of Conva LLC. All\n                            Rights Reserved\n                        </Typography>\n                    </Fade>\n                ) : null}\n            </footer>\n            <SnackBarComponent state={[snack, updateSnack]} />\n        </div>\n    )\n}\n","import {Grow, makeStyles, Paper} from \"@material-ui/core\"\nimport * as React from \"react\"\nimport {useEffect, useState} from \"react\"\nimport ReactMarkdown from \"react-markdown/with-html\"\n\nconst useStyles = makeStyles(() => ({\n    container: {\n        display: \"flex\",\n        justifyContent: \"center\",\n    },\n\n    paper: {\n        marginTop: \"1vh\",\n        maxWidth: 800,\n        width: \"90vw\",\n    },\n}))\n\nexport interface MarkdownComponentProps {\n    onFinish?: () => void\n    url: string\n    variableMaps?: {from: string | RegExp; to: string}[]\n}\nexport const MarkdownComponent: React.FC<MarkdownComponentProps> = ({\n    url: fileName,\n    onFinish,\n    variableMaps = [],\n}) => {\n    const classes = useStyles()\n\n    const [content, changeContent] = useState<string>()\n\n    useEffect(() => {\n        ;(async () => {\n            changeContent(\n                variableMaps.reduce(\n                    (acc, {from, to}) => acc.replace(from, to),\n                    await (await fetch(`/assets/docs/${fileName}`)).text(),\n                ),\n            )\n        })()\n    }, [fileName, variableMaps])\n\n    return (\n        <div className={classes.container}>\n            <Grow onEntered={onFinish} timeout={1000} in>\n                <Paper className={classes.paper}>\n                    <div style={{padding: 25}}>\n                        {content ? (\n                            <ReactMarkdown\n                                escapeHtml={false}\n                                source={content}\n                            />\n                        ) : null}\n                    </div>\n                </Paper>\n            </Grow>\n        </div>\n    )\n}\n","import Button from \"@material-ui/core/Button\"\nimport Card from \"@material-ui/core/Card\"\nimport CardContent from \"@material-ui/core/CardContent\"\nimport Container from \"@material-ui/core/Container\"\nimport Grid from \"@material-ui/core/Grid\"\nimport {makeStyles} from \"@material-ui/core/styles\"\nimport Typography from \"@material-ui/core/Typography\"\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\"\nimport InsertCommentIcon from \"@material-ui/icons/InsertComment\"\nimport LockIcon from \"@material-ui/icons/Lock\"\nimport React from \"react\"\nimport {MarkdownComponent} from \"../components/markdown\"\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: \"100%\",\n    },\n    cardContent: {\n        flexGrow: 1,\n    },\n    cardGrid: {\n        paddingBottom: theme.spacing(8),\n        paddingTop: theme.spacing(8),\n    },\n\n    cardMedia: {\n        paddingTop: \"56.25%\", // 16:9\n    },\n\n    footer: {\n        backgroundColor: theme.palette.background.paper,\n        padding: theme.spacing(6),\n    },\n    heroButtons: {\n        marginTop: theme.spacing(4),\n    },\n    heroContent: {\n        backgroundImage: \"url('https://i.imgur.com/73oxpfv.png')\",\n        backgroundRepeat: \"no-repeat\",\n        backgroundSize: \"cover\",\n\n        padding: theme.spacing(8, 0, 6),\n    },\n    icon: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        color: \"white\",\n    },\n}))\n\nexport interface HomePageProps {}\nexport const HomePage: React.FC<HomePageProps> = () => {\n    const classes = useStyles()\n\n    return (\n        <>\n            <main>\n                {/* Hero unit */}\n                <div className={classes.heroContent}>\n                    <Container maxWidth=\"sm\">\n                        <Typography\n                            className={classes.title}\n                            component=\"h1\"\n                            variant=\"h2\"\n                            align=\"center\"\n                            color=\"textPrimary\"\n                            gutterBottom>\n                            Welcome to Operation Dynamo\n                        </Typography>\n\n                        <MarkdownComponent url=\"intro.md\" />\n\n                        <div className={classes.heroButtons}>\n                            <Grid container spacing={2} justify=\"center\">\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        startIcon={<InsertCommentIcon />}\n                                        href=\"/contact\">\n                                        Get Invite\n                                    </Button>\n                                </Grid>\n\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        startIcon={<AccountCircleIcon />}\n                                        href=\"/account/register/choose\">\n                                        Register\n                                    </Button>\n                                </Grid>\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"default\"\n                                        href=\"/account/login\"\n                                        startIcon={<LockIcon />}>\n                                        Login\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Container>\n                </div>\n                <Container className={classes.cardGrid} maxWidth=\"md\">\n                    <Typography\n                        component=\"h1\"\n                        variant=\"h2\"\n                        align=\"center\"\n                        color=\"textPrimary\"\n                        gutterBottom>\n                        Getting Started\n                    </Typography>\n\n                    {/* End hero unit */}\n                    <Grid container spacing={4}>\n                        <Grid item xs={12} sm={6}>\n                            <Card className={classes.card}>\n                                <CardContent>\n                                    <Typography\n                                        gutterBottom\n                                        variant=\"h5\"\n                                        component=\"h2\">\n                                        3D Printer Volunteer - Tutorial\n                                    </Typography>\n\n                                    <iframe\n                                        title=\"hello\"\n                                        width=\"100%\"\n                                        height=\"315\"\n                                        src=\"https://www.youtube.com/embed/G7SquoBZOi8\"\n                                        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                                        allowFullScreen\n                                    />\n                                </CardContent>\n                            </Card>\n                        </Grid>\n\n                        <Grid item xs={12} sm={6}>\n                            <Card className={classes.card}>\n                                <CardContent>\n                                    <Typography\n                                        gutterBottom\n                                        variant=\"h5\"\n                                        component=\"h2\">\n                                        Medical Submitter - Tutorial\n                                    </Typography>\n\n                                    <iframe\n                                        title=\"hello\"\n                                        width=\"100%\"\n                                        height=\"315\"\n                                        src=\"https://www.youtube.com/embed/RNVR8Y-zPQU\"\n                                        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                                        allowFullScreen\n                                    />\n                                </CardContent>\n                            </Card>\n                        </Grid>\n                    </Grid>\n                </Container>\n            </main>\n        </>\n    )\n}\n","import {\n    ButtonBase,\n    Card,\n    createStyles,\n    Grow,\n    makeStyles,\n} from \"@material-ui/core\"\nimport React from \"react\"\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        card: {\n            margin: 20,\n            textDecoration: \"none\",\n            width: 345,\n        },\n\n        details: {\n            display: \"flex\",\n            flexDirection: \"column\",\n        },\n    }),\n)\n\nexport interface CardItemProps {\n    children?: JSX.Element | JSX.Element[] | null\n    onClick?: () => void\n}\nexport const CardItem: React.FC<CardItemProps> = ({children, onClick}) => {\n    const classes = useStyles()\n    return (\n        <div>\n            <Grow in timeout={500}>\n                <ButtonBase>\n                    <Card onClick={onClick} className={classes.card}>\n                        <div className={classes.details}>\n                            {children || null}\n                        </div>\n                    </Card>\n                </ButtonBase>\n            </Grow>\n        </div>\n    )\n}\n","import React, {useEffect, useState} from \"react\"\nimport STLViewer from \"stl-viewer\"\nimport {createContainer, useContainer} from \"unstated-next\"\nimport {dxfToImageBuffer} from \"../services/thumbnail\"\nimport {contentFromFile, setNested, svgToPng} from \"../services/utils\"\nimport {DXFViewer} from \"./dxf-viewer\"\nimport {theme} from \"./theme\"\n\nexport type RenderType = \"stl\" | \"dxf\" | \"image\"\n\nexport const FileRenderStateContainer = createContainer(() => {\n    const [previewImage, changePreviewImage] = useState<{\n        [id: string]:\n            | {\n                  [fileName: string]: string | undefined\n              }\n            | undefined\n    }>({})\n    return {\n        changePreviewImage,\n        previewImage,\n    } as const\n})\n\nexport interface FileRenderProps {\n    color?: string\n    height?: number\n    id?: string\n    name?: string\n    source: {type: \"url\"; url: string} | {file: File; type: \"file\"}\n    type: RenderType\n    width?: number\n}\nexport const FileRender: React.FC<FileRenderProps> = ({\n    color,\n    height = 200,\n    id = \"default\",\n    name = \"default\",\n    source,\n    type,\n    width = 200,\n}) => {\n    const {changePreviewImage} = useContainer(FileRenderStateContainer)\n\n    const [element, changeElement] = useState<JSX.Element>()\n    useEffect(() => {\n        const getElement = async () => {\n            const inputSource = source.type === \"url\" ? source.url : source.file\n            if (source.type === \"url\") {\n                changePreviewImage((old) => {\n                    return setNested(old, `${id}.${name}`, source.url) as never\n                })\n            }\n\n            if (source.type === \"file\" && type === \"dxf\") {\n                contentFromFile({\n                    file: source.file,\n                    onLoad: (dxf: string) => {\n                        const buffer = dxfToImageBuffer({dxf})\n                        const base64 = buffer.toString(\"base64\")\n\n                        svgToPng({\n                            dataUrl: `data:image/svg+xml;base64,${base64}`,\n                            onLoad: (pngUrl?: string) => {\n                                changePreviewImage((old) => {\n                                    return setNested(\n                                        old,\n                                        `${id}.${name}`,\n                                        pngUrl,\n                                    ) as never\n                                })\n                            },\n                        })\n                    },\n                })\n            }\n\n            const element = await (async () => {\n                switch (type) {\n                    case \"dxf\":\n                        return (\n                            <DXFViewer\n                                width={width}\n                                height={height}\n                                source={\n                                    typeof inputSource === \"string\"\n                                        ? {type: \"url\", url: inputSource}\n                                        : {\n                                              file: inputSource,\n                                              type: \"file\",\n                                          }\n                                }\n                                strokeColor={\n                                    color || theme.palette.primary.light\n                                }\n                                strokeWidth=\"0.5%\"\n                            />\n                        )\n                    case \"stl\":\n                        return (\n                            <STLViewer\n                                model={\n                                    typeof inputSource === \"string\"\n                                        ? inputSource\n                                        : await inputSource.arrayBuffer()\n                                }\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                getPainter={(painter: any) => {\n                                    setTimeout(() => {\n                                        changePreviewImage((old) => {\n                                            return setNested(\n                                                old,\n                                                `${id}.${name}`,\n                                                painter.captureFrame(),\n                                            ) as never\n                                        })\n                                    }, 500)\n                                }}\n                                width={width}\n                                height={height}\n                                modelColor={\n                                    color || theme.palette.primary.light\n                                }\n                                backgroundColor=\"white\"\n                                rotate\n                                orbitControls\n                            />\n                        )\n                    default:\n                        return (\n                            <img\n                                width={width}\n                                height={height}\n                                alt=\"\"\n                                src={\n                                    typeof inputSource === \"string\"\n                                        ? inputSource\n                                        : undefined\n                                }\n                            />\n                        )\n                }\n            })()\n\n            changeElement(element)\n        }\n        getElement()\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return element || null\n}\n","import {Button, Grid, makeStyles} from \"@material-ui/core\"\nimport GetAppIcon from \"@material-ui/icons/GetApp\"\nimport React from \"react\"\nimport {File} from \"../graphql/schema.generated\"\nimport {goTo} from \"../services/utils\"\nimport {FileRender, FileRenderStateContainer, RenderType} from \"./file-renderer\"\n\nconst useStyles = makeStyles(() => ({\n    gridContainer: {\n        margin: 5,\n    },\n}))\n\nexport interface GridViewProps {\n    children: React.ReactNode[]\n}\nexport const GridView: React.FC<GridViewProps> = ({children}) => {\n    const classes = useStyles()\n\n    return (\n        <div className={classes.gridContainer}>\n            <Grid container spacing={1}>\n                {children.map((child, i) => (\n                    // eslint-disable-next-line react/no-array-index-key\n                    <Grid key={i} item>\n                        {child}\n                    </Grid>\n                ))}\n            </Grid>\n        </div>\n    )\n}\n\nexport interface FileItemPreviewProps {\n    items: {file: File; type: RenderType}[]\n}\nexport const FileItemPreview: React.FC<FileItemPreviewProps> = ({items}) => {\n    return (\n        <div style={{display: \"flex\", justifyContent: \"center\"}}>\n            <GridView>\n                {items.map(({file: {id, presignedUrl}, type}) => (\n                    <div\n                        style={{\n                            display: \"flex\",\n                            flexDirection: \"column\",\n                            margin: 10,\n                        }}\n                        key={id}>\n                        <FileRenderStateContainer.Provider>\n                            <FileRender\n                                type={type}\n                                width={200}\n                                height={200}\n                                source={{type: \"url\", url: presignedUrl}}\n                            />\n                        </FileRenderStateContainer.Provider>\n\n                        <Button\n                            variant=\"contained\"\n                            style={{height: 35}}\n                            color=\"primary\"\n                            onClick={() => goTo(presignedUrl)}\n                            startIcon={<GetAppIcon />}>\n                            {`Download ${type.toUpperCase()}`}\n                        </Button>\n                    </div>\n                ))}\n            </GridView>\n        </div>\n    )\n}\n","import {\n    AppBar,\n    createStyles,\n    makeStyles,\n    Theme,\n    Toolbar,\n    Typography,\n} from \"@material-ui/core\"\nimport React from \"react\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        menuButton: {\n            marginRight: theme.spacing(2),\n        },\n        root: {\n            flexGrow: 1,\n        },\n        title: {\n            flexGrow: 1,\n        },\n    }),\n)\n\nexport interface PageTitleBarProps {\n    rightItem?: JSX.Element\n    title: string\n}\nexport const PageTitleBar: React.FC<PageTitleBarProps> = ({\n    rightItem: rightActionItem = null,\n    title,\n}) => {\n    const classes = useStyles()\n    return (\n        <AppBar color=\"transparent\" position=\"static\">\n            <Toolbar>\n                <Typography variant=\"h6\" className={classes.title}>\n                    {title}\n                </Typography>\n                {rightActionItem}\n            </Toolbar>\n        </AppBar>\n    )\n}\n","import {Typography} from \"@material-ui/core\"\nimport React from \"react\"\n\nexport interface WrongPageComponentProps {\n    text: string\n}\nexport const WrongPageComponent: React.FC<WrongPageComponentProps> = ({\n    text,\n}) => {\n    return (\n        <div style={{display: \"flex\", justifyContent: \"center\"}}>\n            <Typography\n                style={{alignSelf: \"center\"}}\n                component=\"h5\"\n                variant=\"h5\">\n                {text}\n            </Typography>\n        </div>\n    )\n}\n","import {assert, unreachable} from \"@dynamo/common\"\nimport {makeStyles} from \"@material-ui/core\"\nimport Avatar from \"@material-ui/core/Avatar\"\nimport Button from \"@material-ui/core/Button\"\nimport CardContent from \"@material-ui/core/CardContent\"\nimport CardHeader from \"@material-ui/core/CardHeader\"\nimport CardMedia from \"@material-ui/core/CardMedia\"\nimport {red} from \"@material-ui/core/colors\"\nimport LinearProgress from \"@material-ui/core/LinearProgress\"\nimport Typography from \"@material-ui/core/Typography\"\nimport React, {useCallback, useMemo} from \"react\"\nimport {CardItem} from \"../components/card-item\"\nimport {GridView} from \"../components/file-item-preview\"\nimport {PageComponent} from \"../components/page\"\nimport {PageTitleBar} from \"../components/page-title-bar\"\nimport {WrongPageComponent} from \"../components/wrong-page\"\nimport {Job, useAcceptedJobsQuery} from \"../graphql/schema.generated\"\nimport {goTo} from \"../services/utils\"\nimport {useDateFromNow} from \"../util\"\n\nconst useStyles = makeStyles((theme) => ({\n    avatar: {\n        backgroundColor: red[500],\n    },\n    cardRoot: {\n        margin: 20,\n        width: 345,\n    },\n    expand: {\n        marginLeft: \"auto\",\n        transform: \"rotate(0deg)\",\n        transition: theme.transitions.create(\"transform\", {\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n    expandOpen: {\n        transform: \"rotate(180deg)\",\n    },\n\n    media: {\n        height: 0,\n        paddingTop: \"56.25%\", // 16:9\n    },\n    progressBar: {\n        marginBottom: 10,\n        marginLeft: -16,\n        marginRight: -16,\n        marginTop: -16,\n    },\n\n    progressText: {fontWeight: \"bold\"},\n}))\n\nexport interface JobCardProps {\n    job: Job\n    showAvatar?: boolean\n}\nexport const JobCard: React.FC<JobCardProps> = ({job, showAvatar}) => {\n    const classes = useStyles()\n\n    const onClick = useCallback(() => {\n        goTo(`/job?id=${job.id}`)\n    }, [job.id])\n\n    const createdAt = useDateFromNow(job.createdAt)\n    const progressNumber = useMemo(() => {\n        switch (job.progress) {\n            case \"Assigned\":\n                return 0\n            case \"PrintComplete\":\n                return 0.5\n            case \"PrintStarted\":\n                return 0.25\n            case \"Shipped\":\n                return 0.75\n            case \"Received\":\n                return 1.0\n            default:\n                unreachable(`Invalid job progress`)\n        }\n    }, [job.progress])\n\n    return (\n        <CardItem onClick={onClick}>\n            <div>\n                <CardHeader\n                    avatar={\n                        showAvatar && (\n                            <Avatar\n                                alt={`${job.volunteer.firstName} ${job.volunteer.lastName}`}\n                                className={classes.avatar}>\n                                {job.volunteer.firstName[0]}\n                            </Avatar>\n                        )\n                    }\n                    title={job.name}\n                    subheader={createdAt}\n                />\n                {job.submission.files.preview && (\n                    <CardMedia\n                        className={classes.media}\n                        image={job.submission.files.preview.presignedUrl}\n                        title={job.name}\n                    />\n                )}\n                <CardContent>\n                    <LinearProgress\n                        className={classes.progressBar}\n                        variant=\"determinate\"\n                        value={progressNumber * 100}\n                    />\n\n                    <Typography\n                        className={classes.progressText}\n                        variant=\"body2\"\n                        color=\"textSecondary\"\n                        component=\"p\">\n                        {`Progress: ${job.progress} (${(\n                            progressNumber * 100\n                        ).toFixed(0)}%)`}\n                    </Typography>\n\n                    <Typography\n                        variant=\"body2\"\n                        color=\"textSecondary\"\n                        component=\"p\">\n                        {`Quantity Accepted: ${job.quantity}`}\n                    </Typography>\n\n                    {job.description && (\n                        <Typography\n                            variant=\"body2\"\n                            color=\"textSecondary\"\n                            component=\"p\">\n                            {job.description}\n                        </Typography>\n                    )}\n                </CardContent>\n            </div>\n        </CardItem>\n    )\n}\n\nexport interface VolunteerJobsProps {}\nexport const VolunteerJobs: React.FC<VolunteerJobsProps> = () => {\n    const {data, loading} = useAcceptedJobsQuery()\n    if (loading) {\n        return <div>Loading...</div>\n    }\n    assert(data?.acceptedJobs, `Couldn't get accepted jos!`)\n\n    return (\n        <>\n            <PageTitleBar\n                title=\"My Accepted Jobs\"\n                rightItem={\n                    <Button\n                        color=\"primary\"\n                        onClick={() => {\n                            goTo(\"/find\")\n                        }}\n                        variant=\"contained\">\n                        Find Jobs\n                    </Button>\n                }\n            />\n\n            <GridView>\n                {data.acceptedJobs\n                    .sort(\n                        (a, b) =>\n                            new Date(b.createdAt).getTime() -\n                            new Date(a.createdAt).getTime(),\n                    )\n                    .map((job) => (\n                        <JobCard key={job.id} {...{job}} />\n                    ))}\n            </GridView>\n        </>\n    )\n}\n\nexport interface JobsPageProps {}\nexport const JobsPage: React.FC<JobsPageProps> = () => (\n    <div>\n        <PageComponent\n            disableHide={false}\n            showFooter\n            title=\"Home\"\n            rolePages={[\n                {\n                    component: () => <VolunteerJobs />,\n                    role: \"Volunteer\",\n                },\n            ]}>\n            <WrongPageComponent text=\"Must be signed in to view submissions\" />\n        </PageComponent>\n        <br />\n    </div>\n)\n","import {IconButton} from \"@material-ui/core\"\nimport React, {useEffect, useState} from \"react\"\n\nexport interface SwitchButtonProps {\n    initial?: boolean\n    offIcon: JSX.Element\n    onIcon: JSX.Element\n    onStateChange: (state: boolean) => void\n}\nexport const SwitchButton: React.FC<SwitchButtonProps> = ({\n    initial = false,\n    offIcon,\n    onIcon,\n    onStateChange,\n}) => {\n    const [state, changeState] = useState(initial)\n\n    useEffect(() => {\n        onStateChange(state)\n    }, [onStateChange, state])\n\n    return (\n        <IconButton\n            onClick={() => {\n                changeState((old) => {\n                    return !old\n                })\n            }}>\n            {state ? onIcon : offIcon}\n        </IconButton>\n    )\n}\n","import {assert, unreachable} from \"@dynamo/common\"\nimport {\n    Avatar,\n    Button,\n    CardContent,\n    CardHeader,\n    CardMedia,\n    makeStyles,\n} from \"@material-ui/core\"\nimport {red} from \"@material-ui/core/colors\"\nimport FormControl from \"@material-ui/core/FormControl\"\nimport InputLabel from \"@material-ui/core/InputLabel\"\nimport LinearProgress from \"@material-ui/core/LinearProgress\"\nimport MenuItem from \"@material-ui/core/MenuItem\"\nimport Select from \"@material-ui/core/Select\"\nimport Typography from \"@material-ui/core/Typography\"\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\"\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\"\nimport React, {useCallback, useMemo, useState} from \"react\"\nimport {createContainer, useContainer} from \"unstated-next\"\nimport {CardItem} from \"../components/card-item\"\nimport {GridView} from \"../components/file-item-preview\"\nimport {PageComponent} from \"../components/page\"\nimport {PageTitleBar} from \"../components/page-title-bar\"\nimport {SwitchButton} from \"../components/switch-button\"\nimport {WrongPageComponent} from \"../components/wrong-page\"\nimport {\n    Submission,\n    useAvailableSubmissionsQuery,\n    useSubmittedSubmissionsQuery,\n} from \"../graphql/schema.generated\"\nimport {goTo} from \"../services/utils\"\nimport {useDateFromNow} from \"../util\"\n\nconst useStyles = makeStyles((theme) => ({\n    avatar: {\n        backgroundColor: red[500],\n    },\n    cardRoot: {\n        height: 420,\n        margin: 20,\n        width: 345,\n    },\n\n    expand: {\n        marginLeft: \"auto\",\n        transform: \"rotate(0deg)\",\n        transition: theme.transitions.create(\"transform\", {\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n    expandOpen: {\n        transform: \"rotate(180deg)\",\n    },\n\n    gridContainer: {\n        margin: 5,\n    },\n\n    media: {\n        height: 0,\n        paddingTop: \"56.25%\", // 16:9\n    },\n\n    progressBar: {\n        marginBottom: 10,\n        marginLeft: -16,\n        marginRight: -16,\n        marginTop: -16,\n    },\n    progressText: {fontWeight: \"bold\"},\n\n    sortBy: {\n        margin: 5,\n    },\n\n    titleMenu: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        margin: 20,\n    },\n}))\n\nexport interface SubmissionCardProps {\n    showAvatar?: boolean\n    submission: Submission\n}\nexport const SubmissionCard: React.FC<SubmissionCardProps> = ({\n    showAvatar = false,\n    submission,\n}) => {\n    const classes = useStyles()\n\n    const onClick = useCallback(() => {\n        goTo(`/submission?id=${submission.id}`)\n    }, [submission.id])\n\n    const createdAt = useDateFromNow(submission.createdAt)\n    return (\n        <CardItem onClick={onClick}>\n            <CardHeader\n                avatar={\n                    showAvatar && (\n                        <Avatar\n                            alt={`${submission.submitter.firstName} ${submission.submitter.lastName}`}\n                            className={classes.avatar}>\n                            {submission.submitter.firstName[0]}\n                        </Avatar>\n                    )\n                }\n                title={submission.name}\n                subheader={createdAt}\n            />\n            <CardMedia\n                className={classes.media}\n                image={submission.files.preview?.presignedUrl}\n                title={submission.name}\n            />\n\n            <CardContent>\n                <LinearProgress\n                    className={classes.progressBar}\n                    variant=\"determinate\"\n                    value={submission.progress.total * 100}\n                />\n                <Typography\n                    className={classes.progressText}\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    component=\"p\">\n                    {`Progress: ${(submission.progress.total * 100).toFixed(\n                        0,\n                    )}%`}\n                </Typography>\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                    {`Distance: ${submission.distance.toFixed(1)} miles`}\n                </Typography>\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                    {`Quantity Requested: ${submission.quantity}`}\n                </Typography>\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                    {`3D Printing Jobs Remaining: ${submission.progress.modelQuantity}`}\n                </Typography>\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                    {`Laser Cutting Jobs Remaining: ${submission.progress.laserCuttingQuantity}`}\n                </Typography>\n                {submission.description && (\n                    <Typography\n                        variant=\"body2\"\n                        color=\"textSecondary\"\n                        component=\"p\">\n                        {submission.description}\n                    </Typography>\n                )}\n            </CardContent>\n        </CardItem>\n    )\n}\n\nexport interface SubmitterSubmissionsProps {}\nexport const SubmitterSubmissions: React.FC<SubmitterSubmissionsProps> = () => {\n    const {data, loading} = useSubmittedSubmissionsQuery()\n    const submissions = useSortedSubmissions(data?.submittedSubmissions)\n\n    if (loading) {\n        return <div>Loading...</div>\n    }\n    assert(submissions, `Couldn't get submitted submissions!`)\n\n    return (\n        <>\n            <PageTitleBar\n                title=\"My Submissions\"\n                rightItem={\n                    <div style={{display: \"flex\", flexDirection: \"row\"}}>\n                        <SortingProperties />\n                        <Button\n                            color=\"primary\"\n                            onClick={() => {\n                                goTo(\"/submission/create\")\n                            }}\n                            style={{marginBottom: 10, marginTop: 10}}\n                            variant=\"contained\">\n                            Create Submission\n                        </Button>\n                    </div>\n                }\n            />\n\n            <GridView>\n                {submissions.map((submission) => (\n                    <SubmissionCard key={submission.id} {...{submission}} />\n                ))}\n            </GridView>\n        </>\n    )\n}\n\nexport interface VolunteerSubmissionsProps {}\nexport const VolunteerSubmissions: React.FC<VolunteerSubmissionsProps> = () => {\n    const {data, loading} = useAvailableSubmissionsQuery()\n    const submissions = useSortedSubmissions(data?.availableSubmissions)\n\n    if (loading) {\n        return <div>Loading...</div>\n    }\n    assert(submissions, `Couldn't get available submissions!`)\n\n    return (\n        <>\n            <PageTitleBar title=\"Find Jobs\" rightItem={<SortingProperties />} />\n\n            <GridView>\n                {submissions.map((submission) => (\n                    <SubmissionCard key={submission.id} {...{submission}} />\n                ))}\n            </GridView>\n        </>\n    )\n}\n\nconst fixSortOrder = (value: number, sortOrder: SortOrder) =>\n    sortOrder === \"ascending\" ? value : -value\n\nconst useSortedSubmissions = (submissions: Submission[] | undefined) => {\n    const {sortBy, sortOrder} = useContainer(SubmissionSortContainer)\n    return useMemo(() => {\n        if (!submissions) {\n            return undefined\n        }\n\n        switch (sortBy) {\n            case \"distance\":\n                return [...submissions].sort((a, b) =>\n                    fixSortOrder(a.distance - b.distance, sortOrder),\n                )\n\n            case \"date\":\n                return [...submissions].sort((a, b) =>\n                    fixSortOrder(\n                        new Date(a.createdAt).getTime() -\n                            new Date(b.createdAt).getTime(),\n                        sortOrder,\n                    ),\n                )\n\n            case \"printing\":\n                return [...submissions].sort((a, b) => {\n                    return fixSortOrder(\n                        a.progress.modelQuantity - b.progress.modelQuantity,\n                        sortOrder,\n                    )\n                })\n\n            case \"laserCutting\":\n                return [...submissions].sort((a, b) =>\n                    fixSortOrder(\n                        a.progress.laserCuttingQuantity -\n                            b.progress.laserCuttingQuantity,\n                        sortOrder,\n                    ),\n                )\n\n            default:\n                unreachable(`Unrecognized sorting order: ${sortBy}`)\n        }\n    }, [sortBy, sortOrder, submissions])\n}\n\ntype SortBy = \"distance\" | \"date\" | \"printing\" | \"laserCutting\"\ntype SortOrder = \"ascending\" | \"descending\"\nexport const SubmissionSortContainer = createContainer(() => {\n    const [sortBy, setSortBy] = useState<SortBy>(\"distance\")\n    const [sortOrder, setSortOrder] = useState<SortOrder>(\"ascending\")\n    return {setSortBy, setSortOrder, sortBy, sortOrder}\n})\n\nexport interface SortingPropertiesProps {}\nexport const SortingProperties: React.FC<SortingPropertiesProps> = () => {\n    const {setSortBy, setSortOrder, sortBy, sortOrder} = useContainer(\n        SubmissionSortContainer,\n    )\n    const classes = useStyles()\n\n    return (\n        <div className={classes.sortBy}>\n            <FormControl>\n                <InputLabel>Sort By</InputLabel>\n                <Select\n                    value={sortBy}\n                    onChange={(event) =>\n                        setSortBy((event.target.value as unknown) as SortBy)\n                    }>\n                    <MenuItem value=\"distance\">Distance</MenuItem>\n                    <MenuItem value=\"date\">Date</MenuItem>\n                    <MenuItem value=\"printing\">3D Printing</MenuItem>\n                    <MenuItem value=\"laserCutting\">Laser Cutting</MenuItem>\n                </Select>\n            </FormControl>\n            <SwitchButton\n                initial={sortOrder === \"ascending\"}\n                onStateChange={(state) => {\n                    setSortOrder(state ? \"ascending\" : \"descending\")\n                }}\n                onIcon={<ArrowUpwardIcon />}\n                offIcon={<ArrowDownwardIcon />}\n            />\n        </div>\n    )\n}\n\nexport interface SubmissionsPageProps {}\nexport const SubmissionsPage: React.FC<SubmissionsPageProps> = () => (\n    <SubmissionSortContainer.Provider>\n        <div>\n            <PageComponent\n                disableHide={false}\n                showFooter\n                title=\"Home\"\n                rolePages={[\n                    {\n                        component: () => <SubmitterSubmissions />,\n                        role: \"Submitter\",\n                    },\n                    {\n                        component: () => <VolunteerSubmissions />,\n                        role: \"Volunteer\",\n                    },\n                ]}>\n                <WrongPageComponent text=\"Must be signed in to view submissions\" />\n            </PageComponent>\n            <br />\n        </div>\n    </SubmissionSortContainer.Provider>\n)\n","import React from \"react\"\nimport {PageComponent} from \"../components/page\"\nimport {HomePage} from \"./home\"\nimport {VolunteerJobs} from \"./jobs\"\nimport {SubmissionSortContainer, SubmitterSubmissions} from \"./submissions\"\n\nexport interface IndexPageProps {}\nexport const IndexPage: React.FC<IndexPageProps> = () => (\n    <div>\n        <PageComponent\n            disableHide={false}\n            showFooter\n            title=\"Home\"\n            rolePages={[\n                {\n                    component: () => (\n                        <div style={{padding: 10}}>\n                            <SubmissionSortContainer.Provider>\n                                <SubmitterSubmissions />\n                            </SubmissionSortContainer.Provider>\n                        </div>\n                    ),\n                    role: \"Submitter\",\n                },\n                {\n                    component: () => (\n                        <div style={{padding: 10}}>\n                            <VolunteerJobs />\n                        </div>\n                    ),\n                    role: \"Volunteer\",\n                },\n            ]}>\n            <HomePage />\n        </PageComponent>\n        <br />\n    </div>\n)\n","import * as React from \"react\"\nimport {MarkdownComponent} from \"../components/markdown\"\nimport {PageComponent} from \"../components/page\"\n\nexport interface AboutPageProps {}\nexport const AboutPage: React.FC<AboutPageProps> = () => (\n    <PageComponent showFooter title=\"About\">\n        <MarkdownComponent url=\"about.md\" />\n    </PageComponent>\n)\n","import {\n    ButtonBase,\n    createStyles,\n    makeStyles,\n    Theme,\n    Typography,\n} from \"@material-ui/core\"\nimport React from \"react\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        focusVisible: {},\n        image: {\n            \"&:hover, &$focusVisible\": {\n                \"& $imageBackdrop\": {\n                    opacity: 0.5,\n                },\n                \"& $imageMarked\": {\n                    opacity: 0,\n                },\n                \"& $imageTitle\": {\n                    border: \"4px solid currentColor\",\n                },\n                zIndex: 1,\n            },\n            height: \"40vh\",\n            [theme.breakpoints.down(\"xs\")]: {\n                height: 100, // Overrides inline-style\n                width: \"100% !important\",\n            },\n            position: \"relative\",\n        },\n        imageBackdrop: {\n            backgroundColor: theme.palette.common.black,\n            bottom: 0,\n            left: 0,\n            opacity: 0.6,\n            position: \"absolute\",\n            right: 0,\n            top: 0,\n            transition: theme.transitions.create(\"opacity\"),\n        },\n        imageButton: {\n            alignItems: \"center\",\n            bottom: 0,\n            color: theme.palette.common.white,\n            display: \"flex\",\n            fontWeight: 50,\n            justifyContent: \"center\",\n            left: 0,\n            position: \"absolute\",\n            right: 0,\n            top: 0,\n        },\n        imageMarked: {\n            backgroundColor: theme.palette.common.white,\n            bottom: -2,\n            height: 3,\n            left: \"calc(50% - 9px)\",\n            position: \"absolute\",\n            transition: theme.transitions.create(\"opacity\"),\n            width: 18,\n        },\n        imageSrc: {\n            backgroundPosition: \"center 40%\",\n            backgroundSize: \"cover\",\n            bottom: 0,\n            left: 0,\n            position: \"absolute\",\n            right: 0,\n            top: 0,\n        },\n        imageTitle: {\n            padding: `${theme.spacing(2)}px ${theme.spacing(4)}px ${\n                theme.spacing(1) + 6\n            }px`,\n            position: \"relative\",\n        },\n        root: {\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            minWidth: 300,\n            width: \"100%\",\n        },\n    }),\n)\n\nexport interface PictureButtonProps {\n    onClick: () => void\n    title: string\n    url: string\n    width: string\n}\nexport const PictureButton: React.FC<PictureButtonProps> = ({\n    onClick,\n    title,\n    url,\n    width,\n}) => {\n    const classes = useStyles()\n\n    return (\n        <ButtonBase\n            onClick={onClick}\n            focusRipple\n            key={title}\n            className={classes.image}\n            focusVisibleClassName={classes.focusVisible}\n            style={{\n                height: 200,\n\n                width,\n            }}>\n            <span\n                className={classes.imageSrc}\n                style={{\n                    backgroundImage: `url(${url})`,\n                }}\n            />\n            <span className={classes.imageBackdrop} />\n            <span className={classes.imageButton}>\n                <Typography\n                    component=\"span\"\n                    variant=\"h4\"\n                    color=\"inherit\"\n                    className={classes.imageTitle}>\n                    {title}\n                    <span className={classes.imageMarked} />\n                </Typography>\n            </span>\n        </ButtonBase>\n    )\n}\n","import {createStyles, makeStyles} from \"@material-ui/core\"\nimport * as React from \"react\"\nimport {PictureButton} from \"./picture-button\"\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            minWidth: 300,\n            width: \"100%\",\n        },\n    }),\n)\n\nexport interface PictureSelectComponentProps {\n    images: {\n        key: string\n        onClick: () => void\n        title: string\n        url: string\n        width: string\n    }[]\n}\nexport const PictureSelectComponent: React.FC<PictureSelectComponentProps> = ({\n    images,\n}) => {\n    const classes = useStyles()\n\n    return (\n        <div>\n            <div style={{marginTop: 20, textAlign: \"center\"}}>\n                <div className={classes.root}>\n                    {images.map((image) => (\n                        <PictureButton {...image} />\n                    ))}\n                </div>\n            </div>\n        </div>\n    )\n}\n","import {Typography} from \"@material-ui/core\"\nimport * as React from \"react\"\nimport {PageComponent} from \"../../components/page\"\nimport {PictureSelectComponent} from \"../../components/picture-select\"\nimport {goTo} from \"../../services/utils\"\n\nconst images = [\n    {\n        key: \"medical\",\n        onClick: () => goTo(\"/account/register?type=Submitter\"),\n        title: \"Medical\",\n        url:\n            \"https://cdn.pixabay.com/photo/2016/01/19/15/05/doctor-1149149_960_720.jpg\",\n        width: \"50%\",\n    },\n    {\n        key: \"volunteer\",\n        onClick: () => goTo(\"/account/register?type=Volunteer\"),\n        title: \"Maker\",\n        url:\n            \"https://cdn.pixabay.com/photo/2018/10/19/08/46/3d-printing-3758154_960_720.jpg\",\n        width: \"50%\",\n    },\n]\n\nexport interface AccountChoosePageProps {}\nexport const AccountChoosePage: React.FC<AccountChoosePageProps> = () => {\n    return (\n        <PageComponent showFooter title=\"Choose Type\">\n            <div style={{display: \"flex\", justifyContent: \"center\"}}>\n                <Typography\n                    style={{alignSelf: \"center\", marginLeft: 10}}\n                    component=\"h2\"\n                    variant=\"h2\">\n                    Choose Account Type\n                </Typography>\n            </div>\n            <PictureSelectComponent images={images} />\n        </PageComponent>\n    )\n}\n","import {Typography} from \"@material-ui/core\"\nimport Avatar from \"@material-ui/core/Avatar\"\nimport Container from \"@material-ui/core/Container\"\nimport {makeStyles} from \"@material-ui/core/styles\"\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\"\nimport React, {useCallback, useMemo} from \"react\"\nimport {FormComponent, FormItem} from \"../../components/form/form\"\nimport {PageComponent} from \"../../components/page\"\nimport {\n    MutationForgotPasswordArgs,\n    useForgotPasswordMutation,\n} from \"../../graphql/schema.generated\"\nimport {useSnack} from \"../../hooks\"\nimport {goTo} from \"../../services/utils\"\n\nconst useStyles = makeStyles((theme) => ({\n    avatar: {\n        backgroundColor: theme.palette.secondary.main,\n        margin: theme.spacing(1),\n    },\n    paper: {\n        alignItems: \"center\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        marginTop: theme.spacing(8),\n    },\n}))\n\nexport interface ForgotPasswordPageViewProps {\n    onSubmit: (form: MutationForgotPasswordArgs) => void\n}\nexport const ForgotPasswordPageView: React.FC<ForgotPasswordPageViewProps> = ({\n    onSubmit,\n}) => {\n    const classes = useStyles()\n\n    const formItems = useMemo(\n        () =>\n            [\n                {\n                    alignment: {xs: 12},\n                    autoComplete: \"email\",\n                    id: \".email\",\n                    label: \"Email\",\n                    required: true,\n                    type: \"text\",\n                },\n            ] as FormItem[],\n        [],\n    )\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Forgot Password\n                </Typography>\n\n                <FormComponent\n                    submitButtonTitle=\"Reset Password\"\n                    formItems={formItems}\n                    onSubmit={onSubmit}\n                />\n            </div>\n        </Container>\n    )\n}\n\nexport interface ForgotPasswordPageProps {}\nexport const ForgotPasswordPage: React.FC<ForgotPasswordPageProps> = () => {\n    const {updateSnack} = useSnack()\n    const [mutate] = useForgotPasswordMutation({\n        onCompleted: (data) => {\n            if (data.forgotPassword) {\n                updateSnack({\n                    message: \"successfully sent email. redirecting...\",\n                    severity: \"success\",\n                })\n                setTimeout(() => {\n                    goTo(\"/account/login\")\n                }, 1000)\n            }\n        },\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n    })\n\n    const onSubmit = useCallback(\n        (args: MutationForgotPasswordArgs) => {\n            mutate({\n                variables: args,\n            })\n        },\n        [mutate],\n    )\n\n    return (\n        <PageComponent\n            showFooter\n            title=\"Forgot Password\"\n            rolePages={[\n                {redirect: \"/\", role: \"Submitter\"},\n                {redirect: \"/\", role: \"Volunteer\"},\n            ]}>\n            <ForgotPasswordPageView onSubmit={onSubmit} />\n        </PageComponent>\n    )\n}\n","import {Typography} from \"@material-ui/core\"\nimport Avatar from \"@material-ui/core/Avatar\"\nimport Container from \"@material-ui/core/Container\"\nimport Grid from \"@material-ui/core/Grid\"\nimport Link from \"@material-ui/core/Link\"\nimport {makeStyles} from \"@material-ui/core/styles\"\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\"\nimport React, {useCallback} from \"react\"\nimport {login} from \"../../client\"\nimport {FormComponent, FormItem} from \"../../components/form/form\"\nimport {PageComponent} from \"../../components/page\"\nimport {\n    MeDocument,\n    MutationLoginArgs,\n    useLoginMutation,\n} from \"../../graphql/schema.generated\"\nimport {useSnack} from \"../../hooks\"\nimport {goTo} from \"../../services/utils\"\n\nconst useStyles = makeStyles((theme) => ({\n    avatar: {\n        backgroundColor: theme.palette.secondary.main,\n        margin: theme.spacing(1),\n    },\n    paper: {\n        alignItems: \"center\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        marginTop: theme.spacing(8),\n    },\n}))\n\nconst formItems = [\n    {\n        alignment: {xs: 12},\n        autoComplete: \"email\",\n        id: \".email\",\n        label: \"Email\",\n        required: true,\n        type: \"text\",\n    },\n    {\n        alignment: {xs: 12},\n        autoComplete: \"password\",\n        id: \".password\",\n        label: \"Password\",\n        required: true,\n        textType: \"password\",\n        type: \"text\",\n    },\n] as FormItem[]\n\nexport interface LoginPageViewProps {\n    onSubmit: (form: MutationLoginArgs) => void\n}\nexport const LoginPageView: React.FC<LoginPageViewProps> = ({onSubmit}) => {\n    const classes = useStyles()\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Login\n                </Typography>\n\n                <FormComponent\n                    submitButtonTitle=\"Login\"\n                    formItems={formItems}\n                    onSubmit={onSubmit}>\n                    <Grid style={{marginTop: 10}} container justify=\"flex-end\">\n                        <Grid item>\n                            <Link href=\"/account/register\" variant=\"body2\">\n                                Don&apos;t have an account?\n                            </Link>\n                        </Grid>\n                    </Grid>\n\n                    <Grid container justify=\"flex-end\">\n                        <Grid item>\n                            <Link\n                                href=\"/account/forgot-password\"\n                                variant=\"body2\">\n                                Forgot Password?\n                            </Link>\n                        </Grid>\n                    </Grid>\n                </FormComponent>\n            </div>\n        </Container>\n    )\n}\n\nexport interface LoginPageProps {}\nexport const LoginPage: React.FC<LoginPageProps> = () => {\n    const {updateSnack} = useSnack()\n    const [mutate] = useLoginMutation({\n        onCompleted: (data) => {\n            if (data.login) {\n                login(data.login)\n                goTo(\"/\")\n            }\n        },\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n        refetchQueries: [{query: MeDocument}],\n    })\n\n    const onSubmit = useCallback(\n        (args: MutationLoginArgs) => {\n            mutate({\n                variables: args,\n            })\n        },\n        [mutate],\n    )\n\n    return (\n        <PageComponent\n            showFooter\n            title=\"Login\"\n            rolePages={[\n                {redirect: \"/\", role: \"Submitter\"},\n                {redirect: \"/\", role: \"Volunteer\"},\n            ]}>\n            <LoginPageView onSubmit={onSubmit} />\n        </PageComponent>\n    )\n}\n","import React, {useEffect} from \"react\"\nimport {logout} from \"../../client\"\nimport {goTo} from \"../../services/utils\"\n\nexport interface LogoutPageProps {}\nexport const LogoutPage: React.FC<LogoutPageProps> = () => {\n    useEffect(() => {\n        logout()\n        goTo(\"/\")\n    }, [])\n    return <div />\n}\n","import {Typography} from \"@material-ui/core\"\nimport Avatar from \"@material-ui/core/Avatar\"\nimport Container from \"@material-ui/core/Container\"\nimport {makeStyles} from \"@material-ui/core/styles\"\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\"\nimport React, {useCallback, useMemo} from \"react\"\nimport {FormComponent, FormItem} from \"../../components/form/form\"\nimport {PageComponent} from \"../../components/page\"\nimport {WrongPageComponent} from \"../../components/wrong-page\"\nimport {\n    MutationSubmitForgotPasswordArgs,\n    useSubmitForgotPasswordMutation,\n} from \"../../graphql/schema.generated\"\nimport {useQuery, useSnack} from \"../../hooks\"\nimport {goTo} from \"../../services/utils\"\n\nconst useStyles = makeStyles((theme) => ({\n    avatar: {\n        backgroundColor: theme.palette.secondary.main,\n        margin: theme.spacing(1),\n    },\n    paper: {\n        alignItems: \"center\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        marginTop: theme.spacing(8),\n    },\n}))\n\nconst formItems: FormItem[] = [\n    {\n        alignment: {xs: 12},\n        autoComplete: \"password\",\n        id: \".password\",\n        label: \"Password\",\n        required: true,\n        textType: \"password\",\n        type: \"text\",\n    },\n    {\n        alignment: {xs: 12},\n        autoComplete: \"password\",\n        id: \".confirmPassword\",\n        label: \"Confirm Password\",\n        required: true,\n        textType: \"password\",\n        type: \"text\",\n    },\n]\n\nexport interface PasswordResetPageViewProps {\n    onSubmit: (\n        form: MutationSubmitForgotPasswordArgs & {\n            confirmPassword: string\n        },\n    ) => Promise<void>\n}\nexport const PasswordResetPageView: React.FC<PasswordResetPageViewProps> = ({\n    onSubmit,\n}) => {\n    const classes = useStyles()\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Change Password\n                </Typography>\n\n                <FormComponent\n                    submitButtonTitle=\"Change Password\"\n                    formItems={formItems}\n                    onSubmit={onSubmit}\n                />\n            </div>\n        </Container>\n    )\n}\n\nexport interface PasswordResetPageProps {}\nexport const PasswordResetPage: React.FC<PasswordResetPageProps> = () => {\n    const {updateSnack} = useSnack()\n\n    const [mutate] = useSubmitForgotPasswordMutation({\n        onCompleted: (data) => {\n            if (data.submitForgotPassword) {\n                updateSnack({\n                    message: \"successfully changed password. redirecting...\",\n                    severity: \"success\",\n                })\n                setTimeout(() => {\n                    goTo(\"/account/login\")\n                }, 1000)\n            }\n        },\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n    })\n\n    const query = useQuery()\n    const argToken = useMemo(() => query.get(\"token\"), [query])\n\n    const onSubmit = useCallback(\n        async (\n            args: MutationSubmitForgotPasswordArgs & {\n                confirmPassword: string\n            },\n        ) => {\n            if (args.password === args.confirmPassword && argToken) {\n                mutate({\n                    variables: {\n                        email: args.email,\n                        password: args.confirmPassword,\n                        token: argToken,\n                    },\n                })\n            } else {\n                updateSnack({message: \"passwords do not match\"})\n            }\n        },\n        [argToken, mutate, updateSnack],\n    )\n\n    return (\n        <PageComponent\n            showFooter\n            title=\"Password Reset\"\n            rolePages={[\n                {redirect: \"/\", role: \"Submitter\"},\n                {redirect: \"/\", role: \"Volunteer\"},\n            ]}>\n            {argToken ? (\n                <PasswordResetPageView onSubmit={onSubmit} />\n            ) : (\n                <WrongPageComponent text=\"Invalid reset token\" />\n            )}\n        </PageComponent>\n    )\n}\n","import {Typography} from \"@material-ui/core\"\nimport Avatar from \"@material-ui/core/Avatar\"\nimport Container from \"@material-ui/core/Container\"\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\nimport Grid from \"@material-ui/core/Grid\"\nimport Link from \"@material-ui/core/Link\"\nimport {makeStyles} from \"@material-ui/core/styles\"\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\"\nimport React, {useCallback, useMemo, useState} from \"react\"\nimport {login} from \"../../client\"\nimport {FormComponent, FormItem} from \"../../components/form/form\"\nimport {PageComponent} from \"../../components/page\"\nimport {\n    MeDocument,\n    MutationRegisterArgs,\n    useRegisterMutation,\n    UserType,\n} from \"../../graphql/schema.generated\"\nimport {useQuery, useSnack} from \"../../hooks\"\nimport {goTo} from \"../../services/utils\"\n\nconst useStyles = makeStyles((theme) => ({\n    avatar: {\n        backgroundColor: theme.palette.secondary.main,\n        margin: theme.spacing(1),\n    },\n    paper: {\n        alignItems: \"center\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        marginTop: theme.spacing(8),\n    },\n}))\n\nexport interface RegisterPageViewProps {\n    onSubmit: (\n        form: MutationRegisterArgs & {\n            confirmPassword: string\n        },\n    ) => void\n}\nexport const RegisterPageView: React.FC<RegisterPageViewProps> = ({\n    onSubmit,\n}) => {\n    const classes = useStyles()\n    const query = useQuery()\n    const argUserType = useMemo(() => query.get(\"type\"), [query])\n    const registrationToken = query.get(\"token\")\n    const [userType, changeUserType] = useState<UserType>(\n        argUserType &&\n            (argUserType === \"Submitter\" || argUserType === \"Volunteer\")\n            ? argUserType\n            : \"Volunteer\",\n    )\n    const formItems = useMemo(\n        () =>\n            [\n                {\n                    alignment: {xs: 12},\n                    defaultValue: userType,\n                    id: \".type\",\n                    label: \"User Type\",\n                    options: {\n                        Submitter: \"Medical\",\n                        Volunteer: \"Maker\",\n                    },\n                    required: true,\n                    type: \"select\",\n                },\n\n                {\n                    alignment: {xs: 12},\n                    defaultValue: registrationToken || \"\",\n                    hint: \"generated for you by admin\",\n                    id: \".registrationToken\",\n                    label: \"Registration Token\",\n                    required: true,\n                    type: \"text\",\n                },\n\n                {\n                    alignment: {xs: 12},\n                    autoComplete: \"email\",\n                    hint:\n                        userType === \"Submitter\"\n                            ? \"this email can be viewed by makers to contact you\"\n                            : undefined,\n                    id: \".email\",\n                    label:\n                        userType === \"Submitter\"\n                            ? \"Email (public to volunteers)\"\n                            : \"Email\",\n                    required: true,\n                    type: \"text\",\n                },\n                {\n                    alignment: {xs: 12},\n                    autoComplete: \"password\",\n                    id: \".password\",\n                    label: \"Password\",\n                    required: true,\n                    textType: \"password\",\n                    type: \"text\",\n                },\n\n                {\n                    alignment: {xs: 12},\n                    autoComplete: \"password\",\n                    id: \".confirmPassword\",\n                    label: \"Confirm Password\",\n                    required: true,\n                    textType: \"password\",\n                    type: \"text\",\n                },\n\n                {\n                    alignment: {sm: 6, xs: 12},\n                    autoComplete: \"fname\",\n                    id: \".firstName\",\n                    label: \"First Name\",\n                    required: true,\n                    type: \"text\",\n                },\n\n                {\n                    alignment: {sm: 6, xs: 12},\n                    autoComplete: \"lname\",\n                    id: \".lastName\",\n                    label: \"Last Name\",\n                    required: true,\n                    type: \"text\",\n                },\n\n                ...(userType === \"Submitter\"\n                    ? [\n                          {\n                              alignment: {xs: 12},\n                              autoComplete: \"address\",\n                              freeSolo: true,\n                              hint:\n                                  \"address 3D printer owners should send parts\",\n                              id: \".address\",\n                              label: \"Shipping Address\",\n                              locationIds: {\n                                  latitude: \".geolocation.latitude\",\n                                  longitude: \".geolocation.longitude\",\n                              },\n                              required: true,\n                              type: \"location\",\n                          },\n                      ]\n                    : []),\n\n                {\n                    alignment: {xs: 12},\n                    autoComplete: \"address-level2\",\n                    hint: \"city your are based to find hospitals nearby\",\n                    id: userType === \"Submitter\" ? \".city\" : \".address\",\n                    label: \"City\",\n                    locationIds: {\n                        latitude: \".geolocation.latitude\",\n                        longitude: \".geolocation.longitude\",\n                    },\n                    required: true,\n                    type: \"location\",\n                },\n            ] as FormItem[],\n        [registrationToken, userType],\n    )\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    {`${\n                        userType === \"Submitter\" ? \"Medical\" : \"Maker\"\n                    } Register`}\n                </Typography>\n\n                <FormComponent\n                    submitButtonTitle=\"Register\"\n                    formItems={formItems}\n                    onUpdate={(id, value) => {\n                        if (id === \".type\") {\n                            changeUserType(value)\n                        }\n                    }}\n                    onSubmit={onSubmit}>\n                    <Grid style={{marginTop: 10}} container justify=\"flex-end\">\n                        <Grid item>\n                            <Link href=\"/account/login\" variant=\"body2\">\n                                Already have an account? Login\n                            </Link>\n                        </Grid>\n                    </Grid>\n                </FormComponent>\n            </div>\n        </Container>\n    )\n}\n\nexport interface RegisterPageProps {}\nexport const RegisterPage: React.FC<RegisterPageProps> = () => {\n    const {updateSnack} = useSnack()\n    const [mutate] = useRegisterMutation({\n        onCompleted: (data) => {\n            if (data.register) {\n                login(data.register)\n                goTo(\"/\")\n            }\n        },\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n        refetchQueries: [{query: MeDocument}],\n    })\n    const onSubmit = useCallback(\n        (\n            args: MutationRegisterArgs & {\n                confirmPassword: string\n            },\n        ) => {\n            if (args.password === args.confirmPassword) {\n                mutate({variables: {...args}})\n            } else {\n                updateSnack({message: \"passwords do not match\"})\n            }\n        },\n        [mutate, updateSnack],\n    )\n\n    return (\n        <PageComponent\n            showFooter\n            title=\"Register\"\n            rolePages={[\n                {redirect: \"/\", role: \"Submitter\"},\n                {redirect: \"/\", role: \"Volunteer\"},\n            ]}>\n            <RegisterPageView onSubmit={onSubmit} />\n        </PageComponent>\n    )\n}\n","import {Typography} from \"@material-ui/core\"\nimport Avatar from \"@material-ui/core/Avatar\"\nimport Container from \"@material-ui/core/Container\"\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\nimport {makeStyles} from \"@material-ui/core/styles\"\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\"\nimport React, {useCallback, useMemo, useState} from \"react\"\nimport {FormComponent, FormItem} from \"../../components/form/form\"\nimport {PageComponent} from \"../../components/page\"\nimport {WrongPageComponent} from \"../../components/wrong-page\"\nimport {\n    MeDocument,\n    MutationUpdateAccountArgs,\n    User,\n    useUpdateAccountMutation,\n} from \"../../graphql/schema.generated\"\nimport {useSnack} from \"../../hooks\"\nimport {removeNested} from \"../../services/utils\"\n\nconst useStyles = makeStyles((theme) => ({\n    avatar: {\n        backgroundColor: theme.palette.secondary.main,\n        margin: theme.spacing(1),\n    },\n    paper: {\n        alignItems: \"center\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        marginTop: theme.spacing(8),\n    },\n}))\n\nexport interface AccountUpdatePageViewProps {\n    changeIsPasswordUpdate: (isPasswordUpdate: boolean) => void\n    isPasswordUpdate: boolean\n    onSubmit: (\n        form: MutationUpdateAccountArgs & {\n            password?: {confirmPassword: string}\n        },\n    ) => void\n    user: User\n}\nexport const AccountUpdatePageView: React.FC<AccountUpdatePageViewProps> = ({\n    changeIsPasswordUpdate,\n    isPasswordUpdate,\n    onSubmit,\n    user: {address, firstName, lastName, latitude, longitude, type},\n}) => {\n    const classes = useStyles()\n\n    const formItems = useMemo(\n        () =>\n            [\n                {\n                    alignment: {xs: 12},\n                    autoComplete: \"password\",\n                    id: \".password.oldPassword\",\n                    label: \"Old Password\",\n                    required: isPasswordUpdate,\n                    textType: \"password\",\n                    type: \"text\",\n                },\n\n                {\n                    alignment: {xs: 12},\n                    autoComplete: \"password\",\n                    id: \".password.newPassword\",\n                    label: \"New Password\",\n                    required: isPasswordUpdate,\n                    textType: \"password\",\n                    type: \"text\",\n                },\n\n                {\n                    alignment: {xs: 12},\n                    autoComplete: \"password\",\n                    id: \".password.confirmPassword\",\n                    label: \"Confirm Password\",\n                    required: isPasswordUpdate,\n                    textType: \"password\",\n                    type: \"text\",\n                },\n\n                {\n                    alignment: {sm: 6, xs: 12},\n                    autoComplete: \"fname\",\n                    defaultValue: firstName,\n                    id: \".firstName\",\n                    label: \"First Name\",\n                    required: true,\n                    type: \"text\",\n                },\n\n                {\n                    alignment: {sm: 6, xs: 12},\n                    autoComplete: \"lname\",\n                    defaultValue: lastName,\n                    id: \".lastName\",\n                    label: \"Last Name\",\n                    required: true,\n                    type: \"text\",\n                },\n\n                ...(type === \"Submitter\"\n                    ? [\n                          {\n                              alignment: {xs: 12},\n                              autoComplete: \"address\",\n                              defaultValue: {\n                                  geometry: {\n                                      coordinates: [longitude, latitude],\n                                  },\n                                  properties: {\n                                      display_name: address,\n                                  },\n                              },\n                              freeSolo: true,\n                              hint:\n                                  \"address 3D printer owners should send parts\",\n                              id: \".address\",\n                              label: \"Shipping Address\",\n                              locationIds: {\n                                  latitude: \".geolocation.latitude\",\n                                  longitude: \".geolocation.longitude\",\n                              },\n                              required: true,\n                              type: \"location\",\n                          },\n                      ]\n                    : []),\n\n                {\n                    alignment: {xs: 12},\n                    autoComplete: \"address-level2\",\n                    defaultValue: {\n                        geometry: {\n                            coordinates: [longitude, latitude],\n                        },\n                        properties: {\n                            display_name: address,\n                        },\n                    },\n                    hint: \"city your are based to find hospitals nearby\",\n                    id: type === \"Submitter\" ? \".city\" : \".address\",\n                    label: \"City\",\n                    locationIds: {\n                        latitude: \".geolocation.latitude\",\n                        longitude: \".geolocation.longitude\",\n                    },\n\n                    required: true,\n                    type: \"location\",\n                },\n            ] as FormItem[],\n        [\n            address,\n            firstName,\n            isPasswordUpdate,\n            lastName,\n            latitude,\n            longitude,\n            type,\n        ],\n    )\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Update Account\n                </Typography>\n\n                <FormComponent\n                    submitButtonTitle=\"Update Account\"\n                    formItems={formItems}\n                    onUpdate={(id, value) => {\n                        if (id === \".password.oldPassword\") {\n                            changeIsPasswordUpdate(!!value)\n                        }\n                    }}\n                    onSubmit={onSubmit}\n                />\n            </div>\n        </Container>\n    )\n}\n\nexport interface AccountUpdatePageProps {}\nexport const AccountUpdatePage: React.FC<AccountUpdatePageProps> = () => {\n    const {updateSnack} = useSnack()\n    const [isPasswordUpdate, changeIsPasswordUpdate] = useState(false)\n    const [mutate] = useUpdateAccountMutation({\n        onCompleted: (data) => {\n            if (data.updateAccount) {\n                updateSnack({\n                    message: \"successfully updated account\",\n                    severity: \"success\",\n                })\n            }\n        },\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n        refetchQueries: [{query: MeDocument}],\n    })\n\n    const onSubmitAccount = useCallback(\n        (args: MutationUpdateAccountArgs) => {\n            mutate({\n                variables: removeNested(args, \".password.confirmPassword\"),\n            })\n        },\n        [mutate],\n    )\n\n    const onSubmit = useCallback(\n        async (\n            args: MutationUpdateAccountArgs & {\n                password?: {confirmPassword: string}\n            },\n        ) => {\n            if (isPasswordUpdate && args.password) {\n                if (\n                    args.password.newPassword === args.password.confirmPassword\n                ) {\n                    onSubmitAccount(args)\n                } else {\n                    updateSnack({message: \"passwords do not match\"})\n                }\n            } else {\n                onSubmitAccount({...args, password: undefined})\n            }\n        },\n        [onSubmitAccount, updateSnack, isPasswordUpdate],\n    )\n\n    const updatePage = useCallback(\n        (user: User) => {\n            return (\n                <AccountUpdatePageView\n                    changeIsPasswordUpdate={changeIsPasswordUpdate}\n                    user={user}\n                    isPasswordUpdate={isPasswordUpdate}\n                    onSubmit={onSubmit}\n                />\n            )\n        },\n        [isPasswordUpdate, onSubmit],\n    )\n\n    return (\n        <PageComponent\n            showFooter\n            title=\"Update Account\"\n            rolePages={[\n                {\n                    component: updatePage,\n                    role: \"Volunteer\",\n                },\n                {\n                    component: updatePage,\n                    role: \"Submitter\",\n                },\n            ]}>\n            <WrongPageComponent text=\"Must be signed in to update account\" />\n        </PageComponent>\n    )\n}\n","import * as React from \"react\"\nimport {MarkdownComponent} from \"../components/markdown\"\nimport {PageComponent} from \"../components/page\"\n\nexport interface ContactPageProps {}\nexport const ContactPage: React.FC<ContactPageProps> = () => (\n    <PageComponent showFooter title=\"Contact\">\n        <MarkdownComponent url=\"contact.md\" />\n    </PageComponent>\n)\n","import React from \"react\"\nimport {PageComponent} from \"../components/page\"\nimport {WrongPageComponent} from \"../components/wrong-page\"\nimport {SubmissionSortContainer, VolunteerSubmissions} from \"./submissions\"\n\nexport interface FindPageViewProps {}\nexport const FindPageView: React.FC<FindPageViewProps> = () => {\n    return (\n        <div style={{padding: 10}}>\n            <VolunteerSubmissions />\n        </div>\n    )\n}\n\nexport interface FindPageProps {}\nexport const FindPage: React.FC<FindPageProps> = () => {\n    return (\n        <SubmissionSortContainer.Provider>\n            <div>\n                <PageComponent\n                    disableHide={false}\n                    showFooter\n                    title=\"Home\"\n                    rolePages={[\n                        {\n                            component: () => <FindPageView />,\n                            role: \"Volunteer\",\n                        },\n                    ]}>\n                    <WrongPageComponent text=\"Must be signed in as Volunteer to view submissions\" />\n                </PageComponent>\n                <br />\n            </div>\n        </SubmissionSortContainer.Provider>\n    )\n}\n","import {\n    createStyles,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemText,\n    makeStyles,\n    Theme,\n} from \"@material-ui/core\"\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\"\nimport * as clipboard from \"clipboard-polyfill\"\nimport React from \"react\"\nimport {useSnack} from \"../hooks\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        list: {\n            backgroundColor: theme.palette.background.paper,\n        },\n    }),\n)\n\nexport interface InfoListItem {\n    action:\n        | {type: \"copy\"; value?: string} // if value is undefined used then copy description\n        | {callback: (id?: string) => void; type: \"callback\"}\n    actionItem?: JSX.Element\n    description: string | number | Date\n    id?: string\n    image?: string\n    name: string\n}\n\nexport interface InfoListComponentProps {\n    items: InfoListItem[]\n    style?: React.CSSProperties\n}\nexport const InfoListComponent: React.FC<InfoListComponentProps> = ({\n    items,\n    style,\n}) => {\n    const classes = useStyles()\n    const {updateSnack} = useSnack()\n\n    return (\n        <List\n            component=\"nav\"\n            aria-labelledby=\"nested-list-subheader\"\n            style={style}\n            className={classes.list}>\n            {items.map(({action, actionItem, description, id, image, name}) => {\n                return (\n                    <ListItem\n                        button\n                        onClick={() => {\n                            if (action.type === \"copy\") {\n                                clipboard.writeText(\n                                    action.value || String(description),\n                                )\n\n                                updateSnack({\n                                    message: \"copied to clipboard\",\n                                    severity: \"info\",\n                                })\n                            } else {\n                                action.callback(id)\n                            }\n                        }}\n                        key={name}>\n                        {image && (\n                            <ListItemAvatar>\n                                <img\n                                    style={{\n                                        // height: 150,\n                                        marginRight: 10,\n                                        width: 150,\n                                    }}\n                                    src={image}\n                                    alt={image}\n                                />\n                            </ListItemAvatar>\n                        )}\n                        <ListItemText\n                            primaryTypographyProps={{style: {fontSize: \"120%\"}}}\n                            primary={name}\n                            secondary={String(description)}\n                        />\n                        {actionItem && (\n                            <ListItemSecondaryAction>\n                                {actionItem}\n                            </ListItemSecondaryAction>\n                        )}\n                    </ListItem>\n                )\n            })}\n        </List>\n    )\n}\n","import Step from \"@material-ui/core/Step\"\nimport StepConnector from \"@material-ui/core/StepConnector\"\nimport {StepIconProps} from \"@material-ui/core/StepIcon\"\nimport StepLabel from \"@material-ui/core/StepLabel\"\nimport Stepper from \"@material-ui/core/Stepper\"\nimport {\n    createStyles,\n    makeStyles,\n    Theme,\n    withStyles,\n} from \"@material-ui/core/styles\"\nimport clsx from \"clsx\"\nimport React, {useCallback, useEffect, useMemo} from \"react\"\nimport {theme} from \"./theme\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        button: {\n            marginRight: theme.spacing(1),\n        },\n        instructions: {\n            marginBottom: theme.spacing(1),\n            marginTop: theme.spacing(1),\n        },\n        root: {\n            width: \"100%\",\n        },\n    }),\n)\n\nexport interface StepperStep {\n    icon: JSX.Element\n    label: string\n}\n\nexport interface CustomizedSteppersProps {\n    colors?: {color1: string; color2: string; color3: string}\n    currentStep: number\n    steps: StepperStep[]\n}\nexport const CustomizedSteppers: React.FC<CustomizedSteppersProps> = ({\n    steps,\n    currentStep,\n    colors: {color1, color2, color3} = {\n        color1: theme.palette.primary.main,\n        color2: theme.palette.primary.main,\n        color3: theme.palette.primary.main,\n    },\n}) => {\n    const classes = useStyles()\n    const [activeStep, setActiveStep] = React.useState(1)\n\n    const ColorLibConnector = useMemo(() => {\n        return withStyles({\n            active: {\n                \"& $line\": {\n                    backgroundImage: `linear-gradient( 95deg,${color1} 0%,${color2} 50%,${color3} 100%)`,\n                },\n            },\n            alternativeLabel: {\n                top: 22,\n            },\n            completed: {\n                \"& $line\": {\n                    backgroundImage: `linear-gradient( 95deg,${color1} 0%,${color2} 50%,${color3} 100%)`,\n                },\n            },\n            line: {\n                backgroundColor: \"#eaeaf0\",\n                border: 0,\n                borderRadius: 1,\n                height: 3,\n            },\n        })(StepConnector)\n    }, [color1, color2, color3])\n\n    const icons: {[index: string]: React.ReactElement} = useMemo(() => {\n        const object: {[key: number]: React.ReactElement} = {}\n        steps.forEach((step, i) => {\n            object[i + 1] = step.icon\n        })\n        return object\n    }, [steps])\n\n    const ColorLibStepIcon = useCallback(\n        (props: StepIconProps) => {\n            const classes = makeStyles({\n                active: {\n                    backgroundImage: `linear-gradient( 136deg, ${color1} 0%, ${color2} 50%, ${color3} 100%)`,\n                    boxShadow: \"0 4px 10px 0 rgba(0,0,0,.25)\",\n                },\n                completed: {\n                    backgroundImage: `linear-gradient( 136deg, ${color1} 0%, ${color2} 50%, ${color3} 100%)`,\n                },\n                root: {\n                    alignItems: \"center\",\n                    backgroundColor: \"#ccc\",\n                    borderRadius: \"50%\",\n                    color: \"#fff\",\n                    display: \"flex\",\n                    height: 50,\n                    justifyContent: \"center\",\n                    width: 50,\n                    zIndex: 1,\n                },\n            })()\n            const {active, completed} = props\n\n            return (\n                <div\n                    className={clsx(classes.root, {\n                        [classes.active]: active,\n                        [classes.completed]: completed,\n                    })}>\n                    {icons[String(props.icon)]}\n                </div>\n            )\n        },\n        [color1, color2, color3, icons],\n    )\n\n    useEffect(() => {\n        setActiveStep(currentStep)\n    }, [currentStep])\n    return (\n        <div className={classes.root}>\n            <Stepper\n                alternativeLabel\n                activeStep={activeStep}\n                connector={<ColorLibConnector />}>\n                {steps.map((step) => (\n                    <Step key={step.label}>\n                        <StepLabel StepIconComponent={ColorLibStepIcon}>\n                            {step.label}\n                        </StepLabel>\n                    </Step>\n                ))}\n            </Stepper>\n        </div>\n    )\n}\n","import {Link} from \"@material-ui/core\"\nimport Card from \"@material-ui/core/Card\"\nimport CardContent from \"@material-ui/core/CardContent\"\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\"\nimport Typography from \"@material-ui/core/Typography\"\nimport React from \"react\"\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        card: {\n            alignItems: \"column\",\n            display: \"flex\",\n            textDecoration: \"none\",\n        },\n        content: {\n            flex: \"1 0 auto\",\n        },\n        details: {\n            display: \"flex\",\n            flexDirection: \"column\",\n        },\n\n        image: {\n            display: \"flex\",\n            flex: 1,\n            justifyContent: \"center\",\n            marginTop: 10,\n        },\n\n        link: {\n            textDecoration: \"none\",\n        },\n    }),\n)\n\nexport interface CardOptionComponentProps {\n    path: string\n    subtitle: string\n    title: string\n}\n\nexport const CardOptionComponent: React.FunctionComponent<CardOptionComponentProps> = ({\n    path,\n    subtitle,\n    title,\n}) => {\n    const classes = useStyles()\n\n    return (\n        <Link href={path}>\n            <Card className={classes.card}>\n                <div className={classes.details}>\n                    <CardContent className={classes.content}>\n                        <Typography component=\"h3\" variant=\"h5\">\n                            {title}\n                        </Typography>\n                        <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                            {subtitle}\n                        </Typography>\n                    </CardContent>\n                </div>\n            </Card>\n        </Link>\n    )\n}\n","import {Grid, Grow} from \"@material-ui/core\"\nimport {makeStyles} from \"@material-ui/styles\"\nimport * as React from \"react\"\nimport {CardOptionComponent} from \"../components/card-option\"\nimport {PageComponent} from \"../components/page\"\n\nconst useStyles = makeStyles(() => ({\n    container: {\n        display: \"flex\",\n        flexGrow: 1,\n        justifyContent: \"center\",\n        padding: 10,\n    },\n}))\n\nexport interface LegalPageProps {}\nexport const LegalPage: React.FC<LegalPageProps> = () => {\n    const classes = useStyles()\n    return (\n        <PageComponent showFooter title=\"Legal\">\n            <div className={classes.container}>\n                {/* End hero unit */}\n                <Grid container spacing={4}>\n                    <Grid item xs={12} sm={6} md={4}>\n                        <Grow timeout={500} in>\n                            <div>\n                                <CardOptionComponent\n                                    title=\"Terms of Service\"\n                                    subtitle=\"Everything regarding how you can use the platform\"\n                                    path=\"/legal/terms-of-service\"\n                                />\n                            </div>\n                        </Grow>\n                    </Grid>\n\n                    <Grid item xs={12} sm={6} md={4}>\n                        <Grow timeout={1000} in>\n                            <div>\n                                <CardOptionComponent\n                                    title=\"Privacy Policy\"\n                                    subtitle=\"Everything regarding how we handle your data\"\n                                    path=\"/legal/privacy-policy\"\n                                />\n                            </div>\n                        </Grow>\n                    </Grid>\n\n                    <Grid item xs={12} sm={6} md={4}>\n                        <Grow timeout={1000} in>\n                            <div>\n                                <CardOptionComponent\n                                    title=\"Disclaimer\"\n                                    subtitle=\"Everything regarding Disclaimer\"\n                                    path=\"/legal/disclaimer\"\n                                />\n                            </div>\n                        </Grow>\n                    </Grid>\n                </Grid>\n            </div>\n        </PageComponent>\n    )\n}\n","import * as React from \"react\"\nimport {useState} from \"react\"\nimport {MarkdownComponent} from \"../../components/markdown\"\nimport {PageComponent} from \"../../components/page\"\n\nexport interface DisclaimerPageProps {}\nexport const DisclaimerPage: React.FC<DisclaimerPageProps> = () => {\n    const [showFooter, changeShowFooter] = useState<boolean>()\n    return (\n        <PageComponent\n            disableHide={false}\n            showFooter={showFooter}\n            title=\"Disclaimer\">\n            <MarkdownComponent\n                onFinish={() => changeShowFooter(true)}\n                url=\"disclaimer.md\"\n            />\n        </PageComponent>\n    )\n}\n","import * as React from \"react\"\nimport {useState} from \"react\"\nimport {MarkdownComponent} from \"../../components/markdown\"\nimport {PageComponent} from \"../../components/page\"\n\nexport interface FaqPageProps {}\nexport const FaqPage: React.FC<FaqPageProps> = () => {\n    const [showFooter, changeShowFooter] = useState<boolean>()\n    return (\n        <PageComponent disableHide={false} showFooter={showFooter} title=\"FAQ\">\n            <MarkdownComponent\n                onFinish={() => changeShowFooter(true)}\n                url=\"faq.md\"\n            />\n        </PageComponent>\n    )\n}\n","import * as React from \"react\"\nimport {useState} from \"react\"\nimport {MarkdownComponent} from \"../../components/markdown\"\nimport {PageComponent} from \"../../components/page\"\n\nexport interface PrivacyPolicyPageProps {}\nexport const PrivacyPolicyPage: React.FC<PrivacyPolicyPageProps> = () => {\n    const [showFooter, changeShowFooter] = useState<boolean>()\n    return (\n        <PageComponent\n            disableHide={false}\n            showFooter={showFooter}\n            title=\"Privacy Policy\">\n            <MarkdownComponent\n                onFinish={() => changeShowFooter(true)}\n                url=\"privacy-policy.md\"\n            />\n        </PageComponent>\n    )\n}\n","import * as React from \"react\"\nimport {useState} from \"react\"\nimport {MarkdownComponent} from \"../../components/markdown\"\nimport {PageComponent} from \"../../components/page\"\n\nexport interface TermsOfServicePageProps {}\nexport const TermsOfServicePage: React.FC<TermsOfServicePageProps> = () => {\n    const [showFooter, changeShowFooter] = useState<boolean>()\n    return (\n        <PageComponent\n            disableHide={false}\n            showFooter={showFooter}\n            title=\"Terms of Service\">\n            <MarkdownComponent\n                onFinish={() => changeShowFooter(true)}\n                url=\"terms-of-service.md\"\n            />\n        </PageComponent>\n    )\n}\n","import Paper from \"@material-ui/core/Paper\"\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\"\nimport Table from \"@material-ui/core/Table\"\nimport TableBody from \"@material-ui/core/TableBody\"\nimport TableCell from \"@material-ui/core/TableCell\"\nimport TableContainer from \"@material-ui/core/TableContainer\"\nimport TableHead from \"@material-ui/core/TableHead\"\nimport TablePagination from \"@material-ui/core/TablePagination\"\nimport TableRow from \"@material-ui/core/TableRow\"\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\"\nimport Typography from \"@material-ui/core/Typography\"\nimport React from \"react\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        paper: {\n            marginBottom: theme.spacing(2),\n            width: \"100%\",\n        },\n\n        root: {\n            width: \"100%\",\n        },\n\n        table: {\n            maxHeight: 500,\n        },\n\n        visuallyHidden: {\n            border: 0,\n            clip: \"rect(0 0 0 0)\",\n            height: 1,\n            margin: -1,\n            overflow: \"hidden\",\n            padding: 0,\n            position: \"absolute\",\n            top: 20,\n            width: 1,\n        },\n    }),\n)\n\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1\n    }\n    return 0\n}\n\ntype Order = \"asc\" | \"desc\"\n\nconst getComparator = <T extends object>(\n    order: Order,\n    orderBy: keyof T,\n): ((a: T, b: T) => number) =>\n    order === \"desc\"\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy)\n\nfunction stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\n    const stabilizedThis = array.map((el, index) => [el, index] as [T, number])\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0])\n        if (order !== 0) return order\n        return a[1] - b[1]\n    })\n    return stabilizedThis.map((el) => el[0])\n}\n\nexport interface HeadCell<T> {\n    disablePadding: boolean\n    id: keyof T\n    label: string\n    numeric: boolean\n}\n\ninterface EnhancedTableHeadProps<T> {\n    classes: ReturnType<typeof useStyles>\n    headCells: HeadCell<T>[]\n    onRequestSort: (event: React.MouseEvent<unknown>, property: keyof T) => void\n    order: Order\n    orderBy: keyof T\n}\n\nfunction EnhancedTableHead<T>(props: EnhancedTableHeadProps<T>) {\n    const {classes, headCells, onRequestSort, order, orderBy} = props\n    const createSortHandler = (property: keyof T) => (\n        event: React.MouseEvent<unknown>,\n    ) => {\n        onRequestSort(event, property)\n    }\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\" />\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={String(headCell.id)}\n                        align={headCell.numeric ? \"right\" : \"left\"}\n                        padding={headCell.disablePadding ? \"none\" : \"default\"}\n                        sortDirection={orderBy === headCell.id ? order : false}>\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : \"asc\"}\n                            onClick={createSortHandler(headCell.id)}>\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                                    {order === \"desc\"\n                                        ? \"sorted descending\"\n                                        : \"sorted ascending\"}\n                                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    )\n}\n\ninterface EnhancedTableToolbarProps {\n    title: string\n    toolbarBarItems?: JSX.Element[]\n}\n\nconst EnhancedTableToolbar = ({\n    title,\n    toolbarBarItems = [],\n}: EnhancedTableToolbarProps) => {\n    return (\n        <div style={{display: \"flex\", flexDirection: \"row\"}}>\n            <div style={{flex: 0.99, margin: 20}}>\n                <Typography\n                    style={{textAlign: \"start\"}}\n                    variant=\"h6\"\n                    id=\"tableTitle\">\n                    {title}\n                </Typography>\n            </div>\n\n            <div style={{flex: 0.01, margin: 20}}>{toolbarBarItems}</div>\n        </div>\n    )\n}\n\nexport interface EnhancedTableProps<T extends ComparableObject> {\n    customItems?: ((object: T) => JSX.Element | null)[]\n    headCells: HeadCell<T>[]\n    initialOrderProperty: keyof T\n    nameProperty: keyof T\n    onRowClick: (row: T) => void\n    rows: T[]\n    title: string\n    toolbarBarItems?: JSX.Element[]\n}\nexport type ComparableObject = {[key: string]: number | string | Date}\nexport function EnhancedTable<T extends ComparableObject>({\n    initialOrderProperty,\n    nameProperty,\n    rows,\n    headCells,\n    title,\n    onRowClick,\n    customItems = [],\n    toolbarBarItems = [],\n}: EnhancedTableProps<T>) {\n    const classes = useStyles()\n    const [order, setOrder] = React.useState<Order>(\"desc\")\n    const [orderBy, setOrderBy] = React.useState<keyof T>(initialOrderProperty)\n    const [page, setPage] = React.useState(0)\n    const [rowsPerPage, setRowsPerPage] = React.useState(5)\n\n    const handleRequestSort = (property: keyof T) => {\n        const isAsc = orderBy === property && order === \"asc\"\n        setOrder(isAsc ? \"desc\" : \"asc\")\n        setOrderBy(property)\n    }\n\n    const handleChangePage = (newPage: number) => {\n        setPage(newPage)\n    }\n\n    const handleChangeRowsPerPage = (\n        event: React.ChangeEvent<HTMLInputElement>,\n    ) => {\n        setRowsPerPage(parseInt(event.target.value, 10))\n        setPage(0)\n    }\n\n    const emptyRows =\n        rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage)\n\n    return (\n        <div className={classes.root}>\n            <Paper className={classes.paper}>\n                <EnhancedTableToolbar\n                    title={title}\n                    toolbarBarItems={toolbarBarItems}\n                />\n                <TableContainer className={classes.table}>\n                    <Table\n                        aria-labelledby=\"tableTitle\"\n                        size=\"medium\"\n                        aria-label=\"enhanced table\">\n                        <EnhancedTableHead\n                            headCells={headCells}\n                            classes={classes}\n                            order={order}\n                            orderBy={orderBy}\n                            onRequestSort={(_, property) =>\n                                handleRequestSort(property)\n                            }\n                        />\n                        <TableBody>\n                            {stableSort(rows, getComparator<T>(order, orderBy))\n                                .slice(\n                                    page * rowsPerPage,\n                                    page * rowsPerPage + rowsPerPage,\n                                )\n                                .map((row) => {\n                                    return (\n                                        <TableRow\n                                            hover\n                                            tabIndex={-1}\n                                            key={String(\n                                                row.id || row[nameProperty],\n                                            )}>\n                                            <TableCell\n                                                style={{paddingRight: 10}}\n                                                component=\"th\"\n                                                scope=\"row\"\n                                                padding=\"checkbox\">\n                                                {customItems.map(\n                                                    (customItem) => {\n                                                        return customItem(row)\n                                                    },\n                                                )}\n                                            </TableCell>\n\n                                            <TableCell\n                                                onClick={() => onRowClick(row)}\n                                                component=\"th\"\n                                                scope=\"row\"\n                                                padding=\"none\">\n                                                {row[nameProperty]}\n                                            </TableCell>\n                                            {headCells\n                                                .filter((property) => {\n                                                    return (\n                                                        property.id !==\n                                                        nameProperty\n                                                    )\n                                                })\n                                                .map((rowName) => {\n                                                    return (\n                                                        <TableCell\n                                                            key={rowName.id.toString()}\n                                                            align=\"right\">\n                                                            {row[rowName.id]}\n                                                        </TableCell>\n                                                    )\n                                                })}\n                                        </TableRow>\n                                    )\n                                })}\n                            {emptyRows > 0 && (\n                                <TableRow style={{height: 53 * emptyRows}}>\n                                    <TableCell colSpan={6} />\n                                </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[5, 10, 20, 30]}\n                    component=\"div\"\n                    count={rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={(_, page) => handleChangePage(page)}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n        </div>\n    )\n}\n","export const downloadString = (\n    text: string,\n    fileType: string,\n    fileName: string,\n) => {\n    const blob = new Blob([text], {type: fileType})\n    const a = document.createElement(\"a\")\n    a.download = fileName\n    a.href = URL.createObjectURL(blob)\n    a.dataset.downloadurl = [fileType, a.download, a.href].join(\":\")\n    a.style.display = \"none\"\n    document.body.appendChild(a)\n    a.click()\n    document.body.removeChild(a)\n    setTimeout(() => {\n        URL.revokeObjectURL(a.href)\n    }, 1500)\n}\n","/* eslint-disable no-restricted-globals */\n\nimport {assert} from \"@dynamo/common\"\nimport {\n    Button,\n    Card,\n    CardContent,\n    createStyles,\n    makeStyles,\n    Typography,\n} from \"@material-ui/core\"\nimport CardMedia from \"@material-ui/core/CardMedia\"\nimport CloudDownloadIcon from \"@material-ui/icons/CloudDownload\"\nimport React, {useCallback, useMemo, useState} from \"react\"\nimport {createContainer, useContainer} from \"unstated-next\"\nimport {FileItemPreview} from \"../components/file-item-preview\"\nimport {FormComponent, FormItem} from \"../components/form/form\"\nimport {InfoListComponent, InfoListItem} from \"../components/info-list\"\nimport {ModalComponent} from \"../components/modal\"\nimport {PageComponent, RolePage} from \"../components/page\"\nimport {ComparableObject, EnhancedTable, HeadCell} from \"../components/table\"\nimport {WrongPageComponent} from \"../components/wrong-page\"\nimport {\n    File,\n    Job,\n    JobProgress,\n    JobType,\n    Submission,\n    useCancelSubmissionMutation,\n    useCreateNewJobFromSubmissionMutation,\n    useMeQuery,\n    UserType,\n    useSubmissionJobsQuery,\n    useSubmissionQuery,\n    useToggleJobReceivedMutation,\n} from \"../graphql/schema.generated\"\nimport {useDateFromNow, useQuery, useSnack} from \"../hooks\"\nimport {downloadString} from \"../services/download\"\nimport {jsonToCsv} from \"../services/jsonToCsv\"\nimport {goTo, goToNewTab} from \"../services/utils\"\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        submissionPageView: {\n            maxWidth: 1200,\n            minWidth: 500,\n            textAlign: \"center\",\n            width: \"50vw\",\n        },\n\n        viewOriginalSubmissionButton: {marginBottom: 35},\n    }),\n)\n\nconst headCells: HeadCell<Job>[] = [\n    {\n        disablePadding: true,\n        id: \"id\",\n        label: \"Job ID\",\n        numeric: false,\n    },\n    {disablePadding: true, id: \"quantity\", label: \"Quantity\", numeric: true},\n    {disablePadding: false, id: \"progress\", label: \"Progress\", numeric: true},\n    {disablePadding: false, id: \"type\", label: \"Type\", numeric: true},\n]\n\nexport interface SubmissionInfoProps {\n    submission: Submission\n}\nexport const SubmissionInfo: React.FC<SubmissionInfoProps> = ({\n    submission: {\n        address,\n        createdAt,\n        description,\n        distance,\n        files: {assemblyUrl},\n        id,\n        quantity,\n        submitter,\n    },\n}) => {\n    const date = useDateFromNow(createdAt)\n    return (\n        <InfoListComponent\n            items={\n                [\n                    {\n                        action: {type: \"copy\"},\n                        description: id,\n                        name: \"Id\",\n                    },\n                    {\n                        action: {type: \"copy\"},\n                        description: quantity,\n                        name: \"Quantity\",\n                    },\n                    {\n                        action: {type: \"copy\"},\n                        description: date,\n                        name: \"Created\",\n                    },\n                    {\n                        action: {type: \"copy\"},\n                        description: description ?? \"N/A\",\n                        name: \"Description\",\n                    },\n\n                    {\n                        action: {\n                            callback: () => {\n                                if (assemblyUrl) {\n                                    goToNewTab(assemblyUrl)\n                                }\n                            },\n                            type: \"callback\",\n                        },\n                        description: assemblyUrl || \"N/A\",\n                        name: \"Assembly Information\",\n                    },\n\n                    {\n                        action: {type: \"copy\", value: submitter.email},\n                        description: `${submitter.firstName} ${submitter.lastName} <${submitter.email}>`,\n                        name: \"Submitter\",\n                    },\n                    {\n                        action: {type: \"copy\"},\n                        description: address,\n                        name: `Shipping Address (Distance: ${distance.toFixed(\n                            1,\n                        )} miles)`,\n                    },\n                ] as InfoListItem[]\n            }\n        />\n    )\n}\n\nconst useMyUserType = () => {\n    const {data, loading} = useMeQuery()\n    if (loading) {\n        return undefined\n    }\n    assert(data?.me, `Couldn't load my user`)\n    return data.me.user.type\n}\n\nexport interface SubmissionActionsProps {\n    submission: Submission\n}\nexport const SubmissionActions: React.FC<SubmissionActionsProps> = ({\n    submission,\n}) => {\n    const {id, name} = submission\n    const userType = useMyUserType()\n\n    const {updateSnack} = useSnack()\n    const [cancel] = useCancelSubmissionMutation({\n        onCompleted: (cancelResponse) => {\n            if (cancelResponse.cancelSubmission) {\n                goTo(\"/\")\n            }\n        },\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n        variables: {id},\n    })\n    const onRemoveSubmission = useCallback(() => {\n        // eslint-disable-next-line no-alert\n        if (!confirm(`Are you sure you want to remove submission \"${name}\"?`)) {\n            return\n        }\n        cancel()\n    }, [cancel, name])\n\n    switch (userType) {\n        case \"Submitter\":\n            return (\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={onRemoveSubmission}>\n                    Remove Submission\n                </Button>\n            )\n        case \"Volunteer\":\n            return <CreateNewJobModal {...{submission}} />\n        default:\n            return <div>Loading...</div>\n    }\n}\n\nexport interface SubmissionTitleProps {\n    submission: Submission\n}\nexport const SubmissionTitle: React.FC<SubmissionTitleProps> = ({\n    submission: {\n        createdAt,\n        files: {preview},\n        name,\n    },\n}) => {\n    const date = useDateFromNow(createdAt)\n\n    return (\n        <div>\n            <Typography component=\"h5\" variant=\"h5\">\n                {name}\n            </Typography>\n            <Typography variant=\"subtitle1\">{date}</Typography>\n            {preview && (\n                <CardMedia\n                    style={{borderRadius: 20, marginTop: 10}}\n                    component=\"img\"\n                    image={preview.presignedUrl}\n                    title={name}\n                />\n            )}\n        </div>\n    )\n}\n\nexport interface SubmissionPageViewProps {\n    showJobs?: boolean\n    submission: Submission\n}\nexport const SubmissionPageView: React.FC<SubmissionPageViewProps> = ({\n    showJobs = false,\n    submission,\n}) => {\n    const classes = useStyles()\n\n    return (\n        <div className={classes.submissionPageView}>\n            <Card>\n                <CardContent>\n                    <SubmissionTitle {...{submission}} />\n\n                    {showJobs && <SubmissionJobs {...{submission}} />}\n                    <FileItemPreview\n                        items={[\n                            ...submission.files.modelFiles.map((file) => {\n                                return {file, type: \"stl\" as \"stl\"}\n                            }),\n                            ...submission.files.laserCuttingFiles.map(\n                                (file) => {\n                                    return {file, type: \"dxf\" as \"dxf\"}\n                                },\n                            ),\n                        ]}\n                    />\n                    <SubmissionInfo {...{submission}} />\n                    <SubmissionActions {...{submission}} />\n                </CardContent>\n            </Card>\n        </div>\n    )\n}\n\nexport interface SubmissionPageProps {}\nexport const SubmissionPage: React.FC<SubmissionPageProps> = () => {\n    const {updateSnack} = useSnack()\n    const id = useQuery().get(\"id\")\n\n    assert(id, `Submission id must be set.`)\n\n    const {data} = useSubmissionQuery({\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n        variables: {id},\n    })\n\n    const submissionPage = useCallback(\n        (userType: UserType, showJobs?: boolean): RolePage => ({\n            component: () => (\n                <div style={{display: \"flex\", justifyContent: \"center\"}}>\n                    {data?.submission && (\n                        <SubmissionPageView\n                            submission={data?.submission}\n                            {...{showJobs}}\n                        />\n                    )}\n                </div>\n            ),\n            role: userType,\n        }),\n        [data],\n    )\n\n    return (\n        <SubmissionFilesContainer.Provider>\n            <PageComponent\n                disableHide={false}\n                showFooter\n                title=\"Submission\"\n                rolePages={[\n                    submissionPage(\"Submitter\", true),\n                    submissionPage(\"Volunteer\"),\n                ]}>\n                <WrongPageComponent text=\"Must be signed in to view Job\" />\n            </PageComponent>\n        </SubmissionFilesContainer.Provider>\n    )\n}\n\nconst SubmissionFilesContainer = createContainer(() => {\n    const [jobType, setJobType] = useState<JobType>(\"Printing\")\n\n    return {jobType, setJobType}\n})\n\nexport interface SubmissionSelectorProps {\n    label: string\n    submission: Submission\n}\nexport const SubmissionSelector: React.FC<SubmissionSelectorProps> = ({\n    label,\n    submission,\n}) => {\n    const {jobType} = useContainer(SubmissionFilesContainer)\n\n    const [files, renderType] = useMemo(() => {\n        switch (jobType) {\n            case \"LaserCutting\":\n                return [submission.files.laserCuttingFiles, \"dxf\"] as const\n            case \"Printing\":\n                return [submission.files.modelFiles, \"stl\"] as const\n            default:\n                return [[] as File[], undefined] as const\n        }\n    }, [submission.files, jobType])\n\n    if (renderType === undefined) {\n        return null\n    }\n\n    return (\n        <>\n            <Typography gutterBottom>{label}</Typography>\n            <FileItemPreview\n                items={files.map((file) => {\n                    return {file, type: renderType}\n                })}\n            />\n        </>\n    )\n}\n\n/**\n * TODO: There is currently a bug that exists which is not worth fixing at the moment.\n * When you create a job, the max value of the job type doesn't update.\n *\n * To reproduce, create a job from a submission where the # of laser cutting quantity needed is less than model quantity.\n * Then, go to the model quantity and set the quantity to max, then change the type of the job.\n * The internal state will hold the previous job type.\n */\nexport interface CreateNewJobModalProps {\n    submission: Submission\n}\nexport const CreateNewJobModal: React.FC<CreateNewJobModalProps> = ({\n    submission,\n}) => {\n    const {jobType, setJobType} = useContainer(SubmissionFilesContainer)\n\n    const laserCutterOption = submission.files.laserCuttingFiles?.length\n        ? {LaserCutting: \"Laser Cutting\"}\n        : {}\n    const printingOption = submission.files.modelFiles?.length\n        ? {Printing: \"3D Printing\"}\n        : {}\n\n    const maxQuantity = useMemo(() => {\n        switch (jobType) {\n            case \"LaserCutting\":\n                return submission.progress.laserCuttingQuantity\n            case \"Printing\":\n                return submission.progress.modelQuantity\n            default:\n                return submission.quantity\n        }\n    }, [jobType, submission.progress, submission.quantity])\n    const submitFormItems = useMemo<FormItem[]>(\n        () =>\n            [\n                {\n                    alignment: {xs: 12},\n                    defaultValue: submission.files.laserCuttingFiles?.length\n                        ? \"LaserCutting\"\n                        : \"Printing\",\n                    id: \".type\",\n                    label: \"Job Type\",\n                    options: {\n                        ...laserCutterOption,\n                        ...printingOption,\n                    },\n                    required: true,\n                    type: \"select\",\n                },\n                {\n                    alignment: {xs: 12},\n                    id: \".models\",\n                    label: \"Model Preview...\",\n                    render: ({label}) => (\n                        <SubmissionSelector {...{label, submission}} />\n                    ),\n                    type: \"custom\",\n                },\n                {\n                    alignment: {xs: 12},\n                    defaultValue: 5,\n                    ending: \"Parts\",\n                    id: \".quantity\",\n                    label: \"Quantity\",\n                    max: maxQuantity,\n                    min: 1,\n                    step: 1,\n                    type: \"slider\",\n                },\n            ] as FormItem[],\n        [laserCutterOption, maxQuantity, printingOption, submission],\n    )\n\n    const [mutate] = useCreateNewJobFromSubmissionMutation({\n        onCompleted: ({createNewJobFromSubmission: {id}}) => {\n            goTo(`/job/?id=${id}`)\n        },\n    })\n    const onSubmit = useCallback(\n        ({quantity}: {quantity: number}) => {\n            assert(jobType, `Job type must be set!`)\n\n            mutate({\n                variables: {\n                    id: submission.id,\n                    quantity,\n                    type: jobType,\n                },\n            })\n        },\n        [jobType, mutate, submission.id],\n    )\n\n    const onUpdate = useCallback(\n        (id: string, value: unknown) => {\n            if (id !== \".type\" || !value) {\n                return\n            }\n            assert(\n                value === \"LaserCutting\" || value === \"Printing\",\n                `Invalid job type: ${value}`,\n            )\n\n            setJobType(value)\n        },\n        [setJobType],\n    )\n\n    return (\n        <ModalComponent title=\"Create New Job\">\n            <FormComponent\n                submitButtonTitle=\"Create New Job\"\n                formItems={submitFormItems}\n                {...{onSubmit, onUpdate}}\n            />\n        </ModalComponent>\n    )\n}\n\nexport interface MarkAsReceivedButtonProps {\n    id: string\n    progress: JobProgress\n}\nexport const MarkAsReceivedButton: React.FC<MarkAsReceivedButtonProps> = ({\n    id,\n    progress,\n}) => {\n    const {updateSnack} = useSnack()\n    const [mutate] = useToggleJobReceivedMutation({\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n        variables: {id},\n    })\n\n    return (\n        <Button\n            variant=\"contained\"\n            color={progress === \"Shipped\" ? \"primary\" : \"secondary\"}\n            onClick={() => mutate()}>\n            {progress === \"Shipped\" ? \"Received\" : \"Undo\"}\n        </Button>\n    )\n}\n\nexport interface SubmissionJobsProps {\n    submission: Submission\n}\nexport const SubmissionJobs: React.FC<SubmissionJobsProps> = ({\n    submission: {id, name},\n}) => {\n    const {data, loading} = useSubmissionJobsQuery({variables: {id}})\n    if (loading) {\n        return <div>Loading...</div>\n    }\n    assert(data?.submissionJobs, `Couldn't get submitted jobs!`)\n\n    return (\n        <div style={{marginTop: 20}}>\n            <EnhancedTable\n                initialOrderProperty=\"createdAt\"\n                nameProperty=\"id\"\n                customItems={[\n                    ({id, progress}: ComparableObject) => {\n                        assert(typeof id === \"string\", \"invalid id\")\n                        assert(typeof progress === \"string\", \"invalid progress\")\n\n                        if (progress === \"Shipped\" || progress === \"Received\") {\n                            return <MarkAsReceivedButton {...{id, progress}} />\n                        }\n                        return null\n                    },\n                ]}\n                toolbarBarItems={[\n                    <Button\n                        key=\"export\"\n                        onClick={() => {\n                            downloadString(\n                                jsonToCsv(data.submissionJobs, (value) => {\n                                    return value?.firstName && value?.lastName\n                                        ? `${value.firstName} ${String(\n                                              value.lastName.charAt(0),\n                                          ).toUpperCase()}`\n                                        : \"INFORMATION_REDACTED\"\n                                }),\n                                \"\",\n                                `${id}-${name}-JobExport.csv`,\n                            )\n                        }}\n                        style={{\n                            fontSize: 12,\n                            height: 35,\n                            width: 200,\n                        }}\n                        variant=\"contained\"\n                        startIcon={<CloudDownloadIcon />}\n                        color=\"default\">\n                        Export Jobs\n                    </Button>,\n                ]}\n                rows={(data.submissionJobs as unknown) as ComparableObject[]}\n                headCells={\n                    (headCells as unknown) as HeadCell<ComparableObject>[]\n                }\n                onRowClick={(row) => {\n                    goTo(`/job?id=${row.id}`)\n                }}\n                title=\"Accepted Jobs\"\n            />\n        </div>\n    )\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {removeIn} from \"./utils\"\n\nexport const jsonToCsv = (\n    objects: {[id: string]: any}[],\n    objectHandler?: (obj: {[id: string]: any}) => string,\n) => {\n    if (objects.length >= 1) {\n        const title = Object.keys(\n            removeIn(removeIn(objects[0], \"__typename\"), \"file\"),\n        ).join(\",\")\n        const values = objects\n            .map((object) =>\n                Object.values(removeIn(removeIn(object, \"__typename\"), \"file\")),\n            )\n            .map((values) =>\n                values\n                    .map((value) => {\n                        if (value) {\n                            switch (typeof value) {\n                                case \"object\":\n                                    if (objectHandler) {\n                                        return objectHandler(value)\n                                    }\n                                    return \"\"\n\n                                default:\n                                    return `\"${String(value).trim()}\"`\n                            }\n                        }\n                        return \"\"\n                    })\n                    .join(\",\"),\n            )\n            .join(\"\\n\")\n        return `${title}\\n${values}`\n    }\n    throw new Error(\"Must be greater than 0 elements in objects\")\n}\n","import {IconButton} from \"@material-ui/core\"\nimport DeleteIcon from \"@material-ui/icons/Delete\"\nimport ReplayIcon from \"@material-ui/icons/Replay\"\nimport hash from \"object-hash\"\nimport React, {useEffect} from \"react\"\nimport {IPreviewProps} from \"react-dropzone-uploader\"\nimport {useContainer} from \"unstated-next\"\nimport {removeNested, renderFileType} from \"../services/utils\"\nimport {FileRender, FileRenderStateContainer} from \"./file-renderer\"\n\nexport const FilePreview = ({\n    canCancel,\n    canRemove,\n    canRestart,\n    className,\n    extra: {multiple},\n    fileWithMeta: {\n        cancel,\n        file,\n        meta: {type},\n        remove,\n        restart,\n    },\n    files,\n    handleChange,\n    id,\n    meta,\n    style,\n}: IPreviewProps & {\n    handleChange: (value: File[] | File | undefined) => void\n    id: string\n}) => {\n    const {name, percent, status} = meta\n    const renderType = renderFileType(name)\n    const {changePreviewImage} = useContainer(FileRenderStateContainer)\n    const hashName = hash(`${file.name}-${file.size}`)\n    useEffect(() => {\n        if (status === \"done\") {\n            const allFiles = files.map((file) => file.file)\n            handleChange(multiple ? allFiles : allFiles[0])\n        }\n    }, [files, handleChange, multiple, status])\n\n    return (\n        <div className={className} style={style}>\n            {renderType && (\n                <FileRender\n                    id={id}\n                    name={hashName}\n                    width={200}\n                    height={200}\n                    type={renderType}\n                    source={\n                        type.startsWith(\"image/\")\n                            ? {type: \"url\", url: URL.createObjectURL(file)}\n                            : {file, type: \"file\"}\n                    }\n                />\n            )}\n            {name}\n            <div className=\"dzu-previewStatusContainer\">\n                {status !== \"done\" && (\n                    <progress\n                        max={100}\n                        value={status === \"headers_received\" ? 100 : percent}\n                    />\n                )}\n\n                {status === \"uploading\" && canCancel && (\n                    <IconButton\n                        color=\"primary\"\n                        onClick={cancel}\n                        aria-label=\"cancel\">\n                        <DeleteIcon />\n                    </IconButton>\n                )}\n                {status !== \"preparing\" &&\n                    status !== \"getting_upload_params\" &&\n                    status !== \"uploading\" &&\n                    canRemove && (\n                        <IconButton\n                            color=\"primary\"\n                            onClick={() => {\n                                if (files.length === 1) {\n                                    handleChange(multiple ? [] : undefined)\n                                }\n                                changePreviewImage((old) => {\n                                    return (\n                                        removeNested(\n                                            old,\n                                            `${id}.${hashName}`,\n                                        ) as never\n                                    )\n                                })\n                                remove()\n                            }}\n                            aria-label=\"remove\">\n                            <DeleteIcon />\n                        </IconButton>\n                    )}\n                {[\n                    \"error_upload_params\",\n                    \"exception_upload\",\n                    \"error_upload\",\n                    \"aborted\",\n                    \"ready\",\n                ].includes(status) &&\n                    canRestart && (\n                        <IconButton\n                            color=\"primary\"\n                            onClick={restart}\n                            aria-label=\"restart\">\n                            <ReplayIcon />\n                        </IconButton>\n                    )}\n            </div>\n        </div>\n    )\n}\n","import AppBar from \"@material-ui/core/AppBar\"\nimport Box from \"@material-ui/core/Box\"\nimport {makeStyles, Theme} from \"@material-ui/core/styles\"\nimport Tab from \"@material-ui/core/Tab\"\nimport Tabs from \"@material-ui/core/Tabs\"\nimport Typography from \"@material-ui/core/Typography\"\nimport React from \"react\"\n\ninterface TabPanelProps {\n    children?: React.ReactNode\n    index: number\n    value: number\n}\n\nfunction TabPanel(props: TabPanelProps) {\n    const {children, index, value, ...other} = props\n\n    return (\n        <Typography\n            component=\"div\"\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}>\n            {value === index && <Box p={3}>{children}</Box>}\n        </Typography>\n    )\n}\n\nconst tabProps = (index: number) => {\n    return {\n        \"aria-controls\": `simple-tabpanel-${index}`,\n        id: `simple-tab-${index}`,\n    }\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {\n        backgroundColor: theme.palette.background.paper,\n        flexGrow: 1,\n        marginTop: 10,\n        maxWidth: 1000,\n        minWidth: 200,\n        width: \"45vw\",\n    },\n}))\n\nexport interface TabView {\n    component: JSX.Element\n    name: string\n}\n\nexport interface TabsComponentProps {\n    currentTab?: number\n    style?: React.CSSProperties\n    tabs: TabView[]\n}\nexport const TabsComponent: React.FC<TabsComponentProps> = ({\n    currentTab = 0,\n    style,\n    tabs,\n}) => {\n    const classes = useStyles()\n    const [value, setValue] = React.useState(currentTab)\n\n    const handleChange = (_: React.ChangeEvent<{}>, newValue: number) => {\n        setValue(newValue)\n    }\n\n    return (\n        <div className={classes.root} style={style}>\n            <AppBar color=\"transparent\" position=\"static\">\n                <Tabs\n                    textColor=\"primary\"\n                    indicatorColor=\"primary\"\n                    value={value}\n                    onChange={handleChange}>\n                    {tabs.map(({name}, i) => {\n                        return (\n                            <Tab\n                                key={`${name}${i.toString()}`}\n                                label={name}\n                                {...tabProps(i)}\n                            />\n                        )\n                    })}\n                </Tabs>\n            </AppBar>\n            {tabs.map(({component}, i) => {\n                return (\n                    <TabPanel key={`${i.toString()}`} value={value} index={i}>\n                        {component}\n                    </TabPanel>\n                )\n            })}\n        </div>\n    )\n}\n","import {assert} from \"@dynamo/common\"\nimport {Button, Typography} from \"@material-ui/core\"\nimport Container from \"@material-ui/core/Container\"\nimport {makeStyles} from \"@material-ui/core/styles\"\nimport ImageIcon from \"@material-ui/icons/Image\"\nimport React, {useCallback, useMemo, useState} from \"react\"\nimport {createContainer, useContainer} from \"unstated-next\"\nimport {v4 as uuid} from \"uuid\"\nimport {FilePreview} from \"../../components/file-preview\"\nimport {FileRenderStateContainer} from \"../../components/file-renderer\"\nimport {FormComponent, FormItem} from \"../../components/form/form\"\nimport {InfoListComponent} from \"../../components/info-list\"\nimport {PageComponent} from \"../../components/page\"\nimport {TabsComponent} from \"../../components/tabs\"\nimport {WrongPageComponent} from \"../../components/wrong-page\"\nimport {\n    MedicalItem,\n    MutationCreateSubmissionArgs,\n    SubmissionFilesInput,\n    useCreateSubmissionMutation,\n    useMedicalItemsQuery,\n    User,\n} from \"../../graphql/schema.generated\"\nimport {useSnack} from \"../../hooks\"\nimport {dataURLtoFile, getNested, goTo} from \"../../services/utils\"\n\nexport const SubmissionStateContainer = createContainer(() => {\n    const [submission, changeSubmission] = useState<\n        Partial<MutationCreateSubmissionArgs>\n    >({})\n    const [step, changeStep] = useState<\"first\" | \"second\">(\"first\")\n    return {\n        changeStep,\n        changeSubmission,\n        step,\n        submission,\n    } as const\n})\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        alignItems: \"center\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        marginTop: theme.spacing(8),\n    },\n}))\n\nexport interface CreateSubmissionPageViewProps {\n    medicalItems: MedicalItem[]\n    onSubmit: (form: MutationCreateSubmissionArgs) => void\n    user: User\n}\n\nconst MAX_JOBS = 400\n\nexport interface SubmissionItemSelectProps {\n    medicalItems: MedicalItem[]\n}\nexport const SubmissionItemSelect: React.FC<SubmissionItemSelectProps> = ({\n    medicalItems,\n}) => {\n    const {\n        changeStep,\n        changeSubmission,\n        submission: {description, files, marketplaceId, name},\n    } = useContainer(SubmissionStateContainer)\n\n    const {updateSnack} = useSnack()\n    const onMarketplaceSelect = useCallback(\n        (id?: string) => {\n            changeSubmission({\n                marketplaceId: id,\n                name: medicalItems.find((item) => item.id === id)?.name,\n            })\n            changeStep(\"second\")\n        },\n        [changeStep, changeSubmission, medicalItems],\n    )\n\n    const onCustomSelect = useCallback(\n        (custom: {description?: string; files: SubmissionFilesInput}) => {\n            changeSubmission((old) => {\n                return {...old, ...custom, marketplaceId: undefined}\n            })\n            changeStep(\"second\")\n        },\n        [changeStep, changeSubmission],\n    )\n\n    const formItems = useMemo(() => {\n        return [\n            {\n                PreviewComponent: FilePreview,\n                accept: \".jpg,.JPG,.JPEG,.jpeg,.png,.PNG\",\n                alignment: {xs: 12},\n                defaultValue: files?.preview,\n                icon: <ImageIcon />,\n                id: \".files.preview\",\n                label: \"Upload Thumbnail\",\n                multiple: false,\n                required: true,\n                type: \"file-upload\",\n            },\n\n            {\n                alignment: {xs: 12},\n                defaultValue: name,\n                id: \".name\",\n                label: \"Name\",\n                required: true,\n                type: \"text\",\n            },\n\n            {\n                alignment: {xs: 12},\n                defaultValue: description,\n                id: \".description\",\n                label: \"Description\",\n                multiline: true,\n                type: \"text\",\n            },\n\n            {\n                alignment: {xs: 12},\n                defaultValue: files?.assembly,\n                id: \".files.assemblyUrl\",\n                label: \"Assembly Instructions (URL)\",\n                type: \"text\",\n            },\n\n            {\n                PreviewComponent: FilePreview,\n                accept: \".stl,.STL\",\n                alignment: {xs: 12},\n                defaultValue: files?.model,\n                id: \".files.model\",\n                label: \"Upload STL (3D Printing)\",\n                required: true,\n                type: \"file-upload\",\n            },\n\n            {\n                PreviewComponent: FilePreview,\n                accept: \".dxf,.DXF\",\n                alignment: {xs: 12},\n                defaultValue: files?.laserCutting,\n                id: \".files.laserCutting\",\n                label: \"Upload DXF (Laser Cutting)\",\n                required: true,\n                type: \"file-upload\",\n            },\n        ] as FormItem[]\n    }, [description, files, name])\n\n    return (\n        <TabsComponent\n            currentTab={!files || marketplaceId ? 0 : 1}\n            tabs={[\n                {\n                    component: (\n                        <InfoListComponent\n                            items={medicalItems.map(\n                                ({description, files: {preview}, id, name}) => {\n                                    return {\n                                        action: {\n                                            callback: onMarketplaceSelect,\n                                            type: \"callback\",\n                                        },\n                                        description,\n                                        id,\n                                        image: preview?.presignedUrl,\n                                        name,\n                                    }\n                                },\n                            )}\n                        />\n                    ),\n                    name: \"Frequent\",\n                },\n                {\n                    component: (\n                        <FormComponent\n                            submitButtonTitle=\"Create Submission\"\n                            formItems={formItems}\n                            onSubmit={(\n                                form: Partial<MutationCreateSubmissionArgs>,\n                            ) => {\n                                if (\n                                    (form.files?.laserCutting &&\n                                        form.files.laserCutting.length >= 1) ||\n                                    (form.files?.model &&\n                                        form.files.model.length >= 1)\n                                ) {\n                                    onCustomSelect(\n                                        form as {\n                                            description?: string\n                                            files: SubmissionFilesInput\n                                        },\n                                    )\n                                } else {\n                                    updateSnack({\n                                        message:\n                                            \"You must upload an STL or DXF file to proceed\",\n                                    })\n                                }\n                            }}\n                        />\n                    ),\n                    name: \"Custom\",\n                },\n            ]}\n        />\n    )\n}\n\nexport const CreateSubmissionPageView: React.FC<CreateSubmissionPageViewProps> = ({\n    medicalItems,\n    onSubmit,\n    user: {address, latitude, longitude},\n}) => {\n    const classes = useStyles()\n    const {changeStep, step, submission} = useContainer(\n        SubmissionStateContainer,\n    )\n\n    const {previewImage} = useContainer(FileRenderStateContainer)\n\n    const submitFormItems: FormItem[] = [\n        {\n            alignment: {xs: 12},\n            defaultValue: 85,\n            ending: \"Parts\",\n            id: \".quantity\",\n            label: \"Quantity\",\n            max: MAX_JOBS,\n            min: 5,\n            step: 1,\n            type: \"slider\",\n        },\n\n        {\n            alignment: {xs: 12},\n            defaultValue: {\n                geometry: {\n                    coordinates: [longitude, latitude],\n                },\n                properties: {\n                    display_name: address,\n                },\n            },\n            id: \".address\",\n            label: \"Shipping Address\",\n            locationIds: {\n                latitude: \".geolocation.latitude\",\n                longitude: \".geolocation.longitude\",\n            },\n            required: true,\n            type: \"location\",\n        },\n    ]\n\n    const findItemFromId = useCallback(\n        (id: string) => {\n            return medicalItems.find((medicalItem) => medicalItem.id === id)\n        },\n        [medicalItems],\n    )\n\n    const stepViews = useMemo(() => {\n        switch (step) {\n            case \"first\":\n                return <SubmissionItemSelect medicalItems={medicalItems} />\n            case \"second\": {\n                const createdSubmission = submission.marketplaceId\n                    ? findItemFromId(submission.marketplaceId)\n                    : submission\n\n                assert(createdSubmission, \"submission not defined\")\n                const {description, files, name} = createdSubmission\n\n                const previewPreview = Object.values(\n                    getNested(previewImage || {}, \".files.preview\") || {},\n                )[0] as string\n\n                const modelPreview = Object.values(\n                    getNested(previewImage || {}, \".files.model\") || {},\n                )[0] as string\n\n                const laserCuttingPreview = Object.values(\n                    getNested(previewImage || {}, \".files.laserCutting\") || {},\n                )[0] as string\n\n                return (\n                    <div\n                        style={{\n                            marginTop: 10,\n                            maxWidth: 1000,\n                            minWidth: 200,\n                            width: \"45vw\",\n                        }}>\n                        <InfoListComponent\n                            items={[\n                                {\n                                    action: {\n                                        callback: () => {\n                                            changeStep(\"first\")\n                                        },\n                                        type: \"callback\",\n                                    },\n                                    actionItem: (\n                                        <Button\n                                            variant=\"outlined\"\n                                            onClick={() => {\n                                                changeStep(\"first\")\n                                            }}>\n                                            Edit\n                                        </Button>\n                                    ),\n                                    description: description || \"\",\n                                    id: submission.marketplaceId || uuid(),\n                                    image:\n                                        files?.preview?.presignedUrl ||\n                                        previewPreview ||\n                                        modelPreview ||\n                                        laserCuttingPreview,\n                                    name: name || \"\",\n                                },\n                            ]}\n                        />\n\n                        <FormComponent\n                            submitButtonTitle=\"Create Submission\"\n                            formItems={submitFormItems}\n                            onSubmit={(form: {}) => {\n                                const submitted = {\n                                    ...submission,\n                                    ...form,\n                                } as MutationCreateSubmissionArgs\n\n                                if (submitted.files) {\n                                    if (!submitted.files?.laserCutting) {\n                                        submitted.files.laserCutting = []\n                                    }\n\n                                    if (!submitted.files?.model) {\n                                        submitted.files.model = []\n                                    }\n                                }\n\n                                if (submitted.files) {\n                                    if (!submitted.files.preview) {\n                                        submitted.files.preview = dataURLtoFile(\n                                            modelPreview ||\n                                                laserCuttingPreview ||\n                                                \"\",\n                                            \"thumbnail.png\",\n                                        )\n                                    }\n                                }\n\n                                onSubmit(submitted)\n                            }}\n                        />\n                    </div>\n                )\n            }\n        }\n    }, [\n        changeStep,\n        findItemFromId,\n        medicalItems,\n        onSubmit,\n        previewImage,\n        step,\n        submission,\n        submitFormItems,\n    ])\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <div className={classes.paper}>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Create Medical Submission\n                </Typography>\n                <div\n                    style={{\n                        maxWidth: 1000,\n                        minWidth: 200,\n                        width: \"45vw\",\n                    }}\n                />\n                {stepViews}\n            </div>\n        </Container>\n    )\n}\n\nexport interface CreateSubmissionPageProps {}\nexport const CreateSubmissionPage: React.FC<CreateSubmissionPageProps> = () => {\n    const {updateSnack} = useSnack()\n    const {data} = useMedicalItemsQuery({\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n    })\n\n    const [mutate] = useCreateSubmissionMutation({\n        onCompleted: ({createSubmission: {id}}) => {\n            goTo(`/submission/?id=${id}`)\n        },\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n    })\n    const onSubmit = useCallback(\n        (variables: MutationCreateSubmissionArgs) => {\n            mutate({variables})\n        },\n        [mutate],\n    )\n\n    return (\n        <SubmissionStateContainer.Provider>\n            <PageComponent\n                showFooter\n                title=\"Create Job\"\n                rolePages={[\n                    {\n                        component: (user) => (\n                            <div>\n                                {data?.medicalItems && (\n                                    <FileRenderStateContainer.Provider>\n                                        <CreateSubmissionPageView\n                                            medicalItems={data.medicalItems}\n                                            {...{onSubmit, user}}\n                                        />\n                                    </FileRenderStateContainer.Provider>\n                                )}\n                            </div>\n                        ),\n                        role: \"Submitter\",\n                    },\n                ]}>\n                <WrongPageComponent text=\"Must be logged in as a Submitter to create a job\" />\n            </PageComponent>\n        </SubmissionStateContainer.Provider>\n    )\n}\n","import {ApolloProvider} from \"@apollo/react-hooks\"\nimport React, {useState} from \"react\"\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\"\nimport {client, NotifyMessage} from \"./client\"\nimport {SnackBarComponent} from \"./components/snackbar\"\nimport {SnackContext} from \"./hooks/useSnack\"\nimport {IndexPage} from \"./pages\"\nimport {AboutPage} from \"./pages/about\"\nimport {AccountChoosePage} from \"./pages/account/choose\"\nimport {ForgotPasswordPage} from \"./pages/account/forgot-password\"\nimport {LoginPage} from \"./pages/account/login\"\nimport {LogoutPage} from \"./pages/account/logout\"\nimport {PasswordResetPage} from \"./pages/account/password-reset\"\nimport {RegisterPage} from \"./pages/account/register\"\nimport {AccountUpdatePage} from \"./pages/account/update\"\nimport {ContactPage} from \"./pages/contact\"\nimport {FindPage} from \"./pages/find\"\nimport {JobPage} from \"./pages/job\"\nimport {LegalPage} from \"./pages/legal\"\nimport {DisclaimerPage} from \"./pages/legal/disclaimer\"\nimport {FaqPage} from \"./pages/legal/faq\"\nimport {PrivacyPolicyPage} from \"./pages/legal/privacy-policy\"\nimport {TermsOfServicePage} from \"./pages/legal/terms-of-service\"\nimport {SubmissionPage} from \"./pages/submission\"\nimport {CreateSubmissionPage} from \"./pages/submission/create\"\n\nexport interface AppViewProps {}\nexport const AppView: React.FC<AppViewProps> = () => {\n    const [snack, updateSnack] = useState<NotifyMessage>()\n\n    return (\n        <SnackContext.Provider value={{updateSnack}}>\n            <div className=\"App\">\n                <BrowserRouter>\n                    <Switch>\n                        <Route path=\"/submission/create\">\n                            <CreateSubmissionPage />\n                        </Route>\n\n                        <Route path=\"/submission\">\n                            <SubmissionPage />\n                        </Route>\n\n                        <Route path=\"/find\">\n                            <FindPage />\n                        </Route>\n\n                        <Route path=\"/legal/terms-of-service\">\n                            <TermsOfServicePage />\n                        </Route>\n\n                        <Route path=\"/legal/privacy-policy\">\n                            <PrivacyPolicyPage />\n                        </Route>\n\n                        <Route path=\"/faq\">\n                            <FaqPage />\n                        </Route>\n\n                        <Route path=\"/legal/disclaimer\">\n                            <DisclaimerPage />\n                        </Route>\n\n                        <Route path=\"/account/logout\">\n                            <LogoutPage />\n                        </Route>\n\n                        <Route path=\"/account/password-reset\">\n                            <PasswordResetPage />\n                        </Route>\n\n                        <Route path=\"/account/forgot-password\">\n                            <ForgotPasswordPage />\n                        </Route>\n\n                        <Route path=\"/account/update\">\n                            <AccountUpdatePage />\n                        </Route>\n\n                        <Route path=\"/account/register/choose\">\n                            <AccountChoosePage />\n                        </Route>\n\n                        <Route path=\"/job\">\n                            <JobPage />\n                        </Route>\n\n                        <Route path=\"/account/register\">\n                            <RegisterPage />\n                        </Route>\n\n                        <Route path=\"/account/login\">\n                            <LoginPage />\n                        </Route>\n\n                        <Route path=\"/about\">\n                            <AboutPage />\n                        </Route>\n\n                        <Route path=\"/legal\">\n                            <LegalPage />\n                        </Route>\n\n                        <Route path=\"/contact\">\n                            <ContactPage />\n                        </Route>\n\n                        <Route path=\"/\">\n                            <IndexPage />\n                        </Route>\n                    </Switch>\n                </BrowserRouter>\n\n                <SnackBarComponent state={[snack, updateSnack]} />\n            </div>\n        </SnackContext.Provider>\n    )\n}\n\nexport interface AppProps {}\nexport const App: React.FC<AppProps> = () => (\n    <ApolloProvider {...{client}}>\n        <AppView />\n    </ApolloProvider>\n)\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n        ),\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        if (!process.env.PUBLIC_URL) {\n            throw new Error(\"Expected process.env.PUBLIC_URL to be defined!\")\n        }\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\")\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {\"Service-Worker\": \"script\"},\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\")\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\",\n            )\n        })\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister()\n            })\n            .catch((error) => {\n                console.error(error.message)\n            })\n    }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport {App} from \"./App\"\nimport \"./index.css\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import {Logging} from \"@nimashoghi/logging\"\nimport {\n    InMemoryCache,\n    IntrospectionFragmentMatcher,\n} from \"apollo-cache-inmemory\"\nimport {ApolloClient} from \"apollo-client\"\nimport {ApolloLink} from \"apollo-link\"\nimport {setContext} from \"apollo-link-context\"\nimport {onError} from \"apollo-link-error\"\nimport {createUploadLink} from \"apollo-upload-client\"\nimport introspectionQueryResultData from \"./graphql/fragmentMatcher.generated\"\nimport {AuthenticationResult} from \"./graphql/schema.generated\"\nimport {goTo} from \"./services/utils\"\nimport {cachedStorage, getJwtToken} from \"./util\"\n\nconst logger = Logging.logger({__filename})\n\nexport const login = ({\n    id,\n    refreshToken,\n    token,\n}: Omit<AuthenticationResult, \"user\">) => {\n    cachedStorage.setItem(\"JWT_TOKEN\", token)\n    cachedStorage.setItem(\"REFRESH_TOKEN\", refreshToken)\n    cachedStorage.setItem(\"USER_ID\", id)\n}\n\nexport const logout = () => {\n    cachedStorage.removeItem(\"JWT_TOKEN\")\n    cachedStorage.removeItem(\"REFRESH_TOKEN\")\n    cachedStorage.removeItem(\"USER_ID\")\n}\n\nexport type NotifyMessage = {\n    message: string\n    severity?: \"error\" | \"success\" | \"info\" | \"warning\"\n}\n\nconst cache = new InMemoryCache({\n    fragmentMatcher: new IntrospectionFragmentMatcher({\n        introspectionQueryResultData,\n    }),\n})\n\nconst errorLink = onError(({graphQLErrors, networkError}) => {\n    if (graphQLErrors) {\n        graphQLErrors.forEach(({locations, message, path}) => {\n            if (message === \"Your user was not found in the database!\") {\n                goTo(\"/account/logout\")\n            }\n            logger.error`[GraphQL error]: Message: ${message}, Location: ${JSON.stringify(\n                locations,\n            )}, Path: ${path}`\n        })\n    }\n    if (networkError) {\n        logger.error`[Network error]: ${networkError}`\n    }\n})\n\nconst authLink = setContext(async (_, {headers}) => {\n    const token = await getJwtToken(client)\n\n    return {\n        headers: {\n            ...headers,\n            ...(token ? {authorization: `Bearer ${token}`} : {}),\n        },\n    }\n})\n\nconst uploadLink = createUploadLink({\n    uri:\n        process.env.NODE_ENV !== \"production\"\n            ? \"http://localhost:80/graphql\"\n            : \"https://api.operationdynamo.org\",\n})\n\nconst link = ApolloLink.from([errorLink, authLink, uploadLink])\n\nexport const client = new ApolloClient({cache, link})\n"],"sourceRoot":""}