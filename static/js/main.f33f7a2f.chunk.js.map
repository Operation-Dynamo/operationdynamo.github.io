{"version":3,"sources":["components/dxf-viewer.tsx","graphql/fragmentMatcher.generated.ts","services/utils.ts","client.ts","graphql/schema.generated.ts","components/theme.ts","components/hide-app-bar.tsx","components/menu.tsx","components/page.tsx","components/table.tsx","components/markdown.tsx","pages/home.tsx","pages/index.tsx","services/location-search.ts","pages/about.tsx","components/picture-button.tsx","pages/account/choose.tsx","hooks/useForm.ts","components/form/file-upload.tsx","components/osm-autocomplete.tsx","hooks/useDebounce.ts","components/form/location.tsx","components/tooltip.tsx","components/form/select.tsx","components/form/slider.tsx","components/form/text.tsx","components/form/resolver.tsx","components/form/form.tsx","pages/account/forgot-password.tsx","pages/account/login.tsx","pages/account/logout.tsx","components/wrong-page.tsx","pages/account/password-reset.tsx","pages/account/register.tsx","pages/account/update.tsx","pages/contact.tsx","pages/find.tsx","components/part-renderer.tsx","components/stepper.tsx","pages/job.tsx","pages/job/create.tsx","components/card-option.tsx","pages/legal.tsx","pages/legal/disclaimer.tsx","pages/legal/faq.tsx","pages/legal/privacy-policy.tsx","pages/legal/terms-of-service.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DXFViewer","source","strokeWidth","strokeColor","width","height","useState","base64","changeSBase64","useEffect","updateSvg","dxf","test","svg","Helper","toSVG","replace","base64data","Buffer","toString","a","type","data","console","log","url","fetch","response","text","getDXFData","style","src","alt","result","useQuery","URLSearchParams","useLocation","search","goTo","window","open","nested","object","path","root","indices","split","slice","beforeIndex","length","lastIndex","nestedIndex","previous","reduce","acc","current","undefined","renderFileType","name","match","toLowerCase","setNested","value","removeNested","Object","keys","cache","InMemoryCache","fragmentMatcher","IntrospectionFragmentMatcher","introspectionQueryResultData","errorLink","onError","graphQLErrors","networkError","forEach","message","locations","JSON","stringify","authLink","setContext","_","headers","token","localStorage","getItem","authorization","uploadLink","createUploadLink","uri","link","ApolloLink","from","client","ApolloClient","AllUserInfoFragmentDoc","gql","MeUserInfoFragmentDoc","AuthenticationResultInfoFragmentDoc","BasicUserInfoFragmentDoc","JobInfoFragmentDoc","AcceptJobDocument","AcceptedJobsDocument","AvailableJobsDocument","CancelJobSubmitterDocument","CancelJobVolunteerDocument","CreateJobDocument","ForgotPasswordDocument","JobDocument","LoginDocument","MeDocument","useMeQuery","baseOptions","ApolloReactHooks","RegisterDocument","SubmitForgotPasswordDocument","SubmittedJobsDocument","UpdateAccountDocument","UpdateJobProgressDocument","theme","createMuiTheme","typography","fontFamily","join","palette","primary","main","secondary","error","red","A400","background","default","useStyles","makeStyles","createStyles","sidebarButtons","display","justifyContent","textDecoration","previousScroll","HideOnScroll","props","children","window_prop","throttleInverted","trigger","useScrollTrigger","target","threshold","addEventListener","scrollY","Fade","in","HideAppBar","classes","buttons","homeButton","invertedInitial","inverted","disableHide","changeInverted","buttonStyle","fontSize","color","textTransform","appBar","AppBar","elevation","Toolbar","className","flexGrow","Link","href","Button","title","map","button","i","key","element","Fragment","CssBaseline","MenuComponent","options","icon","React","anchorEl","setAnchorEl","Boolean","handleClose","index","variant","onClick","event","currentTarget","endIcon","startIcon","Menu","id","keepMounted","onClose","PaperProps","maxHeight","ITEM_HEIGHT","option","MenuItem","footer","marginTop","textAlign","container","flexDirection","PageComponent","showFooter","rolePages","roleRedirect","document","component","changeComponent","meError","meData","loading","me","user","userType","rolePage","find","role","redirect","firstName","lastName","marginLeft","timeout","Typography","descendingComparator","b","orderBy","EnhancedTableHead","headCells","order","onRequestSort","TableHead","TableRow","TableCell","padding","headCell","String","align","numeric","disablePadding","sortDirection","TableSortLabel","active","direction","property","label","visuallyHidden","useToolbarStyles","paddingLeft","spacing","paddingRight","highlight","backgroundColor","lighten","light","dark","flex","EnhancedTableToolbar","toolbarBarItems","clsx","paper","marginBottom","table","minWidth","border","clip","margin","overflow","position","top","EnhancedTable","initialOrderProperty","nameProperty","rows","onRowClick","setOrder","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","emptyRows","Math","min","Paper","TableContainer","Table","aria-labelledby","size","aria-label","handleRequestSort","TableBody","array","comparator","stabilizedThis","el","sort","stableSort","getComparator","row","hover","tabIndex","scope","filter","rowName","colSpan","TablePagination","rowsPerPageOptions","count","onChangePage","onChangeRowsPerPage","parseInt","maxWidth","MarkdownComponent","fileName","onFinish","variableMaps","content","changeContent","markdown","to","Grow","onEntered","html","marginRight","heroContent","backgroundImage","backgroundSize","backgroundRepeat","heroButtons","cardGrid","paddingTop","paddingBottom","card","cardMedia","cardContent","HomePage","Container","gutterBottom","Grid","justify","item","xs","sm","Card","CardContent","allow","allowFullScreen","GeometryType","Category","OsmType","FeatureType","AuthenticatedHomePageView","jobs","SubmitterHomePage","updateSnack","changeJobs","submittedJobs","VolunteerHomePage","acceptedJobs","IndexPage","AboutPage","flexWrap","image","breakpoints","down","zIndex","opacity","focusVisible","imageButton","left","right","bottom","alignItems","common","white","fontWeight","imageSrc","backgroundPosition","imageBackdrop","black","transition","transitions","create","imageTitle","imageMarked","PictureButton","ButtonBase","focusRipple","focusVisibleClassName","images","AccountChoosePage","alignSelf","useForm","initial","form","changeForm","updateForm","old","FormFileUploadItem","handleChange","fileNameId","changeFileName","onDrop","useCallback","acceptedFiles","file","reader","FileReader","onabort","onerror","onload","readAsArrayBuffer","multiple","maxSize","getRootProps","getInputProps","fullWidth","searchLocations","query","encodeURI","json","OsmAutocomplete","onLocationSelect","defaultValue","textProps","freeSolo","changeText","debouncedText","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","changeOptions","features","Autocomplete","filterOptions","x","onChange","newValue","renderInput","params","TextField","properties","display_name","getOptionLabel","FormLocationItem","autoComplete","required","locationIds","setLocation","location","latitude","longitude","geometry","coordinates","feature","TooltipComponent","hint","InputAdornment","Tooltip","placement","arrow","IconButton","FormSelectItem","selectValue","changeSelectValue","FormControl","InputLabel","Select","endAdornment","labelId","FormSliderItem","step","ending","max","Slider","getAriaValueText","valuetext","valueLabelDisplay","FormTextItem","textType","textValue","changeTextValue","htmlFor","OutlinedInput","FormItemResolverComponent","formItem","Error","resolve","FormComponent","formItems","submitButtonTitle","onSubmit","initialForm","onUpdate","update","preventDefault","alignment","avatar","ForgotPasswordPageView","useMemo","Avatar","ForgotPasswordPage","onCompleted","forgotPassword","severity","mutate","args","variables","LoginPageView","LoginPage","login","setItem","refetchQueries","LogoutPage","clear","WrongPageComponent","PasswordResetPageView","PasswordResetPage","submitForgotPassword","argToken","get","password","confirmPassword","RegisterPageView","argUserType","registrationToken","changeUserType","Submitter","Volunteer","RegisterPage","register","AccountUpdatePageView","isPasswordUpdate","changeIsPasswordUpdate","address","AccountUpdatePage","updateAccount","onSubmitAccount","updatePage","ContactPage","FindPageView","availableJobs","job","jobType","FindPage","changeAvailableJobs","PartRender","model","modelColor","rotate","orbitControls","instructions","CustomizedSteppers","steps","currentStep","colors","color1","color2","color3","activeStep","setActiveStep","ColorLibConnector","withStyles","alternativeLabel","completed","line","borderRadius","StepConnector","icons","ColorLibStepIcon","boxShadow","Stepper","connector","Step","StepLabel","StepIconComponent","stl","details","list","jobStepsDict","Pending","Assigned","PrintStarted","PrintComplete","Shipped","jobSteps","values","JobPageStatus","userEmail","email","cancelJob","jobID","progress","volunteer","updateJobProgress","acceptJob","trackingNumber","changeTrackingNumber","changeStep","shippingProvider","changeShippingProvider","print","disabled","updatedStep","JobPageList","fileType","quantity","createdAt","description","submitter","List","ListItem","clipboard","ListItemText","JobPageView","changeFileType","stlViewer","toUpperCase","JobPage","changeJob","cancelResponse","cancelJobSubmitter","cancelSubmitterMutation","useCancelJobVolunteerMutation","cancelJobVolunteer","cancelVolunteerMutation","useAcceptJobMutation","acceptResponse","acceptJobMutation","useUpdateJobProgressMutation","updateJobProgressResponse","updateJobProgressMutation","useJobQuery","jobError","jobData","jopPage","CreateJobPageView","CreateJobPage","createJob","CardOptionComponent","subtitle","LegalPage","md","DisclaimerPage","changeShowFooter","FaqPage","PrivacyPolicyPage","TermsOfServicePage","Alert","AppView","snack","Snackbar","autoHideDuration","App","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.f33f7a2f.chunk.js","sourcesContent":["//@ts-ignore\nimport {Helper} from \"dxf\"\nimport React, {useEffect, useState} from \"react\"\n\nexport interface DXFViewerProps {\n    source: {url: string; type: \"url\"} | {data: string; type: \"data\"}\n    strokeWidth?: string\n    strokeColor?: string\n    width: number\n    height: number\n}\nconst DXFViewer: React.FC<DXFViewerProps> = ({\n    source,\n    strokeWidth,\n    strokeColor,\n    width,\n    height,\n}) => {\n    const [base64, changeSBase64] = useState<string>()\n\n    useEffect(() => {\n        const updateSvg = (dxf: string) => {\n            try {\n                // eslint-disable-next-line no-control-regex\n                const isAscii = /^[\\x00-\\x7F]*$/.test(dxf)\n                if (isAscii) {\n                    const helper = new Helper(dxf)\n                    const svg = helper\n                        .toSVG()\n                        .replace(\n                            `stroke-width=\"0.1%\"`,\n                            `stroke-width=\"${strokeWidth || \"0.1%\"}\"`,\n                        )\n                        .replace(\n                            `stroke=\"rgb(0, 0, 0)\"`,\n                            `stroke=\"${strokeColor || \"rgb(0, 0, 0)\"}\"`,\n                        )\n\n                        .replace(\n                            `stroke=\"#000000\"`,\n                            `stroke=\"${strokeColor || \"#000000\"}\"`,\n                        )\n\n                    const buff = new Buffer(svg)\n                    const base64data = buff.toString(\"base64\")\n                    changeSBase64(base64data)\n                }\n            } catch {}\n        }\n\n        const getDXFData = async () => {\n            if (source.type === \"data\") {\n                updateSvg(source.data)\n            } else {\n                console.log(source.url)\n                const response = await fetch(source.url)\n                const dxf = await response.text()\n                updateSvg(dxf)\n            }\n        }\n        getDXFData()\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return (\n        <div>\n            {base64 ? (\n                <img\n                    style={{width, height}}\n                    src={`data:image/svg+xml;base64,${base64}`}\n                    alt=\"\"\n                />\n            ) : null}\n        </div>\n    )\n}\n\nexport default DXFViewer\n","/* eslint-disable */\n\n\n      export interface IntrospectionResultData {\n        __schema: {\n          types: {\n            kind: string;\n            name: string;\n            possibleTypes: {\n              name: string;\n            }[];\n          }[];\n        };\n      }\n      const result: IntrospectionResultData = {\n  \"__schema\": {\n    \"types\": []\n  }\n};\n      export default result;\n    ","import {useLocation} from \"react-router-dom\"\nimport { RenderType } from \"../components/part-renderer\"\n\nexport const nestedIndex = (path: string) => {\n    const indices = path.split(\".\").slice(1)\n    const beforeIndex: string | undefined = indices[indices.length - 2]\n    const lastIndex = indices[indices.length - 1]\n    return {indices, lastIndex, beforeIndex}\n}\n\nexport const removeIn = <T>(object: {[key: string]: T}, key: string) => {\n    const copy = {...object}\n    delete copy[key]\n    return copy\n}\n\nexport const capitalize = (string: string, all: boolean = false) => {\n    const regex = all ? /(?:^|\\s)\\S/g : /(?:^|\\s)\\S/\n    return string.replace(regex, a => {\n        return a.toUpperCase()\n    })\n}\n\nexport const useQuery = () => {\n    return new URLSearchParams(useLocation().search)\n}\n\nexport const goTo = (url: string) => {\n    window.open(url, \"_self\")\n}\n\nconst nested = <T>(object: {[key: string]: T}, path: string) => {\n    const root = {...object}\n    const {indices, lastIndex, beforeIndex} = nestedIndex(path)\n    return {\n        root,\n        previous: indices.slice(0, -1).reduce(\n            // eslint-disable-next-line no-return-assign\n            (acc, current) =>\n                acc[current] !== undefined\n                    ? acc[current]\n                    : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                      (acc[current] = {} as any),\n            root,\n        ),\n        lastIndex,\n        beforeIndex,\n    }\n}\n\nexport const renderFileType = (name : string) => name.match(/(.*)\\.(.*) Batch \\d/)?.[2]?.toLowerCase() as RenderType | undefined\n\n\n\nexport const partition = <T>(array: T[], isValid: (element: T) => boolean) => {\n    return array.reduce<T[][]>(\n        ([p, f], e) => (isValid(e) ? [[...p, e], f] : [p, [...f, e]]),\n        [[], []],\n    )\n}\n\nexport const setNested = <T>(\n    object: {[key: string]: T},\n    path: string,\n    value: T,\n) => {\n    const {root, previous, lastIndex} = nested(object, path)\n    previous[lastIndex] = value\n    return root\n}\n\nexport const removeNested = <T>(\n    object: {[key: string]: T},\n    path: string,\n): {[key: string]: T} => {\n    const {root, previous, lastIndex, beforeIndex} = nested(object, path)\n    delete previous[lastIndex]\n\n    if (Object.keys(previous).length === 0) {\n        if (beforeIndex) {\n            return removeNested<T>(root, `.${beforeIndex}`)\n        }\n    }\n    return root\n}\n\nexport const getNested = <T, C>(\n    object: Partial<T>,\n    path: string,\n): C | undefined => {\n    const {previous, lastIndex} = nested(object, path)\n    // @ts-ignore\n    return previous[lastIndex]\n}\n\n/**\n * Determine the mobile operating system.\n * This function returns one of 'iOS', 'Android', 'Windows Phone', or 'unknown'.\n *\n * @returns {String}\n */\nexport const getMobileOperatingSystem = (): \"android\" | \"ios\" | \"unknown\" => {\n    // @ts-ignore\n    const userAgent = navigator.userAgent || navigator.vendor || window.opera\n\n    if (/android/i.test(userAgent)) {\n        return \"android\"\n    }\n\n    // iOS detection from: http://stackoverflow.com/a/9039885/177710\n    if (/iPad|iPhone|iPod/.test(userAgent)) {\n        return \"ios\"\n    }\n\n    return \"unknown\"\n}\n","import {\n    InMemoryCache,\n    IntrospectionFragmentMatcher,\n} from \"apollo-cache-inmemory\"\nimport {ApolloClient} from \"apollo-client\"\nimport {ApolloLink} from \"apollo-link\"\nimport {setContext} from \"apollo-link-context\"\nimport {onError} from \"apollo-link-error\"\nimport {createUploadLink} from \"apollo-upload-client\"\nimport introspectionQueryResultData from \"./graphql/fragmentMatcher.generated\"\nimport {goTo} from \"./services/utils\"\n\nexport const idKey = \"USER_ID\"\nexport const tokenKey = \"JWT_TOKEN\"\n\nexport type NotifyMessage = {\n    message: string\n    severity?: \"error\" | \"success\" | \"info\" | \"warning\"\n}\n\nconst cache = new InMemoryCache({\n    fragmentMatcher: new IntrospectionFragmentMatcher({\n        introspectionQueryResultData,\n    }),\n})\n\nconst errorLink = onError(({graphQLErrors, networkError}) => {\n    if (graphQLErrors) {\n        graphQLErrors.forEach(({message, locations, path}) => {\n            if (message === \"Your user was not found in the database!\") {\n                goTo(\"/account/logout\")\n            }\n            console.log(\n                `[GraphQL error]: Message: ${message}, Location: ${JSON.stringify(\n                    locations,\n                )}, Path: ${path}`,\n            )\n        })\n    }\n    if (networkError) {\n        console.log(`[Network error]: ${networkError}`)\n    }\n})\n\nconst authLink = setContext((_, {headers}) => {\n    const token = localStorage.getItem(tokenKey)\n    return {\n        headers: {\n            ...headers,\n            authorization: token ? `Bearer ${token}` : \"\",\n        },\n    }\n})\n\nconst uploadLink = createUploadLink({\n    uri:\n        process.env.NODE_ENV !== \"production\"\n            ? \"http://127.0.0.1:54869/graphql\"\n            : \"https://api.operationdynamo.org\",\n})\n\nconst link = ApolloLink.from([errorLink, authLink, uploadLink])\n\nexport const client = new ApolloClient({cache, link})\n","/* eslint-disable */\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null | undefined;\n\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  Date: string;\n  Upload: any;\n};\n\nexport type AuthenticationResult = {\n   __typename: 'AuthenticationResult';\n  id: Scalars['ID'];\n  token: Scalars['String'];\n  user: CurrentUser;\n};\n\nexport type CurrentUser = {\n   __typename: 'CurrentUser';\n  id: Scalars['ID'];\n  user: User;\n};\n\n\nexport type File = {\n   __typename: 'File';\n  id: Scalars['ID'];\n  link: Scalars['String'];\n};\n\nexport type GeolocationInput = {\n  latitude: Scalars['Float'];\n  longitude: Scalars['Float'];\n};\n\nexport type Job = {\n   __typename: 'Job';\n  id: Scalars['ID'];\n  /** distance: Float */\n  name: Scalars['String'];\n  file: File;\n  description?: Maybe<Scalars['String']>;\n  address: Scalars['String'];\n  progress: JobProgress;\n  trackingNumber?: Maybe<Scalars['String']>;\n  submitter: User;\n  volunteer?: Maybe<User>;\n  createdAt: Scalars['Date'];\n  quantity: Scalars['Int'];\n};\n\nexport type JobProgress = \n  'Pending' |\n  'Assigned' |\n  'PrintStarted' |\n  'PrintComplete' |\n  'Shipped' |\n  'Received';\n\nexport type Mutation = {\n   __typename: 'Mutation';\n  login?: Maybe<AuthenticationResult>;\n  register?: Maybe<AuthenticationResult>;\n  updateAccount?: Maybe<User>;\n  forgotPassword?: Maybe<Scalars['Date']>;\n  submitForgotPassword?: Maybe<User>;\n  /** submitter */\n  createJob?: Maybe<Array<Job>>;\n  cancelJobSubmitter?: Maybe<Job>;\n  /** volunteer */\n  acceptJob?: Maybe<Job>;\n  updateJobProgress?: Maybe<Job>;\n  cancelJobVolunteer?: Maybe<Job>;\n};\n\n\nexport type MutationLoginArgs = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type MutationRegisterArgs = {\n  type: UserType;\n  registrationToken: Scalars['String'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n  firstName: Scalars['String'];\n  lastName: Scalars['String'];\n  address: Scalars['String'];\n  geolocation: GeolocationInput;\n};\n\n\nexport type MutationUpdateAccountArgs = {\n  password?: Maybe<PasswordUpdateInput>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  address?: Maybe<Scalars['String']>;\n  geolocation?: Maybe<GeolocationInput>;\n};\n\n\nexport type MutationForgotPasswordArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationSubmitForgotPasswordArgs = {\n  token: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type MutationCreateJobArgs = {\n  name: Scalars['String'];\n  quantity: Scalars['Int'];\n  file: Scalars['Upload'];\n  address?: Maybe<Scalars['String']>;\n  geolocation?: Maybe<GeolocationInput>;\n  description?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationCancelJobSubmitterArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationAcceptJobArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationUpdateJobProgressArgs = {\n  id: Scalars['ID'];\n  progress: JobProgress;\n  trackingNumber?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationCancelJobVolunteerArgs = {\n  id: Scalars['ID'];\n};\n\nexport type PasswordUpdateInput = {\n  oldPassword: Scalars['String'];\n  newPassword: Scalars['String'];\n};\n\nexport type Query = {\n   __typename: 'Query';\n  job?: Maybe<Job>;\n  me?: Maybe<CurrentUser>;\n  /** Volunteer */\n  acceptedJobs?: Maybe<Array<Job>>;\n  availableJobs?: Maybe<Array<Job>>;\n  /** Submitter */\n  submittedJobs?: Maybe<Array<Job>>;\n};\n\n\nexport type QueryJobArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type User = {\n   __typename: 'User';\n  id: Scalars['ID'];\n  email: Scalars['String'];\n  firstName: Scalars['String'];\n  lastName: Scalars['String'];\n  type: UserType;\n  address: Scalars['String'];\n  latitude: Scalars['Float'];\n  longitude: Scalars['Float'];\n};\n\nexport type UserType = \n  'Submitter' |\n  'Volunteer';\n\nexport type AcceptJobMutationVariables = {\n  id: Scalars['ID'];\n};\n\n\nexport type AcceptJobMutation = (\n  { __typename: 'Mutation' }\n  & { acceptJob?: Maybe<(\n    { __typename: 'Job' }\n    & JobInfoFragment\n  )> }\n);\n\nexport type AcceptedJobsQueryVariables = {};\n\n\nexport type AcceptedJobsQuery = (\n  { __typename: 'Query' }\n  & { acceptedJobs?: Maybe<Array<(\n    { __typename: 'Job' }\n    & JobInfoFragment\n  )>> }\n);\n\nexport type AvailableJobsQueryVariables = {};\n\n\nexport type AvailableJobsQuery = (\n  { __typename: 'Query' }\n  & { availableJobs?: Maybe<Array<(\n    { __typename: 'Job' }\n    & JobInfoFragment\n  )>> }\n);\n\nexport type CancelJobSubmitterMutationVariables = {\n  id: Scalars['ID'];\n};\n\n\nexport type CancelJobSubmitterMutation = (\n  { __typename: 'Mutation' }\n  & { cancelJobSubmitter?: Maybe<(\n    { __typename: 'Job' }\n    & JobInfoFragment\n  )> }\n);\n\nexport type CancelJobVolunteerMutationVariables = {\n  id: Scalars['ID'];\n};\n\n\nexport type CancelJobVolunteerMutation = (\n  { __typename: 'Mutation' }\n  & { cancelJobVolunteer?: Maybe<(\n    { __typename: 'Job' }\n    & JobInfoFragment\n  )> }\n);\n\nexport type CreateJobMutationVariables = {\n  name: Scalars['String'];\n  quantity: Scalars['Int'];\n  file: Scalars['Upload'];\n  address?: Maybe<Scalars['String']>;\n  geolocation?: Maybe<GeolocationInput>;\n  description?: Maybe<Scalars['String']>;\n};\n\n\nexport type CreateJobMutation = (\n  { __typename: 'Mutation' }\n  & { createJob?: Maybe<Array<(\n    { __typename: 'Job' }\n    & JobInfoFragment\n  )>> }\n);\n\nexport type ForgotPasswordMutationVariables = {\n  email: Scalars['String'];\n};\n\n\nexport type ForgotPasswordMutation = (\n  { __typename: 'Mutation' }\n  & Pick<Mutation, 'forgotPassword'>\n);\n\nexport type AllUserInfoFragment = (\n  { __typename: 'User' }\n  & Pick<User, 'id' | 'type' | 'email' | 'address' | 'latitude' | 'longitude' | 'firstName' | 'lastName'>\n);\n\nexport type BasicUserInfoFragment = (\n  { __typename: 'User' }\n  & Pick<User, 'id' | 'type' | 'email'>\n);\n\nexport type MeUserInfoFragment = (\n  { __typename: 'CurrentUser' }\n  & Pick<CurrentUser, 'id'>\n  & { user: (\n    { __typename: 'User' }\n    & AllUserInfoFragment\n  ) }\n);\n\nexport type AuthenticationResultInfoFragment = (\n  { __typename: 'AuthenticationResult' }\n  & Pick<AuthenticationResult, 'token'>\n);\n\nexport type JobInfoFragment = (\n  { __typename: 'Job' }\n  & Pick<Job, 'id' | 'name' | 'description' | 'address' | 'progress' | 'quantity' | 'createdAt' | 'trackingNumber'>\n  & { file: (\n    { __typename: 'File' }\n    & Pick<File, 'link' | 'id'>\n  ), submitter: (\n    { __typename: 'User' }\n    & BasicUserInfoFragment\n  ), volunteer?: Maybe<(\n    { __typename: 'User' }\n    & BasicUserInfoFragment\n  )> }\n);\n\nexport type JobQueryVariables = {\n  id: Scalars['ID'];\n};\n\n\nexport type JobQuery = (\n  { __typename: 'Query' }\n  & { job?: Maybe<(\n    { __typename: 'Job' }\n    & JobInfoFragment\n  )> }\n);\n\nexport type LoginMutationVariables = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type LoginMutation = (\n  { __typename: 'Mutation' }\n  & { login?: Maybe<(\n    { __typename: 'AuthenticationResult' }\n    & AuthenticationResultInfoFragment\n  )> }\n);\n\nexport type MeQueryVariables = {};\n\n\nexport type MeQuery = (\n  { __typename: 'Query' }\n  & { me?: Maybe<(\n    { __typename: 'CurrentUser' }\n    & MeUserInfoFragment\n  )> }\n);\n\nexport type RegisterMutationVariables = {\n  type: UserType;\n  registrationToken: Scalars['String'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n  firstName: Scalars['String'];\n  lastName: Scalars['String'];\n  address: Scalars['String'];\n  geolocation: GeolocationInput;\n};\n\n\nexport type RegisterMutation = (\n  { __typename: 'Mutation' }\n  & { register?: Maybe<(\n    { __typename: 'AuthenticationResult' }\n    & AuthenticationResultInfoFragment\n  )> }\n);\n\nexport type SubmitForgotPasswordMutationVariables = {\n  token: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type SubmitForgotPasswordMutation = (\n  { __typename: 'Mutation' }\n  & { submitForgotPassword?: Maybe<(\n    { __typename: 'User' }\n    & Pick<User, 'id'>\n  )> }\n);\n\nexport type SubmittedJobsQueryVariables = {};\n\n\nexport type SubmittedJobsQuery = (\n  { __typename: 'Query' }\n  & { submittedJobs?: Maybe<Array<(\n    { __typename: 'Job' }\n    & JobInfoFragment\n  )>> }\n);\n\nexport type UpdateAccountMutationVariables = {\n  password?: Maybe<PasswordUpdateInput>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  address?: Maybe<Scalars['String']>;\n  geolocation?: Maybe<GeolocationInput>;\n};\n\n\nexport type UpdateAccountMutation = (\n  { __typename: 'Mutation' }\n  & { updateAccount?: Maybe<(\n    { __typename: 'User' }\n    & BasicUserInfoFragment\n  )> }\n);\n\nexport type UpdateJobProgressMutationVariables = {\n  id: Scalars['ID'];\n  progress: JobProgress;\n  trackingNumber?: Maybe<Scalars['String']>;\n};\n\n\nexport type UpdateJobProgressMutation = (\n  { __typename: 'Mutation' }\n  & { updateJobProgress?: Maybe<(\n    { __typename: 'Job' }\n    & JobInfoFragment\n  )> }\n);\n\nexport const AllUserInfoFragmentDoc = gql`\n    fragment AllUserInfo on User {\n  id\n  type\n  email\n  address\n  latitude\n  longitude\n  firstName\n  lastName\n}\n    `;\nexport const MeUserInfoFragmentDoc = gql`\n    fragment MeUserInfo on CurrentUser {\n  id\n  user {\n    ...AllUserInfo\n  }\n}\n    ${AllUserInfoFragmentDoc}`;\nexport const AuthenticationResultInfoFragmentDoc = gql`\n    fragment AuthenticationResultInfo on AuthenticationResult {\n  token\n}\n    `;\nexport const BasicUserInfoFragmentDoc = gql`\n    fragment BasicUserInfo on User {\n  id\n  type\n  email\n}\n    `;\nexport const JobInfoFragmentDoc = gql`\n    fragment JobInfo on Job {\n  id\n  name\n  file {\n    link\n    id\n  }\n  description\n  address\n  progress\n  quantity\n  createdAt\n  trackingNumber\n  submitter {\n    ...BasicUserInfo\n  }\n  volunteer {\n    ...BasicUserInfo\n  }\n}\n    ${BasicUserInfoFragmentDoc}`;\nexport const AcceptJobDocument = gql`\n    mutation acceptJob($id: ID!) {\n  acceptJob(id: $id) {\n    ...JobInfo\n  }\n}\n    ${JobInfoFragmentDoc}`;\nexport type AcceptJobMutationFn = ApolloReactCommon.MutationFunction<AcceptJobMutation, AcceptJobMutationVariables>;\n\n/**\n * __useAcceptJobMutation__\n *\n * To run a mutation, you first call `useAcceptJobMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAcceptJobMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [acceptJobMutation, { data, loading, error }] = useAcceptJobMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useAcceptJobMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AcceptJobMutation, AcceptJobMutationVariables>) {\n        return ApolloReactHooks.useMutation<AcceptJobMutation, AcceptJobMutationVariables>(AcceptJobDocument, baseOptions);\n      }\nexport type AcceptJobMutationHookResult = ReturnType<typeof useAcceptJobMutation>;\nexport type AcceptJobMutationResult = ApolloReactCommon.MutationResult<AcceptJobMutation>;\nexport type AcceptJobMutationOptions = ApolloReactCommon.BaseMutationOptions<AcceptJobMutation, AcceptJobMutationVariables>;\nexport const AcceptedJobsDocument = gql`\n    query acceptedJobs {\n  acceptedJobs {\n    ...JobInfo\n  }\n}\n    ${JobInfoFragmentDoc}`;\n\n/**\n * __useAcceptedJobsQuery__\n *\n * To run a query within a React component, call `useAcceptedJobsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAcceptedJobsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAcceptedJobsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAcceptedJobsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AcceptedJobsQuery, AcceptedJobsQueryVariables>) {\n        return ApolloReactHooks.useQuery<AcceptedJobsQuery, AcceptedJobsQueryVariables>(AcceptedJobsDocument, baseOptions);\n      }\nexport function useAcceptedJobsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AcceptedJobsQuery, AcceptedJobsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AcceptedJobsQuery, AcceptedJobsQueryVariables>(AcceptedJobsDocument, baseOptions);\n        }\nexport type AcceptedJobsQueryHookResult = ReturnType<typeof useAcceptedJobsQuery>;\nexport type AcceptedJobsLazyQueryHookResult = ReturnType<typeof useAcceptedJobsLazyQuery>;\nexport type AcceptedJobsQueryResult = ApolloReactCommon.QueryResult<AcceptedJobsQuery, AcceptedJobsQueryVariables>;\nexport const AvailableJobsDocument = gql`\n    query availableJobs {\n  availableJobs {\n    ...JobInfo\n  }\n}\n    ${JobInfoFragmentDoc}`;\n\n/**\n * __useAvailableJobsQuery__\n *\n * To run a query within a React component, call `useAvailableJobsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAvailableJobsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAvailableJobsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAvailableJobsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AvailableJobsQuery, AvailableJobsQueryVariables>) {\n        return ApolloReactHooks.useQuery<AvailableJobsQuery, AvailableJobsQueryVariables>(AvailableJobsDocument, baseOptions);\n      }\nexport function useAvailableJobsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AvailableJobsQuery, AvailableJobsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AvailableJobsQuery, AvailableJobsQueryVariables>(AvailableJobsDocument, baseOptions);\n        }\nexport type AvailableJobsQueryHookResult = ReturnType<typeof useAvailableJobsQuery>;\nexport type AvailableJobsLazyQueryHookResult = ReturnType<typeof useAvailableJobsLazyQuery>;\nexport type AvailableJobsQueryResult = ApolloReactCommon.QueryResult<AvailableJobsQuery, AvailableJobsQueryVariables>;\nexport const CancelJobSubmitterDocument = gql`\n    mutation cancelJobSubmitter($id: ID!) {\n  cancelJobSubmitter(id: $id) {\n    ...JobInfo\n  }\n}\n    ${JobInfoFragmentDoc}`;\nexport type CancelJobSubmitterMutationFn = ApolloReactCommon.MutationFunction<CancelJobSubmitterMutation, CancelJobSubmitterMutationVariables>;\n\n/**\n * __useCancelJobSubmitterMutation__\n *\n * To run a mutation, you first call `useCancelJobSubmitterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCancelJobSubmitterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [cancelJobSubmitterMutation, { data, loading, error }] = useCancelJobSubmitterMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useCancelJobSubmitterMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CancelJobSubmitterMutation, CancelJobSubmitterMutationVariables>) {\n        return ApolloReactHooks.useMutation<CancelJobSubmitterMutation, CancelJobSubmitterMutationVariables>(CancelJobSubmitterDocument, baseOptions);\n      }\nexport type CancelJobSubmitterMutationHookResult = ReturnType<typeof useCancelJobSubmitterMutation>;\nexport type CancelJobSubmitterMutationResult = ApolloReactCommon.MutationResult<CancelJobSubmitterMutation>;\nexport type CancelJobSubmitterMutationOptions = ApolloReactCommon.BaseMutationOptions<CancelJobSubmitterMutation, CancelJobSubmitterMutationVariables>;\nexport const CancelJobVolunteerDocument = gql`\n    mutation cancelJobVolunteer($id: ID!) {\n  cancelJobVolunteer(id: $id) {\n    ...JobInfo\n  }\n}\n    ${JobInfoFragmentDoc}`;\nexport type CancelJobVolunteerMutationFn = ApolloReactCommon.MutationFunction<CancelJobVolunteerMutation, CancelJobVolunteerMutationVariables>;\n\n/**\n * __useCancelJobVolunteerMutation__\n *\n * To run a mutation, you first call `useCancelJobVolunteerMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCancelJobVolunteerMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [cancelJobVolunteerMutation, { data, loading, error }] = useCancelJobVolunteerMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useCancelJobVolunteerMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CancelJobVolunteerMutation, CancelJobVolunteerMutationVariables>) {\n        return ApolloReactHooks.useMutation<CancelJobVolunteerMutation, CancelJobVolunteerMutationVariables>(CancelJobVolunteerDocument, baseOptions);\n      }\nexport type CancelJobVolunteerMutationHookResult = ReturnType<typeof useCancelJobVolunteerMutation>;\nexport type CancelJobVolunteerMutationResult = ApolloReactCommon.MutationResult<CancelJobVolunteerMutation>;\nexport type CancelJobVolunteerMutationOptions = ApolloReactCommon.BaseMutationOptions<CancelJobVolunteerMutation, CancelJobVolunteerMutationVariables>;\nexport const CreateJobDocument = gql`\n    mutation createJob($name: String!, $quantity: Int!, $file: Upload!, $address: String, $geolocation: GeolocationInput, $description: String) {\n  createJob(name: $name, quantity: $quantity, file: $file, address: $address, geolocation: $geolocation, description: $description) {\n    ...JobInfo\n  }\n}\n    ${JobInfoFragmentDoc}`;\nexport type CreateJobMutationFn = ApolloReactCommon.MutationFunction<CreateJobMutation, CreateJobMutationVariables>;\n\n/**\n * __useCreateJobMutation__\n *\n * To run a mutation, you first call `useCreateJobMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateJobMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createJobMutation, { data, loading, error }] = useCreateJobMutation({\n *   variables: {\n *      name: // value for 'name'\n *      quantity: // value for 'quantity'\n *      file: // value for 'file'\n *      address: // value for 'address'\n *      geolocation: // value for 'geolocation'\n *      description: // value for 'description'\n *   },\n * });\n */\nexport function useCreateJobMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateJobMutation, CreateJobMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateJobMutation, CreateJobMutationVariables>(CreateJobDocument, baseOptions);\n      }\nexport type CreateJobMutationHookResult = ReturnType<typeof useCreateJobMutation>;\nexport type CreateJobMutationResult = ApolloReactCommon.MutationResult<CreateJobMutation>;\nexport type CreateJobMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateJobMutation, CreateJobMutationVariables>;\nexport const ForgotPasswordDocument = gql`\n    mutation forgotPassword($email: String!) {\n  forgotPassword(email: $email)\n}\n    `;\nexport type ForgotPasswordMutationFn = ApolloReactCommon.MutationFunction<ForgotPasswordMutation, ForgotPasswordMutationVariables>;\n\n/**\n * __useForgotPasswordMutation__\n *\n * To run a mutation, you first call `useForgotPasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useForgotPasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [forgotPasswordMutation, { data, loading, error }] = useForgotPasswordMutation({\n *   variables: {\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useForgotPasswordMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables>) {\n        return ApolloReactHooks.useMutation<ForgotPasswordMutation, ForgotPasswordMutationVariables>(ForgotPasswordDocument, baseOptions);\n      }\nexport type ForgotPasswordMutationHookResult = ReturnType<typeof useForgotPasswordMutation>;\nexport type ForgotPasswordMutationResult = ApolloReactCommon.MutationResult<ForgotPasswordMutation>;\nexport type ForgotPasswordMutationOptions = ApolloReactCommon.BaseMutationOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables>;\nexport const JobDocument = gql`\n    query job($id: ID!) {\n  job(id: $id) {\n    ...JobInfo\n  }\n}\n    ${JobInfoFragmentDoc}`;\n\n/**\n * __useJobQuery__\n *\n * To run a query within a React component, call `useJobQuery` and pass it any options that fit your needs.\n * When your component renders, `useJobQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useJobQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useJobQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<JobQuery, JobQueryVariables>) {\n        return ApolloReactHooks.useQuery<JobQuery, JobQueryVariables>(JobDocument, baseOptions);\n      }\nexport function useJobLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<JobQuery, JobQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<JobQuery, JobQueryVariables>(JobDocument, baseOptions);\n        }\nexport type JobQueryHookResult = ReturnType<typeof useJobQuery>;\nexport type JobLazyQueryHookResult = ReturnType<typeof useJobLazyQuery>;\nexport type JobQueryResult = ApolloReactCommon.QueryResult<JobQuery, JobQueryVariables>;\nexport const LoginDocument = gql`\n    mutation login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    ...AuthenticationResultInfo\n  }\n}\n    ${AuthenticationResultInfoFragmentDoc}`;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const MeDocument = gql`\n    query me {\n  me {\n    ...MeUserInfo\n  }\n}\n    ${MeUserInfoFragmentDoc}`;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return ApolloReactHooks.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = ApolloReactCommon.QueryResult<MeQuery, MeQueryVariables>;\nexport const RegisterDocument = gql`\n    mutation register($type: UserType!, $registrationToken: String!, $email: String!, $password: String!, $firstName: String!, $lastName: String!, $address: String!, $geolocation: GeolocationInput!) {\n  register(type: $type, registrationToken: $registrationToken, email: $email, password: $password, firstName: $firstName, lastName: $lastName, address: $address, geolocation: $geolocation) {\n    ...AuthenticationResultInfo\n  }\n}\n    ${AuthenticationResultInfoFragmentDoc}`;\nexport type RegisterMutationFn = ApolloReactCommon.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      type: // value for 'type'\n *      registrationToken: // value for 'registrationToken'\n *      email: // value for 'email'\n *      password: // value for 'password'\n *      firstName: // value for 'firstName'\n *      lastName: // value for 'lastName'\n *      address: // value for 'address'\n *      geolocation: // value for 'geolocation'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        return ApolloReactHooks.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = ApolloReactCommon.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = ApolloReactCommon.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const SubmitForgotPasswordDocument = gql`\n    mutation submitForgotPassword($token: String!, $password: String!) {\n  submitForgotPassword(token: $token, password: $password) {\n    id\n  }\n}\n    `;\nexport type SubmitForgotPasswordMutationFn = ApolloReactCommon.MutationFunction<SubmitForgotPasswordMutation, SubmitForgotPasswordMutationVariables>;\n\n/**\n * __useSubmitForgotPasswordMutation__\n *\n * To run a mutation, you first call `useSubmitForgotPasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSubmitForgotPasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [submitForgotPasswordMutation, { data, loading, error }] = useSubmitForgotPasswordMutation({\n *   variables: {\n *      token: // value for 'token'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useSubmitForgotPasswordMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SubmitForgotPasswordMutation, SubmitForgotPasswordMutationVariables>) {\n        return ApolloReactHooks.useMutation<SubmitForgotPasswordMutation, SubmitForgotPasswordMutationVariables>(SubmitForgotPasswordDocument, baseOptions);\n      }\nexport type SubmitForgotPasswordMutationHookResult = ReturnType<typeof useSubmitForgotPasswordMutation>;\nexport type SubmitForgotPasswordMutationResult = ApolloReactCommon.MutationResult<SubmitForgotPasswordMutation>;\nexport type SubmitForgotPasswordMutationOptions = ApolloReactCommon.BaseMutationOptions<SubmitForgotPasswordMutation, SubmitForgotPasswordMutationVariables>;\nexport const SubmittedJobsDocument = gql`\n    query submittedJobs {\n  submittedJobs {\n    ...JobInfo\n  }\n}\n    ${JobInfoFragmentDoc}`;\n\n/**\n * __useSubmittedJobsQuery__\n *\n * To run a query within a React component, call `useSubmittedJobsQuery` and pass it any options that fit your needs.\n * When your component renders, `useSubmittedJobsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSubmittedJobsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useSubmittedJobsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SubmittedJobsQuery, SubmittedJobsQueryVariables>) {\n        return ApolloReactHooks.useQuery<SubmittedJobsQuery, SubmittedJobsQueryVariables>(SubmittedJobsDocument, baseOptions);\n      }\nexport function useSubmittedJobsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SubmittedJobsQuery, SubmittedJobsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<SubmittedJobsQuery, SubmittedJobsQueryVariables>(SubmittedJobsDocument, baseOptions);\n        }\nexport type SubmittedJobsQueryHookResult = ReturnType<typeof useSubmittedJobsQuery>;\nexport type SubmittedJobsLazyQueryHookResult = ReturnType<typeof useSubmittedJobsLazyQuery>;\nexport type SubmittedJobsQueryResult = ApolloReactCommon.QueryResult<SubmittedJobsQuery, SubmittedJobsQueryVariables>;\nexport const UpdateAccountDocument = gql`\n    mutation updateAccount($password: PasswordUpdateInput, $firstName: String, $lastName: String, $address: String, $geolocation: GeolocationInput) {\n  updateAccount(password: $password, firstName: $firstName, lastName: $lastName, address: $address, geolocation: $geolocation) {\n    ...BasicUserInfo\n  }\n}\n    ${BasicUserInfoFragmentDoc}`;\nexport type UpdateAccountMutationFn = ApolloReactCommon.MutationFunction<UpdateAccountMutation, UpdateAccountMutationVariables>;\n\n/**\n * __useUpdateAccountMutation__\n *\n * To run a mutation, you first call `useUpdateAccountMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateAccountMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateAccountMutation, { data, loading, error }] = useUpdateAccountMutation({\n *   variables: {\n *      password: // value for 'password'\n *      firstName: // value for 'firstName'\n *      lastName: // value for 'lastName'\n *      address: // value for 'address'\n *      geolocation: // value for 'geolocation'\n *   },\n * });\n */\nexport function useUpdateAccountMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateAccountMutation, UpdateAccountMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateAccountMutation, UpdateAccountMutationVariables>(UpdateAccountDocument, baseOptions);\n      }\nexport type UpdateAccountMutationHookResult = ReturnType<typeof useUpdateAccountMutation>;\nexport type UpdateAccountMutationResult = ApolloReactCommon.MutationResult<UpdateAccountMutation>;\nexport type UpdateAccountMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateAccountMutation, UpdateAccountMutationVariables>;\nexport const UpdateJobProgressDocument = gql`\n    mutation updateJobProgress($id: ID!, $progress: JobProgress!, $trackingNumber: String) {\n  updateJobProgress(id: $id, progress: $progress, trackingNumber: $trackingNumber) {\n    ...JobInfo\n  }\n}\n    ${JobInfoFragmentDoc}`;\nexport type UpdateJobProgressMutationFn = ApolloReactCommon.MutationFunction<UpdateJobProgressMutation, UpdateJobProgressMutationVariables>;\n\n/**\n * __useUpdateJobProgressMutation__\n *\n * To run a mutation, you first call `useUpdateJobProgressMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateJobProgressMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateJobProgressMutation, { data, loading, error }] = useUpdateJobProgressMutation({\n *   variables: {\n *      id: // value for 'id'\n *      progress: // value for 'progress'\n *      trackingNumber: // value for 'trackingNumber'\n *   },\n * });\n */\nexport function useUpdateJobProgressMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateJobProgressMutation, UpdateJobProgressMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateJobProgressMutation, UpdateJobProgressMutationVariables>(UpdateJobProgressDocument, baseOptions);\n      }\nexport type UpdateJobProgressMutationHookResult = ReturnType<typeof useUpdateJobProgressMutation>;\nexport type UpdateJobProgressMutationResult = ApolloReactCommon.MutationResult<UpdateJobProgressMutation>;\nexport type UpdateJobProgressMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateJobProgressMutation, UpdateJobProgressMutationVariables>;","import { red } from \"@material-ui/core/colors\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\n\nexport const background = \"white\";\n\n// Create a theme instance.\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: [\"Righteous\"].join(\",\")\n  },\n  palette: {\n    primary: {\n      main: \"#6200ee\"\n    },\n    secondary: {\n      main: \"#19857b\"\n    },\n    error: {\n      main: red.A400\n    },\n    background: {\n      default: \"#fff\"\n    }\n  }\n});\n\nexport default theme;\n","import {\n    Button,\n    ButtonProps,\n    createStyles,\n    Fade,\n    makeStyles,\n} from \"@material-ui/core\"\nimport AppBar from \"@material-ui/core/AppBar\"\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\nimport Link from \"@material-ui/core/Link\"\nimport Toolbar from \"@material-ui/core/Toolbar\"\nimport useScrollTrigger from \"@material-ui/core/useScrollTrigger\"\nimport PropTypes from \"prop-types\"\nimport React, {useEffect, useState} from \"react\"\nimport theme from \"./theme\"\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        sidebarButtons: {\n            display: \"flex\",\n            justifyContent: \"flex-start\",\n        },\n        link: {\n            textDecoration: \"none\",\n        },\n    }),\n)\n\nexport interface SideBarButton {\n    title: string\n    path: string\n    props?: ButtonProps\n    type: \"bar-button\"\n}\n\nexport interface AppBarProps {\n    window?: () => Window\n    homeButton: SideBarButton\n    buttons: (SideBarButton | {element: JSX.Element; type: \"element\"})[]\n    inverted: boolean\n    disableHide: boolean\n}\n\nlet previousScroll = 0\n\nconst HideOnScroll = (\n    props: React.PropsWithChildren<AppBarProps> & {\n        throttleInverted: (inverted: boolean) => void\n    },\n) => {\n    const {children, window: window_prop, throttleInverted} = props\n    // Note that you normally won't need to set the window ref as useScrollTrigger\n    // will default to window.\n    // This is only being set here because the demo is in an iframe.\n\n    const threshold = 50\n    const trigger = useScrollTrigger({\n        target: window_prop ? window_prop() : undefined,\n        threshold,\n    })\n    useEffect(() => {\n        window.addEventListener(\"scroll\", () => {\n            if (window.scrollY <= 0) {\n                throttleInverted(false)\n            } else if (\n                window.scrollY < previousScroll &&\n                !trigger &&\n                window.scrollY > threshold\n            ) {\n                throttleInverted(true)\n            }\n            previousScroll = window.scrollY\n        })\n    }, [throttleInverted, trigger])\n\n    return <Fade in={!trigger}>{children}</Fade>\n}\n\nHideOnScroll.propTypes = {\n    children: PropTypes.node.isRequired,\n    // Injected by the documentation to work in an iframe.\n    // You won't need it on your project.\n    window: PropTypes.func,\n}\n\nconst HideAppBar: React.FunctionComponent<AppBarProps> = props => {\n    const classes = useStyles()\n    const {\n        children,\n        buttons,\n        homeButton,\n        inverted: invertedInitial,\n        disableHide,\n    } = props\n    const [inverted, changeInverted] = useState(invertedInitial)\n    const buttonStyle = {\n        fontFamily: theme.typography.fontFamily,\n        fontSize: 15,\n        color: inverted ? \"white\" : theme.palette.primary.main,\n        textTransform: \"none\" as \"none\",\n    }\n\n    const appBar = (\n        <AppBar\n            elevation={0}\n            style={{\n                background: inverted ? theme.palette.primary.main : \"white\",\n            }}>\n            <Toolbar className={classes.sidebarButtons}>\n                <div style={{flexGrow: 1}}>\n                    <Link href={homeButton.path}>\n                        <Button style={buttonStyle} color=\"inherit\">\n                            {homeButton.title}\n                        </Button>\n                    </Link>\n                </div>\n                <div>\n                    {buttons.map((button, i) => {\n                        if (button.type === \"element\") {\n                            return <Link key={i}>{button.element}</Link>\n                        } else {\n                            const {path, title, props} = button\n                            return (\n                                <Link key={i} href={path}>\n                                    <Button\n                                        style={buttonStyle}\n                                        color=\"inherit\"\n                                        {...props}>\n                                        {title}\n                                    </Button>\n                                </Link>\n                            )\n                        }\n                    })}\n                </div>\n            </Toolbar>\n        </AppBar>\n    )\n\n    return (\n        <React.Fragment>\n            <CssBaseline />\n            {disableHide ? (\n                <div>{appBar}</div>\n            ) : (\n                <HideOnScroll throttleInverted={changeInverted} {...props}>\n                    {appBar}\n                </HideOnScroll>\n            )}\n\n            <Toolbar />\n            {children}\n        </React.Fragment>\n    )\n}\n\nexport default HideAppBar\n","import {Button} from \"@material-ui/core\"\nimport Menu from \"@material-ui/core/Menu\"\nimport MenuItem from \"@material-ui/core/MenuItem\"\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\"\nimport React from \"react\"\nimport {goTo} from \"../services/utils\"\nconst ITEM_HEIGHT = 48\n\nexport interface MenuComponentProps {\n    name: string\n    options: {name: string; url: string}[]\n    icon: JSX.Element\n}\n\nexport default function MenuComponent({\n    options,\n    icon,\n    name,\n}: MenuComponentProps) {\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null)\n    const open = Boolean(anchorEl)\n\n    const handleClick = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n        setAnchorEl(event.currentTarget)\n        console.log(event.currentTarget)\n    }\n\n    const handleClose = (index: number) => {\n        setAnchorEl(null)\n        goTo(options[index].url)\n    }\n\n    return (\n        <div>\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleClick}\n                endIcon={<KeyboardArrowDownIcon />}\n                startIcon={icon}>\n                {name}\n            </Button>\n\n            <Menu\n                id=\"long-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={open}\n                onClose={handleClose}\n                PaperProps={{\n                    style: {\n                        maxHeight: ITEM_HEIGHT * 4.5,\n                        width: \"20ch\",\n                    },\n                }}>\n                {options.map((option, i) => (\n                    <MenuItem\n                        key={i}\n                        onClick={() => {\n                            handleClose(i)\n                        }}>\n                        {option.name}\n                    </MenuItem>\n                ))}\n            </Menu>\n        </div>\n    )\n}\n","import {ButtonProps, Fade, makeStyles, Typography} from \"@material-ui/core\"\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\"\nimport LockIcon from \"@material-ui/icons/Lock\"\nimport React, {useEffect, useState} from \"react\"\nimport {\n    AllUserInfoFragment,\n    useMeQuery,\n    UserType,\n} from \"../graphql/schema.generated\"\nimport {goTo} from \"../services/utils\"\nimport HideAppBar, {SideBarButton} from \"./hide-app-bar\"\nimport MenuComponent from \"./menu\"\n\nexport interface RolePage {\n    component?: (user: AllUserInfoFragment) => React.ReactNode\n    role: UserType\n    redirect?: string\n    title?: string\n}\n\nexport interface PageComponentProps {\n    title: string\n    showFooter?: boolean\n    disableHide?: boolean\n    rolePages?: RolePage[]\n    roleRedirect?: string\n}\n\nconst useStyles = makeStyles(() => ({\n    footer: {\n        marginTop: \"7vh\",\n        textAlign: \"center\",\n    },\n    container: {\n        display: \"flex\",\n        flexDirection: \"column\",\n    },\n}))\n\nconst PageComponent: React.FunctionComponent<PageComponentProps> = ({\n    children,\n    showFooter = false,\n    disableHide = true,\n    rolePages,\n    title,\n    roleRedirect,\n}) => {\n    const classes = useStyles()\n\n    useEffect(() => {\n        document.title = `Op Dynamo | ${title}`\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const [component, changeComponent] = useState<React.ReactNode>()\n    const {error: meError, data: meData, loading} = useMeQuery()\n\n    const loggedOutButtons = [\n        {title: \"Legal\", path: \"/legal\", type: \"bar-button\"},\n        {title: \"About\", path: \"/about\", type: \"bar-button\"},\n        {\n            title: \"Contact\",\n            path: \"/contact\",\n            type: \"bar-button\",\n        },\n        {title: \"FAQ\", path: \"/faq\"},\n    ]\n\n    useEffect(() => {\n        if (!meError && rolePages && meData?.me?.user) {\n            const userType = meData.me.user.type\n            const rolePage = rolePages.find(rolePage => {\n                return rolePage.role === userType\n            })\n            if (!rolePage) {\n                if (roleRedirect) {\n                    goTo(roleRedirect)\n                }\n            } else {\n                if (rolePage.component) {\n                    changeComponent(rolePage.component(meData.me.user))\n                }\n                if (rolePage.redirect) {\n                    goTo(rolePage.redirect)\n                }\n            }\n        } else if (!loading) {\n            changeComponent(children)\n        }\n    }, [rolePages, meData, meError, roleRedirect, children, loading])\n\n    return (\n        <div>\n            <HideAppBar\n                disableHide={disableHide}\n                inverted={false}\n                homeButton={{\n                    title: \"Operation Dynamo\",\n                    path: \"/\",\n                    type: \"bar-button\",\n                }}\n                buttons={\n                    [\n                        ...(meData?.me?.user\n                            ? [\n                                  {\n                                      type: \"element\",\n                                      element: (\n                                          <MenuComponent\n                                              name={`${meData.me.user.firstName} ${meData.me.user.lastName}`}\n                                              icon={<AccountCircleIcon />}\n                                              options={[\n                                                  {\n                                                      name: \"Update Account\",\n                                                      url: \"/account/update\",\n                                                  },\n                                                  {\n                                                      name: \"Logout\",\n                                                      url: \"/account/logout\",\n                                                  },\n                                              ]}\n                                          />\n                                      ),\n                                  },\n                              ]\n                            : [\n                                  ...loggedOutButtons,\n                                  {\n                                      type: \"bar-button\",\n                                      title: \"Login\",\n                                      path: \"/account/login\",\n                                      props: {\n                                          startIcon: <LockIcon />,\n                                          color: \"primary\",\n                                          style: {\n                                              color: \"white\",\n                                              height: 35,\n                                              marginLeft: 10,\n                                          },\n                                          variant: \"contained\",\n                                      } as ButtonProps,\n                                  },\n                              ]),\n                    ] as (SideBarButton & {\n                        type: \"element\"\n                        element: JSX.Element\n                    })[]\n                }>\n                <div style={{marginTop: 40}}>{component}</div>\n            </HideAppBar>\n            <footer className={classes.footer}>\n                {showFooter ? (\n                    <Fade timeout={1000} in={showFooter}>\n                        <Typography variant=\"caption\" component=\"h3\">\n                            © Operation Dynamo a product of Conva LLC. All\n                            Rights Reserved\n                        </Typography>\n                    </Fade>\n                ) : null}\n            </footer>\n        </div>\n    )\n}\nexport default PageComponent\n","import Paper from \"@material-ui/core/Paper\"\nimport {\n    createStyles,\n    lighten,\n    makeStyles,\n    Theme,\n} from \"@material-ui/core/styles\"\nimport Table from \"@material-ui/core/Table\"\nimport TableBody from \"@material-ui/core/TableBody\"\nimport TableCell from \"@material-ui/core/TableCell\"\nimport TableContainer from \"@material-ui/core/TableContainer\"\nimport TableHead from \"@material-ui/core/TableHead\"\nimport TablePagination from \"@material-ui/core/TablePagination\"\nimport TableRow from \"@material-ui/core/TableRow\"\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\"\nimport Toolbar from \"@material-ui/core/Toolbar\"\nimport Typography from \"@material-ui/core/Typography\"\nimport clsx from \"clsx\"\nimport React from \"react\"\n\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1\n    }\n    return 0\n}\n\ntype Order = \"asc\" | \"desc\"\n\nfunction getComparator<Key extends keyof any>(\n    order: Order,\n    orderBy: Key,\n): (\n    a: {[key in Key]: number | string | Date},\n    b: {[key in Key]: number | string | Date},\n) => number {\n    return order === \"desc\"\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy)\n}\n\nfunction stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\n    const stabilizedThis = array.map((el, index) => [el, index] as [T, number])\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0])\n        if (order !== 0) return order\n        return a[1] - b[1]\n    })\n    return stabilizedThis.map(el => el[0])\n}\n\nexport interface HeadCell<T> {\n    disablePadding: boolean\n    id: keyof T\n    label: string\n    numeric: boolean\n}\n\ninterface EnhancedTableHeadProps<T> {\n    headCells: HeadCell<T>[]\n    classes: ReturnType<typeof useStyles>\n    onRequestSort: (event: React.MouseEvent<unknown>, property: keyof T) => void\n    order: Order\n    orderBy: keyof T\n}\n\nfunction EnhancedTableHead<T>(props: EnhancedTableHeadProps<T>) {\n    const {classes, headCells, order, orderBy, onRequestSort} = props\n    const createSortHandler = (property: keyof T) => (\n        event: React.MouseEvent<unknown>,\n    ) => {\n        onRequestSort(event, property)\n    }\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\"></TableCell>\n                {headCells.map(headCell => (\n                    <TableCell\n                        key={String(headCell.id)}\n                        align={headCell.numeric ? \"right\" : \"left\"}\n                        padding={headCell.disablePadding ? \"none\" : \"default\"}\n                        sortDirection={orderBy === headCell.id ? order : false}>\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : \"asc\"}\n                            onClick={createSortHandler(headCell.id)}>\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                                    {order === \"desc\"\n                                        ? \"sorted descending\"\n                                        : \"sorted ascending\"}\n                                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    )\n}\n\nconst useToolbarStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            paddingLeft: theme.spacing(2),\n            paddingRight: theme.spacing(1),\n        },\n        highlight:\n            theme.palette.type === \"light\"\n                ? {\n                      color: theme.palette.secondary.main,\n                      backgroundColor: lighten(\n                          theme.palette.secondary.light,\n                          0.85,\n                      ),\n                  }\n                : {\n                      color: theme.palette.text.primary,\n                      backgroundColor: theme.palette.secondary.dark,\n                  },\n        title: {\n            flex: \"1 1 100%\",\n        },\n    }),\n)\n\ninterface EnhancedTableToolbarProps {\n    title: string\n    toolbarBarItems?: JSX.Element[]\n}\n\nconst EnhancedTableToolbar = ({\n    title,\n    toolbarBarItems = [],\n}: EnhancedTableToolbarProps) => {\n    const classes = useToolbarStyles()\n\n    return (\n        <Toolbar className={clsx(classes.root)}>\n            <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\">\n                {title}\n            </Typography>\n            {toolbarBarItems}\n        </Toolbar>\n    )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            width: \"100%\",\n        },\n        paper: {\n            width: \"100%\",\n            marginBottom: theme.spacing(2),\n        },\n        table: {\n            minWidth: 750,\n        },\n        visuallyHidden: {\n            border: 0,\n            clip: \"rect(0 0 0 0)\",\n            height: 1,\n            margin: -1,\n            overflow: \"hidden\",\n            padding: 0,\n            position: \"absolute\",\n            top: 20,\n            width: 1,\n        },\n    }),\n)\n\nexport interface EnhancedTableProps<T> {\n    initialOrderProperty: keyof T\n    nameProperty: keyof T\n    rows: T[]\n    headCells: HeadCell<T>[]\n    title: string\n    onRowClick: (row: T) => void\n    toolbarBarItems?: JSX.Element[]\n}\nexport type ComparableObject = {[key: string]: number | string | Date}\nexport default function EnhancedTable<T extends ComparableObject>({\n    initialOrderProperty,\n    nameProperty,\n    rows,\n    headCells,\n    title,\n    onRowClick,\n    toolbarBarItems = [],\n}: EnhancedTableProps<T>) {\n    const classes = useStyles()\n    const [order, setOrder] = React.useState<Order>(\"desc\")\n    const [orderBy, setOrderBy] = React.useState<keyof T>(initialOrderProperty)\n    const [page, setPage] = React.useState(0)\n    const [rowsPerPage, setRowsPerPage] = React.useState(20)\n\n    const handleRequestSort = (property: keyof T) => {\n        const isAsc = orderBy === property && order === \"asc\"\n        setOrder(isAsc ? \"desc\" : \"asc\")\n        setOrderBy(property)\n    }\n\n    const handleChangePage = (newPage: number) => {\n        setPage(newPage)\n    }\n\n    const handleChangeRowsPerPage = (\n        event: React.ChangeEvent<HTMLInputElement>,\n    ) => {\n        setRowsPerPage(parseInt(event.target.value, 10))\n        setPage(0)\n    }\n\n    const emptyRows =\n        rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage)\n\n    return (\n        <div className={classes.root}>\n            <Paper className={classes.paper}>\n                <EnhancedTableToolbar\n                    title={title}\n                    toolbarBarItems={toolbarBarItems}\n                />\n                <TableContainer>\n                    <Table\n                        className={classes.table}\n                        aria-labelledby=\"tableTitle\"\n                        size={\"medium\"}\n                        aria-label=\"enhanced table\">\n                        <EnhancedTableHead\n                            headCells={headCells}\n                            classes={classes}\n                            order={order}\n                            orderBy={orderBy}\n                            onRequestSort={(_, property) =>\n                                handleRequestSort(property)\n                            }\n                        />\n                        <TableBody>\n                            {stableSort(rows, getComparator(order, orderBy))\n                                .slice(\n                                    page * rowsPerPage,\n                                    page * rowsPerPage + rowsPerPage,\n                                )\n                                .map(row => {\n                                    return (\n                                        <TableRow\n                                            hover\n                                            onClick={() => onRowClick(row)}\n                                            tabIndex={-1}\n                                            key={String(\n                                                row[\"id\"] || row[nameProperty],\n                                            )}>\n                                            <TableCell padding=\"checkbox\" />\n                                            <TableCell\n                                                component=\"th\"\n                                                scope=\"row\"\n                                                padding=\"none\">\n                                                {row[nameProperty]}\n                                            </TableCell>\n                                            {headCells\n                                                .filter(property => {\n                                                    return (\n                                                        property.id !==\n                                                        nameProperty\n                                                    )\n                                                })\n                                                .map((rowName, i) => {\n                                                    return (\n                                                        <TableCell\n                                                            key={i}\n                                                            align=\"right\">\n                                                            {row[rowName.id]}\n                                                        </TableCell>\n                                                    )\n                                                })}\n                                        </TableRow>\n                                    )\n                                })}\n                            {emptyRows > 0 && (\n                                <TableRow style={{height: 53 * emptyRows}}>\n                                    <TableCell colSpan={6} />\n                                </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[5, 10, 20, 30]}\n                    component=\"div\"\n                    count={rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={(_, page) => handleChangePage(page)}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n        </div>\n    )\n}\n","import {Grow, makeStyles, Paper} from \"@material-ui/core\"\nimport * as React from \"react\"\nimport {useEffect, useState} from \"react\"\n// @ts-ignore\nimport Markdown from \"react-remarkable\"\n\nconst useStyles = makeStyles(() => ({\n    container: {\n        display: \"flex\",\n        justifyContent: \"center\",\n    },\n\n    paper: {\n        marginTop: \"1vh\",\n        maxWidth: 800,\n        width: \"90vw\",\n    },\n}))\n\nexport interface MarkdownComponentProps {\n    url: string\n    variableMaps?: {from: string | RegExp; to: string}[]\n    onFinish?: () => void\n}\n\nconst MarkdownComponent = ({\n    url: fileName,\n    onFinish,\n    variableMaps = [],\n}: MarkdownComponentProps) => {\n    const classes = useStyles()\n\n    const [content, changeContent] = useState<string>()\n\n    useEffect(() => {\n        ;(async () => {\n            let response = await fetch(`/assets/docs/${fileName}`)\n            let markdown = await response.text()\n            variableMaps.forEach(({from, to}) => {\n                markdown = markdown.replace(from, to)\n            })\n            changeContent(markdown)\n        })()\n    })\n\n    return (\n        <div className={classes.container}>\n            <Grow onEntered={onFinish} timeout={1000} in={true}>\n                <Paper className={classes.paper}>\n                    <div style={{padding: 25}}>\n                        {content ? (\n                            <Markdown options={{html: true}} source={content} />\n                        ) : null}\n                    </div>\n                </Paper>\n            </Grow>\n        </div>\n    )\n}\n\nexport default MarkdownComponent\n","import Button from \"@material-ui/core/Button\"\nimport Card from \"@material-ui/core/Card\"\nimport CardContent from \"@material-ui/core/CardContent\"\nimport Container from \"@material-ui/core/Container\"\nimport Grid from \"@material-ui/core/Grid\"\nimport {makeStyles} from \"@material-ui/core/styles\"\nimport Typography from \"@material-ui/core/Typography\"\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\"\nimport LockIcon from \"@material-ui/icons/Lock\"\nimport React from \"react\"\nimport MarkdownComponent from \"../components/markdown\"\nimport InsertCommentIcon from '@material-ui/icons/InsertComment';\n\nconst useStyles = makeStyles(theme => ({\n    icon: {\n        marginRight: theme.spacing(2),\n    },\n    heroContent: {\n        backgroundImage: \"url('https://i.imgur.com/73oxpfv.png')\",\n        backgroundSize: \"cover\",\n        backgroundRepeat: \"no-repeat\",\n\n        padding: theme.spacing(8, 0, 6),\n    },\n    heroButtons: {\n        marginTop: theme.spacing(4),\n    },\n\n    title: {\n        color: \"white\",\n    },\n\n    cardGrid: {\n        paddingTop: theme.spacing(8),\n        paddingBottom: theme.spacing(8),\n    },\n    card: {\n        height: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n    },\n    cardMedia: {\n        paddingTop: \"56.25%\", // 16:9\n    },\n    cardContent: {\n        flexGrow: 1,\n    },\n    footer: {\n        backgroundColor: theme.palette.background.paper,\n        padding: theme.spacing(6),\n    },\n}))\n\nexport interface HomePageProps {}\n\nexport default function HomePage() {\n    const classes = useStyles()\n\n    return (\n        <React.Fragment>\n            <main>\n                {/* Hero unit */}\n                <div className={classes.heroContent}>\n                    <Container maxWidth=\"sm\">\n                        <Typography\n                            className={classes.title}\n                            component=\"h1\"\n                            variant=\"h2\"\n                            align=\"center\"\n                            color=\"textPrimary\"\n                            gutterBottom>\n                            Welcome to Operation Dynamo\n                        </Typography>\n\n                        <MarkdownComponent url={\"intro.md\"} />\n\n                        <div className={classes.heroButtons}>\n                            <Grid container spacing={2} justify=\"center\">\n\n                            <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        startIcon={<InsertCommentIcon />}\n                                        href={\"/contact\"}>\n                                        Get Invite\n                                    </Button>\n                                </Grid>\n\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        startIcon={<AccountCircleIcon />}\n                                        href={\"/account/register/choose\"}>\n                                        Register\n                                    </Button>\n                                </Grid>\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"default\"\n                                        href={\"/account/login\"}\n                                        startIcon={<LockIcon />}>\n                                        Login\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Container>\n                </div>\n                <Container className={classes.cardGrid} maxWidth=\"md\">\n                    <Typography\n                        component=\"h1\"\n                        variant=\"h2\"\n                        align=\"center\"\n                        color=\"textPrimary\"\n                        gutterBottom>\n                        Getting Started\n                    </Typography>\n\n                    {/* End hero unit */}\n                    <Grid container spacing={4}>\n                        <Grid item xs={12} sm={6}>\n                            <Card className={classes.card}>\n                                <CardContent>\n                                    <Typography\n                                        gutterBottom\n                                        variant=\"h5\"\n                                        component=\"h2\">\n                                        3D Printer Volunteer - Tutorial\n                                    </Typography>\n\n                                    <iframe\n                                        title=\"hello\"\n                                        width=\"100%\"\n                                        height=\"315\"\n                                        src=\"https://www.youtube.com/embed/G7SquoBZOi8\"\n                                        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                                        allowFullScreen\n                                    />\n                                </CardContent>\n                            </Card>\n                        </Grid>\n\n                        <Grid item xs={12} sm={6}>\n                            <Card className={classes.card}>\n                                <CardContent>\n                                    <Typography\n                                        gutterBottom\n                                        variant=\"h5\"\n                                        component=\"h2\">\n                                        Medical Submitter - Tutorial\n                                    </Typography>\n\n                                    <iframe\n                                        title=\"hello\"\n                                        width=\"100%\"\n                                        height=\"315\"\n                                        src=\"https://www.youtube.com/embed/RNVR8Y-zPQU\"\n                                        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                                        allowFullScreen\n                                    />\n                                </CardContent>\n                            </Card>\n                        </Grid>\n                    </Grid>\n                </Container>\n            </main>\n            {/* Footer */}\n        </React.Fragment>\n    )\n}\n","import {Button} from \"@material-ui/core\"\nimport * as React from \"react\"\nimport {useEffect, useState} from \"react\"\nimport {BasePageProps} from \"../App\"\nimport PageComponent from \"../components/page\"\nimport EnhancedTable, {ComparableObject, HeadCell} from \"../components/table\"\nimport {\n    AllUserInfoFragment,\n    JobInfoFragment,\n    useAcceptedJobsQuery,\n    UserType,\n    useSubmittedJobsQuery,\n} from \"../graphql/schema.generated\"\nimport {goTo} from \"../services/utils\"\nimport HomePage from \"./home\"\n\nconst headCells: HeadCell<JobInfoFragment>[] = [\n    {\n        id: \"name\",\n        numeric: false,\n        disablePadding: true,\n        label: \"Print Jobs\",\n    },\n    {id: \"id\", numeric: true, disablePadding: false, label: \"Job ID\"},\n    {id: \"progress\", numeric: true, disablePadding: false, label: \"Progress\"},\n    {id: \"quantity\", numeric: true, disablePadding: true, label: \"Quantity\"},\n    {id: \"createdAt\", numeric: true, disablePadding: false, label: \"Created\"},\n]\n\nexport interface AuthenticatedHomePageViewProps {\n    jobs: JobInfoFragment[]\n    type: UserType\n}\nexport const AuthenticatedHomePageView: React.FC<AuthenticatedHomePageViewProps> = ({\n    jobs,\n    type,\n}) => {\n    return (\n        <EnhancedTable\n        initialOrderProperty={\"createdAt\"}\n        nameProperty={\"name\"}\n            toolbarBarItems={[\n                type === \"Submitter\" ? (\n                    <Button\n                        key={\"create\"}\n                        href=\"/job/create\"\n                        style={{width: 300, height : 40}}\n                        variant=\"contained\"\n                        color=\"primary\">\n                        Create Print Job\n                    </Button>\n                ) : (\n                    <Button\n                        key={\"find\"}\n                        href=\"/find\"\n                        style={{width: 300, height : 40}}\n                        variant=\"contained\"\n                        color=\"primary\">\n                        Find Print Jobs\n                    </Button>\n                ),\n            ]}\n            rows={(jobs as unknown) as ComparableObject[]}\n            headCells={(headCells as unknown) as HeadCell<ComparableObject>[]}\n            onRowClick={row => {\n                goTo(`/job?jobID=${row.id}`)\n            }}\n            title={type === \"Submitter\" ? \"Submitted Jobs\" : \"Accepted Jobs\"}\n        />\n    )\n}\n\ninterface SubmitterHomePageProps extends BasePageProps {\n    type: UserType\n}\nconst SubmitterHomePage: React.FC<SubmitterHomePageProps> = ({\n    type,\n    updateSnack,\n}) => {\n    const {error, data} = useSubmittedJobsQuery()\n    const [jobs, changeJobs] = useState<JobInfoFragment[]>()\n    useEffect(() => {\n        if (!error && data?.submittedJobs) {\n            changeJobs(data.submittedJobs)\n        } else if (error) {\n            updateSnack({message: error.message})\n        }\n    }, [data, error, updateSnack])\n\n    return (\n        <div>\n            {jobs ? (\n                <AuthenticatedHomePageView jobs={jobs} type={type} />\n            ) : null}\n        </div>\n    )\n}\n\ninterface VolunteerHomePageProps extends BasePageProps {\n    type: UserType\n}\nconst VolunteerHomePage: React.FC<VolunteerHomePageProps> = ({\n    type,\n    updateSnack,\n}) => {\n    const {error, data} = useAcceptedJobsQuery()\n    const [jobs, changeJobs] = useState<JobInfoFragment[]>()\n    useEffect(() => {\n        if (!error && data?.acceptedJobs) {\n            changeJobs(data.acceptedJobs)\n        } else if (error) {\n            updateSnack({message: error.message})\n        }\n    }, [data, error, updateSnack])\n\n    return (\n        <div>\n            {jobs ? (\n                <AuthenticatedHomePageView jobs={jobs} type={type} />\n            ) : null}\n        </div>\n    )\n}\n\nexport interface IndexPageProps extends BasePageProps {}\nconst IndexPage: React.FC<IndexPageProps> = props => {\n    return (\n        <div>\n            <PageComponent\n                disableHide={false}\n                showFooter={true}\n                title=\"Home\"\n                rolePages={[\n                    {\n                        component: (user: AllUserInfoFragment) => (\n                            <SubmitterHomePage type={user.type} {...props} />\n                        ),\n                        role: \"Submitter\",\n                    },\n                    {\n                        component: (user: AllUserInfoFragment) => (\n                            <VolunteerHomePage type={user.type} {...props} />\n                        ),\n                        role: \"Volunteer\",\n                    },\n                ]}>\n                <HomePage />\n            </PageComponent>\n            <br />\n        </div>\n    )\n}\n\nexport default IndexPage\n","export interface LocationSearch {\n    type: string\n    licence: string\n    features: LocationFeature[]\n}\n\nexport interface LocationFeature {\n    type: FeatureType\n    properties: Properties\n    bbox: number[]\n    geometry?: Geometry\n}\n\nexport interface Geometry {\n    type: GeometryType\n    coordinates: number[]\n}\n\nexport enum GeometryType {\n    Point = \"Point\",\n}\n\nexport interface Properties {\n    place_id: number\n    osm_type: OsmType\n    osm_id: number\n    display_name: string\n    place_rank: number\n    category: Category\n    type: string\n    importance: number\n    icon?: string\n}\n\nexport enum Category {\n    Boundary = \"boundary\",\n    Place = \"place\",\n    Railway = \"railway\",\n}\n\nexport enum OsmType {\n    Node = \"node\",\n    Relation = \"relation\",\n    Way = \"way\",\n}\n\nexport enum FeatureType {\n    Feature = \"Feature\",\n}\n\nexport const searchLocations = async (query: string): Promise<LocationSearch> => {\n    const response = await fetch(\n        `https://nominatim.openstreetmap.org/search?q=${encodeURI(\n            query,\n        )}&format=geojson`,\n    )\n    return response.json()\n}\n","import * as React from \"react\"\nimport MarkdownComponent from \"../components/markdown\"\nimport PageComponent from \"../components/page\"\n\nconst AboutPage = () => {\n    return (\n        <PageComponent showFooter={true} title=\"About\">\n            <MarkdownComponent url=\"about.md\" />\n        </PageComponent>\n    )\n}\n\nexport default AboutPage\n","import {\n    ButtonBase,\n    createStyles,\n    makeStyles,\n    Theme,\n    Typography,\n} from \"@material-ui/core\"\nimport React from \"react\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            minWidth: 300,\n            width: \"100%\",\n        },\n        image: {\n            position: \"relative\",\n            height: \"40vh\",\n            [theme.breakpoints.down(\"xs\")]: {\n                width: \"100% !important\", // Overrides inline-style\n                height: 100,\n            },\n            \"&:hover, &$focusVisible\": {\n                zIndex: 1,\n                \"& $imageBackdrop\": {\n                    opacity: 0.5,\n                },\n                \"& $imageMarked\": {\n                    opacity: 0,\n                },\n                \"& $imageTitle\": {\n                    border: \"4px solid currentColor\",\n                },\n            },\n        },\n        focusVisible: {},\n        imageButton: {\n            position: \"absolute\",\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0,\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            color: theme.palette.common.white,\n            fontWeight: 50,\n        },\n        imageSrc: {\n            position: \"absolute\",\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0,\n            backgroundSize: \"cover\",\n            backgroundPosition: \"center 40%\",\n        },\n        imageBackdrop: {\n            position: \"absolute\",\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0,\n            backgroundColor: theme.palette.common.black,\n            opacity: 0.6,\n            transition: theme.transitions.create(\"opacity\"),\n        },\n        imageTitle: {\n            position: \"relative\",\n            padding: `${theme.spacing(2)}px ${theme.spacing(\n                4,\n            )}px ${theme.spacing(1) + 6}px`,\n        },\n        imageMarked: {\n            height: 3,\n            width: 18,\n            backgroundColor: theme.palette.common.white,\n            position: \"absolute\",\n            bottom: -2,\n            left: \"calc(50% - 9px)\",\n            transition: theme.transitions.create(\"opacity\"),\n        },\n    }),\n)\n\nexport interface PictureButtonProps {\n    url: string\n    title: string\n    width: string\n    href: string\n}\n\nconst PictureButton = ({url, title, width, href}: PictureButtonProps) => {\n    const classes = useStyles()\n\n    return (\n        <ButtonBase\n            href={href}\n            focusRipple\n            key={title}\n            className={classes.image}\n            focusVisibleClassName={classes.focusVisible}\n            style={{\n                height: 200,\n\n                width: width,\n            }}>\n            <span\n                className={classes.imageSrc}\n                style={{\n                    backgroundImage: `url(${url})`,\n                }}\n            />\n            <span className={classes.imageBackdrop} />\n            <span className={classes.imageButton}>\n                <Typography\n                    component=\"span\"\n                    variant=\"h4\"\n                    color=\"inherit\"\n                    className={classes.imageTitle}>\n                    {title}\n                    <span className={classes.imageMarked} />\n                </Typography>\n            </span>\n        </ButtonBase>\n    )\n}\n\nexport default PictureButton\n","import {createStyles, makeStyles, Typography} from \"@material-ui/core\"\nimport * as React from \"react\"\nimport PageComponent from \"../../components/page\"\nimport PictureButton from \"../../components/picture-button\"\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            minWidth: 300,\n            width: \"100%\",\n        },\n    }),\n)\n\nconst images = [\n    {\n        url:\n            \"https://cdn.pixabay.com/photo/2016/01/19/15/05/doctor-1149149_960_720.jpg\",\n        title: \"Medical\",\n        width: \"50%\",\n        href: \"/account/register?type=Submitter\",\n    },\n    {\n        url:\n            \"https://cdn.pixabay.com/photo/2018/10/19/08/46/3d-printing-3758154_960_720.jpg\",\n        title: \"Maker\",\n        width: \"50%\",\n        href: \"/account/register?type=Volunteer\",\n    },\n]\n\nconst AccountChoosePage = () => {\n    const classes = useStyles()\n\n    return (\n        <PageComponent showFooter={true} title=\"Choose Type\">\n            <div style={{display: \"flex\", justifyContent: \"center\"}}>\n                <Typography\n                    style={{alignSelf: \"center\", marginLeft: 10}}\n                    component=\"h2\"\n                    variant=\"h2\">\n                    Choose Account Type\n                </Typography>\n            </div>\n            <div style={{padding: \"2%\"}}>\n                <div style={{textAlign: \"center\", marginTop: 20}}>\n                    <div className={classes.root}>\n                        {images.map((image, i) => (\n                            <PictureButton key={i} {...image} />\n                        ))}\n                    </div>\n                </div>\n            </div>\n        </PageComponent>\n    )\n}\n\nexport default AccountChoosePage\n","import {useState} from \"react\"\nimport {setNested} from \"../services/utils\"\n\nconst useForm = <\n    T extends {\n        [key: string]: any\n    }\n>(\n    initial: Partial<T> | undefined = {},\n) => {\n    const [form, changeForm] = useState<Partial<T>>(initial)\n\n    const updateForm = (path: string, value: any) => {\n        changeForm(old => {\n            //@ts-ignore\n            const newV: Partial<T> = setNested(old, path, value)\n            // console.log(newV)\n            return newV\n        })\n    }\n    return {form, updateForm}\n}\n\nexport default useForm\n","import {Button} from \"@material-ui/core\"\nimport BackupIcon from \"@material-ui/icons/Backup\"\nimport React, {useCallback, useState} from \"react\"\nimport Dropzone from \"react-dropzone\"\nimport {FileUploadFormItem} from \"./form\"\n\nexport type FormFileUploadItemProps = FileUploadFormItem & {\n    handleChange: (id: string, value: File | string) => void\n}\n\nconst FormFileUploadItem = ({\n    id,\n    label,\n    handleChange,\n    fileNameId,\n}: FormFileUploadItemProps) => {\n    const [fileName, changeFileName] = useState<string>()\n\n    const onDrop = useCallback(\n        acceptedFiles => {\n            acceptedFiles.forEach((file: File) => {\n                const reader = new FileReader()\n\n                reader.onabort = () => console.log(\"file reading was aborted\")\n                reader.onerror = () => console.log(\"file reading has failed\")\n                reader.onload = () => {\n                    changeFileName(file.name)\n                    handleChange(id, file)\n                    if (fileNameId) {\n                        handleChange(fileNameId, file.name)\n                    }\n                }\n                reader.readAsArrayBuffer(file)\n            })\n        },\n        [fileNameId, handleChange, id],\n    )\n\n    return (\n        <Dropzone multiple={false} maxSize={10 ** 20} onDrop={onDrop}>\n            {({getRootProps, getInputProps}) => (\n                <div\n                    style={{\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        marginTop: 20,\n                    }}\n                    {...getRootProps()}>\n                    <input {...getInputProps()} />\n                    <Button\n                        fullWidth\n                        variant=\"contained\"\n                        startIcon={<BackupIcon />}>\n                        {fileName ? `${fileName}` : label}\n                    </Button>\n                </div>\n            )}\n        </Dropzone>\n    )\n}\n\nexport default FormFileUploadItem\n","/* eslint-disable no-use-before-define */\nimport TextField, {TextFieldProps} from \"@material-ui/core/TextField\"\nimport Autocomplete from \"@material-ui/lab/Autocomplete\"\nimport React, {useEffect, useState} from \"react\"\nimport useDebounce from \"../hooks/useDebounce\"\nimport {LocationFeature, searchLocations} from \"../services/location-search\"\n\nexport type OsmAutocompleteProps<T> = {\n    onLocationSelect?: (feature: LocationFeature | null) => void\n    defaultValue?: T\n    freeSolo : boolean\n    textProps?: TextFieldProps\n}\n\nexport default function OsmAutocomplete(\n    props: OsmAutocompleteProps<LocationFeature>,\n) {\n    const {onLocationSelect, defaultValue, textProps, freeSolo} = props\n    const [text, changeText] = useState<string>(\"\")\n    const debouncedText = useDebounce(text, 500)\n    const [options, changeOptions] = useState<LocationFeature[]>([])\n    useEffect(() => {\n        const search = async () => {\n            if (debouncedText !== \"\") {\n                const search = await searchLocations(debouncedText)\n                changeOptions(() => {\n                    return [...search.features]\n                })\n            }\n        }\n        search()\n    }, [debouncedText])\n\n    return (\n        <Autocomplete\n            defaultValue={defaultValue}\n            freeSolo={freeSolo}\n            id=\"combo-box-demo\"\n            filterOptions={x => x}\n            onChange={(_: any, newValue: LocationFeature | null) => {\n                if (onLocationSelect) {\n                    onLocationSelect(newValue)\n                }\n            }}\n            renderInput={params => (\n                <TextField\n                    {...params}\n                    {...textProps}\n                    onChange={({target: {value}}) => {\n                        changeText(value)\n                        if (onLocationSelect) {\n                            //@ts-ignore\n                            onLocationSelect({\n                                properties: {\n                                    display_name: value,\n                                },\n                            })\n                        }\n                    }}\n                />\n            )}\n            options={options}\n            getOptionLabel={option => option.properties.display_name}\n        />\n    )\n}\n","import {useEffect, useState} from \"react\"\n\n// Our hook\nexport default function useDebounce<T>(value: T, delay: number) {\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value)\n\n    useEffect(() => {\n        // Set debouncedValue to value (passed in) after the specified delay\n        const handler = setTimeout(() => {\n            setDebouncedValue(value)\n        }, delay)\n\n        // Return a cleanup function that will be called every time ...\n        // ... useEffect is re-called. useEffect will only be re-called ...\n        // ... if value changes (see the inputs array below).\n        // This is how we prevent debouncedValue from changing if value is ...\n        // ... changed within the delay period. Timeout gets cleared and restarted.\n        // To put it in context, if the user is typing within our app's ...\n        // ... search box, we don't want the debouncedValue to update until ...\n        // ... they've stopped typing for more than 500ms.\n        return () => {\n            clearTimeout(handler)\n        }\n    }, [value, delay]) // ... need to be able to change that dynamically. // You could also add the \"delay\" var to inputs array if you ... // Only re-call effect if value changes\n\n    return debouncedValue\n}","import React, {useCallback, useEffect} from \"react\"\nimport {LocationFeature} from \"../../services/location-search\"\nimport OsmAutocomplete from \"../osm-autocomplete\"\nimport {LocationFormItem} from \"./form\"\n\nexport type FormLocationItemProps = LocationFormItem & {\n    handleChange: (id: string, value: string | number) => void\n}\nconst FormLocationItem = ({\n    id,\n    autoComplete,\n    label,\n    required,\n    handleChange,\n    defaultValue,\n    locationIds,\n    freeSolo = false\n}: FormLocationItemProps) => {\n    const setLocation = useCallback(\n        (location: LocationFeature | undefined | null) => {\n            if (location) {\n                handleChange(id, location.properties.display_name)\n                if (locationIds) {\n                    const {latitude, longitude} = locationIds\n                    if (location.geometry){\n                        handleChange(latitude, location.geometry.coordinates[1])\n                        handleChange(longitude, location.geometry.coordinates[0])\n                    }\n                }\n            }\n        },\n        [handleChange, id, locationIds],\n    )\n\n    useEffect(() => {\n        setLocation(defaultValue)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return (\n        <OsmAutocomplete\n            textProps={{\n                variant: \"outlined\",\n                required,\n                fullWidth: true,\n                id,\n                label,\n                name: id,\n                autoComplete: autoComplete,\n            }}\n            freeSolo={freeSolo}\n            defaultValue={defaultValue}\n            onLocationSelect={feature => {\n                setLocation(feature)\n            }}\n        />\n    )\n}\n\nexport default FormLocationItem\n","import {IconButton, InputAdornment, Tooltip} from \"@material-ui/core\"\nimport React from \"react\"\n\nexport interface TooltipComponentProps {\n    hint : string\n    icon : JSX.Element\n}\nexport const TooltipComponent: React.FC<TooltipComponentProps> = ({hint, icon}) => {\n    return (\n        <InputAdornment position=\"end\">\n            <Tooltip title={hint} placement=\"top\" arrow>\n                <IconButton aria-label=\"delete\">\n                    {icon}\n                </IconButton>\n            </Tooltip>\n        </InputAdornment>\n    )\n}\n\nexport default TooltipComponent","import {InputLabel, MenuItem, Select} from \"@material-ui/core\"\nimport FormControl from \"@material-ui/core/FormControl\"\nimport HelpIcon from \"@material-ui/icons/Help\"\nimport React, {useEffect, useState} from \"react\"\nimport TooltipComponent from \"../tooltip\"\nimport {SelectFormItem} from \"./form\"\n\nexport type FormSelectItemProps = SelectFormItem & {\n    handleChange: (id: string, value: string) => void\n}\n\nconst FormSelectItem = ({\n    id,\n    autoComplete,\n    options,\n    label,\n    handleChange,\n    required,\n    defaultValue = \"\",\n    hint,\n}: FormSelectItemProps) => {\n    const [selectValue, changeSelectValue] = useState<string>(defaultValue)\n\n    useEffect(() => {\n        handleChange(id, defaultValue)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return (\n        <FormControl required={required} variant=\"outlined\" fullWidth>\n            <InputLabel id=\"select-outlined-label\">{label}</InputLabel>\n            <Select\n                endAdornment={\n                    hint ? (\n                        <TooltipComponent hint={hint} icon={<HelpIcon />} />\n                    ) : (\n                        undefined\n                    )\n                }\n                required={required}\n                value={selectValue}\n                autoComplete={autoComplete}\n                labelId=\"select-outlined-label\"\n                id={id}\n                onChange={({target: {value}}) => {\n                    if (typeof value === \"string\") {\n                        changeSelectValue(value)\n                        handleChange(id, value)\n                    }\n                }}\n                label={label}>\n                {Object.keys(options).map((value, i) => {\n                    return (\n                        <MenuItem key={i} value={value}>\n                            {options[value]}\n                        </MenuItem>\n                    )\n                })}\n            </Select>\n        </FormControl>\n    )\n}\n\nexport default FormSelectItem\n","import {makeStyles, Slider, Typography} from \"@material-ui/core\"\nimport React, {useEffect} from \"react\"\nimport {SliderFormItem} from \"./form\"\n\nconst useStyles = makeStyles({\n    root: {\n        flex: 1,\n        width: 390,\n    },\n})\n\nfunction valuetext(value: number, ending: string) {\n    return `${value} ${ending}`\n}\n\nexport type FormSliderItemProps = SliderFormItem & {\n    handleChange: (id: string, value: number) => void\n}\n\nconst FormSliderItem = ({\n    id,\n    step,\n    ending = \"\",\n    defaultValue = 0,\n    min,\n    max,\n    label,\n    handleChange,\n}: FormSliderItemProps) => {\n    const classes = useStyles()\n    useEffect(() => {\n        handleChange(id, defaultValue)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n    return (\n        <div className={classes.root}>\n            <Typography id=\"discrete-slider\" gutterBottom>\n                {label}\n            </Typography>\n            <Slider\n                id={id}\n                onChange={(_, value) => {\n                    if (typeof value === \"number\") {\n                        handleChange(id, value)\n                    }\n                }}\n                defaultValue={defaultValue}\n                getAriaValueText={value => valuetext(value, ending)}\n                aria-labelledby=\"discrete-slider-always\"\n                step={step}\n                valueLabelDisplay=\"on\"\n                min={min}\n                max={max}\n            />\n        </div>\n    )\n}\n\nexport default FormSliderItem\n","import {FormControl, InputLabel, OutlinedInput} from \"@material-ui/core\"\nimport HelpIcon from \"@material-ui/icons/Help\"\nimport React, {useEffect, useState} from \"react\"\nimport TooltipComponent from \"../tooltip\"\nimport {TextFormItem} from \"./form\"\n\nexport type FormTextItemProps = TextFormItem & {\n    handleChange: (id: string, value: string) => void\n}\nconst FormTextItem = ({\n    id,\n    autoComplete,\n    textType,\n    label,\n    required,\n    handleChange,\n    defaultValue,\n    hint,\n}: FormTextItemProps) => {\n    const [textValue, changeTextValue] = useState<string>(defaultValue || \"\")\n\n    useEffect(() => {\n        handleChange(id, defaultValue)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return (\n        <div style={{display: \"flex\"}}>\n            <FormControl fullWidth variant=\"outlined\">\n                <InputLabel htmlFor={id}>{label}</InputLabel>\n                <OutlinedInput\n                    fullWidth\n                    type={textType}\n                    required={required}\n                    value={textValue}\n                    onChange={({target: {name, value}}) => {\n                        changeTextValue(value)\n                        handleChange(name, value)\n                    }}\n                    id={id}\n                    name={id}\n                    label={label}\n                    autoComplete={autoComplete}\n                    endAdornment={\n                        hint ? (\n                            <TooltipComponent hint={hint} icon={<HelpIcon />} />\n                        ) : (\n                            undefined\n                        )\n                    }\n                />\n            </FormControl>\n        </div>\n    )\n}\n\nexport default FormTextItem\n","import React from \"react\"\nimport FormFileUploadItem from \"./file-upload\"\nimport {FormItem} from \"./form\"\nimport FormLocationItem from \"./location\"\nimport FormSelectItem from \"./select\"\nimport FormSliderItem from \"./slider\"\nimport FormTextItem from \"./text\"\n\nexport type FormItemResolverComponentProps = FormItem & {\n    handleChange: (id: string, value: any) => void\n}\nexport default function FormItemResolverComponent(\n    formItem: FormItemResolverComponentProps,\n) {\n    const resolve = () => {\n        switch (formItem.type) {\n            case \"text\":\n                return <FormTextItem {...formItem} />\n            case \"select\":\n                return <FormSelectItem {...formItem} />\n            case \"slider\":\n                return <FormSliderItem {...formItem} />\n\n            case \"location\":\n                return <FormLocationItem {...formItem} />\n\n            case \"file-upload\":\n                return <FormFileUploadItem {...formItem} />\n\n            default:\n                throw new Error(\"impossible case\")\n        }\n    }\n\n    return <div>{resolve()}</div>\n}\n","import {Button, Grid, makeStyles} from \"@material-ui/core\"\nimport React, {useCallback} from \"react\"\nimport useForm from \"../../hooks/useForm\"\nimport FormItemResolverComponent from \"./resolver\"\n\nexport interface FormItemBase {\n    label: string\n    id: string\n    autoComplete?: string\n    alignment: {xs?: 12 | 6; sm?: 12 | 6}\n    required?: boolean\n    defaultValue?: any\n    hint?: string\n}\n\nexport interface TextFormItem extends FormItemBase {\n    textType?: string\n    type: \"text\"\n}\n\nexport interface LocationFormItem extends FormItemBase {\n    textType?: string\n    freeSolo? : boolean\n    locationIds?: {\n        latitude: string\n        longitude: string\n    }\n    type: \"location\"\n}\n\nexport interface SliderFormItem extends FormItemBase {\n    ending?: string\n    step: number\n    type: \"slider\"\n    min: number\n    max: number\n}\n\nexport interface SelectFormItem extends FormItemBase {\n    options: {[value: string]: string}\n    type: \"select\"\n}\n\nexport interface FileUploadFormItem extends FormItemBase {\n    fileNameId?: string\n    type: \"file-upload\"\n}\n\nexport type FormItem =\n    | TextFormItem\n    | SelectFormItem\n    | SliderFormItem\n    | LocationFormItem\n    | FileUploadFormItem\n\nconst useStyles = makeStyles(theme => ({\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    spacing: {\n        marginTop: 30,\n    },\n}))\n\nexport interface FormComponentProps<T> {\n    formItems: FormItem[]\n    initialForm?: Partial<T>\n    onSubmit: (form: T) => void\n    onUpdate?: (id: string, value: any) => void\n    submitButtonTitle: string\n    children?: JSX.Element | JSX.Element[]\n}\nexport default function FormComponent<T>({\n    formItems,\n    submitButtonTitle,\n    onSubmit,\n    children,\n    initialForm,\n    onUpdate,\n}: FormComponentProps<T>) {\n    const classes = useStyles()\n    const {form, updateForm} = useForm<T>(initialForm)\n\n    const update = useCallback(\n        (id: string, value: any) => {\n            updateForm(id, value)\n            if (onUpdate) {\n                onUpdate(id, value)\n            }\n        },\n        [updateForm, onUpdate],\n    )\n\n    return (\n        <form\n            className={classes.form}\n            onSubmit={event => {\n                event.preventDefault()\n                onSubmit(form as T)\n            }}>\n            <Grid container spacing={2}>\n                {formItems.map((formItem, i) => {\n                    const {xs, sm} = formItem.alignment\n                    return (\n                        <Grid item xs={xs} sm={sm} key={i}>\n                            <FormItemResolverComponent\n                                handleChange={update}\n                                {...formItem}\n                            />\n                        </Grid>\n                    )\n                })}\n            </Grid>\n            {children}\n            <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.spacing}>\n                {submitButtonTitle}\n            </Button>\n        </form>\n    )\n}\n","import {Typography} from \"@material-ui/core\"\nimport Avatar from \"@material-ui/core/Avatar\"\nimport Container from \"@material-ui/core/Container\"\nimport {makeStyles} from \"@material-ui/core/styles\"\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\"\nimport React, {useCallback, useMemo} from \"react\"\nimport {BasePageProps} from \"../../App\"\nimport FormComponent, {FormItem} from \"../../components/form/form\"\nimport PageComponent from \"../../components/page\"\nimport {\n    MutationForgotPasswordArgs,\n    useForgotPasswordMutation,\n} from \"../../graphql/schema.generated\"\nimport {goTo} from \"../../services/utils\"\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n}))\n\nexport interface ForgotPasswordPageViewProps {\n    onSubmit: (form: MutationForgotPasswordArgs) => void\n}\n\nexport const ForgotPasswordPageView: React.FC<ForgotPasswordPageViewProps> = ({\n    onSubmit,\n}) => {\n    const classes = useStyles()\n\n    const formItems = useMemo(\n        () =>\n            [\n                {\n                    type: \"text\",\n                    required: true,\n                    alignment: {xs: 12},\n                    id: \".email\",\n                    label: \"Email\",\n                    autoComplete: \"email\",\n                },\n            ] as FormItem[],\n        [],\n    )\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Forgot Password\n                </Typography>\n\n                <FormComponent\n                    submitButtonTitle=\"Reset Password\"\n                    formItems={formItems}\n                    onSubmit={onSubmit}></FormComponent>\n            </div>\n        </Container>\n    )\n}\n\nexport interface ForgotPasswordPageProps extends BasePageProps {}\nconst ForgotPasswordPage: React.FC<ForgotPasswordPageProps> = ({\n    updateSnack,\n}) => {\n    const [mutate] = useForgotPasswordMutation({\n        onCompleted: data => {\n            if (data.forgotPassword) {\n                updateSnack({\n                    message: \"successfully sent email. redirecting...\",\n                    severity: \"success\",\n                })\n                setTimeout(() => {\n                    goTo(\"/account/login\")\n                }, 1000)\n            }\n        },\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n    })\n\n    const onSubmit = useCallback(\n        (args: MutationForgotPasswordArgs) => {\n            mutate({\n                variables: args,\n            })\n        },\n        [mutate],\n    )\n\n    return (\n        <PageComponent\n            showFooter={true}\n            title=\"Forgot Password\"\n            rolePages={[\n                {role: \"Submitter\", redirect: \"/\"},\n                {role: \"Volunteer\", redirect: \"/\"},\n            ]}>\n            <ForgotPasswordPageView onSubmit={onSubmit} />\n        </PageComponent>\n    )\n}\n\nexport default ForgotPasswordPage\n","import {Typography} from \"@material-ui/core\"\nimport Avatar from \"@material-ui/core/Avatar\"\nimport Container from \"@material-ui/core/Container\"\nimport Grid from \"@material-ui/core/Grid\"\nimport Link from \"@material-ui/core/Link\"\nimport {makeStyles} from \"@material-ui/core/styles\"\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\"\nimport React, {useCallback, useMemo} from \"react\"\nimport {BasePageProps} from \"../../App\"\nimport {tokenKey} from \"../../client\"\nimport FormComponent, {FormItem} from \"../../components/form/form\"\nimport PageComponent from \"../../components/page\"\nimport {\n    MeDocument,\n    MutationLoginArgs,\n    useLoginMutation,\n} from \"../../graphql/schema.generated\"\nimport {goTo} from \"../../services/utils\"\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n}))\n\nexport interface LoginPageViewProps {\n    onSubmit: (form: MutationLoginArgs) => void\n}\n\nexport const LoginPageView: React.FC<LoginPageViewProps> = ({onSubmit}) => {\n    const classes = useStyles()\n\n    const formItems = useMemo(\n        () =>\n            [\n                {\n                    type: \"text\",\n                    required: true,\n                    alignment: {xs: 12},\n                    id: \".email\",\n                    label: \"Email\",\n                    autoComplete: \"email\",\n                },\n                {\n                    type: \"text\",\n                    required: true,\n                    textType: \"password\",\n                    alignment: {xs: 12},\n                    id: \".password\",\n                    label: \"Password\",\n                    autoComplete: \"password\",\n                },\n            ] as FormItem[],\n        [],\n    )\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Login\n                </Typography>\n\n                <FormComponent\n                    submitButtonTitle=\"Login\"\n                    formItems={formItems}\n                    onSubmit={onSubmit}>\n                    <Grid style={{marginTop: 10}} container justify=\"flex-end\">\n                        <Grid item>\n                            <Link href=\"/account/register\" variant=\"body2\">\n                                Don't have an account?\n                            </Link>\n                        </Grid>\n                    </Grid>\n\n                    <Grid container justify=\"flex-end\">\n                        <Grid item>\n                            <Link\n                                href=\"/account/forgot-password\"\n                                variant=\"body2\">\n                                Forgot Password?\n                            </Link>\n                        </Grid>\n                    </Grid>\n                </FormComponent>\n            </div>\n        </Container>\n    )\n}\n\nexport interface LoginPageProps extends BasePageProps {}\nexport const LoginPage: React.FC<LoginPageProps> = ({updateSnack}) => {\n    const [mutate] = useLoginMutation({\n        onCompleted: data => {\n            if (data.login) {\n                localStorage.setItem(tokenKey, data.login.token)\n                goTo(\"/\")\n            }\n        },\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n        refetchQueries: [{query: MeDocument}],\n    })\n\n    const onSubmit = useCallback(\n        (args: MutationLoginArgs) => {\n            mutate({\n                variables: args,\n            })\n        },\n        [mutate],\n    )\n\n    return (\n        <PageComponent\n            showFooter={true}\n            title=\"Login\"\n            rolePages={[\n                {role: \"Submitter\", redirect: \"/\"},\n                {role: \"Volunteer\", redirect: \"/\"},\n            ]}>\n            <LoginPageView onSubmit={onSubmit} />\n        </PageComponent>\n    )\n}\n","import React, {useEffect} from \"react\"\nimport {goTo} from \"../../services/utils\"\n\nexport interface LogoutPageProps {}\nexport const LogoutPage: React.FC<LogoutPageProps> = () => {\n    useEffect(() => {\n        localStorage.clear()\n        goTo(\"/\")\n    }, [])\n    return <div />\n}\n","import {Typography} from \"@material-ui/core\"\nimport React from \"react\"\n\nexport interface WrongPageComponentProps {\n    text: string\n}\nconst WrongPageComponent: React.FC<WrongPageComponentProps> = ({text}) => {\n    return (\n        <div style={{display: \"flex\", justifyContent: \"center\"}}>\n            <Typography\n                style={{alignSelf: \"center\"}}\n                component=\"h5\"\n                variant=\"h5\">\n                {text}\n            </Typography>\n        </div>\n    )\n}\n\nexport default WrongPageComponent\n","import {Typography} from \"@material-ui/core\"\nimport Avatar from \"@material-ui/core/Avatar\"\nimport Container from \"@material-ui/core/Container\"\nimport {makeStyles} from \"@material-ui/core/styles\"\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\"\nimport React, {useCallback, useMemo} from \"react\"\nimport {BasePageProps} from \"../../App\"\nimport FormComponent, {FormItem} from \"../../components/form/form\"\nimport PageComponent from \"../../components/page\"\nimport WrongPageComponent from \"../../components/wrong-page\"\nimport {\n    MutationSubmitForgotPasswordArgs,\n    useSubmitForgotPasswordMutation,\n} from \"../../graphql/schema.generated\"\nimport {goTo, useQuery} from \"../../services/utils\"\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n}))\n\nexport interface PasswordResetPageViewProps {\n    onSubmit: (\n        form: MutationSubmitForgotPasswordArgs & {\n            confirmPassword: string\n        },\n    ) => Promise<void>\n}\n\nexport const PasswordResetPageView: React.FC<PasswordResetPageViewProps> = ({\n    onSubmit,\n}) => {\n    const classes = useStyles()\n\n    const formItems = useMemo(\n        () =>\n            [\n                {\n                    type: \"text\",\n                    required: true,\n                    textType: \"password\",\n                    alignment: {xs: 12},\n                    id: \".password\",\n                    label: \"Password\",\n                    autoComplete: \"password\",\n                },\n                {\n                    type: \"text\",\n                    required: true,\n                    textType: \"password\",\n                    alignment: {xs: 12},\n                    id: \".confirmPassword\",\n                    label: \"Confirm Password\",\n                    autoComplete: \"password\",\n                },\n            ] as FormItem[],\n        [],\n    )\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Change Password\n                </Typography>\n\n                <FormComponent\n                    submitButtonTitle=\"Change Password\"\n                    formItems={formItems}\n                    onSubmit={onSubmit}></FormComponent>\n            </div>\n        </Container>\n    )\n}\n\nexport interface PasswordResetPageProps extends BasePageProps {}\nconst PasswordResetPage: React.FC<PasswordResetPageProps> = ({updateSnack}) => {\n    const [mutate] = useSubmitForgotPasswordMutation({\n        onCompleted: data => {\n            if (data.submitForgotPassword) {\n                updateSnack({\n                    message: \"successfully changed password. redirecting...\",\n                    severity: \"success\",\n                })\n                setTimeout(() => {\n                    goTo(\"/account/login\")\n                }, 1000)\n            }\n        },\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n    })\n\n    const query = useQuery()\n    const argToken = useMemo(() => query.get(\"token\"), [query])\n\n    const onSubmit = useCallback(\n        async (\n            args: MutationSubmitForgotPasswordArgs & {\n                confirmPassword: string\n            },\n        ) => {\n            if (args.password === args.confirmPassword && argToken) {\n                delete args.confirmPassword\n                args.token = argToken\n                mutate({\n                    variables: args,\n                })\n            } else {\n                updateSnack({message: \"passwords do not match\"})\n            }\n        },\n        [argToken, mutate, updateSnack],\n    )\n\n    return (\n        <PageComponent\n            showFooter={true}\n            title=\"Password Reset\"\n            rolePages={[\n                {role: \"Submitter\", redirect: \"/\"},\n                {role: \"Volunteer\", redirect: \"/\"},\n            ]}>\n            {argToken ? (\n                <PasswordResetPageView onSubmit={onSubmit} />\n            ) : (\n                <WrongPageComponent\n                    text={\"Invalid reset token\"}></WrongPageComponent>\n            )}\n        </PageComponent>\n    )\n}\n\nexport default PasswordResetPage\n","import {Typography} from \"@material-ui/core\"\nimport Avatar from \"@material-ui/core/Avatar\"\nimport Container from \"@material-ui/core/Container\"\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\nimport Grid from \"@material-ui/core/Grid\"\nimport Link from \"@material-ui/core/Link\"\nimport {makeStyles} from \"@material-ui/core/styles\"\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\"\nimport React, {useCallback, useMemo, useState} from \"react\"\nimport {BasePageProps} from \"../../App\"\nimport {tokenKey} from \"../../client\"\nimport FormComponent, {FormItem} from \"../../components/form/form\"\nimport PageComponent from \"../../components/page\"\nimport {\n    MeDocument,\n    MutationRegisterArgs,\n    useRegisterMutation,\n    UserType,\n} from \"../../graphql/schema.generated\"\nimport {goTo, useQuery} from \"../../services/utils\"\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n}))\n\nexport interface RegisterPageViewProps {\n    onSubmit: (\n        form: MutationRegisterArgs & {\n            confirmPassword: string\n        },\n    ) => void\n}\nexport const RegisterPageView: React.FC<RegisterPageViewProps> = ({\n    onSubmit,\n}) => {\n    const classes = useStyles()\n    const query = useQuery()\n    const argUserType = useMemo(() => query.get(\"type\"), [query])\n    const registrationToken = query.get(\"token\")\n    const [userType, changeUserType] = useState<UserType>(\n        argUserType &&\n            (argUserType === \"Submitter\" || argUserType === \"Volunteer\")\n            ? argUserType\n            : \"Volunteer\",\n    )\n    const formItems = useMemo(\n        () =>\n            [\n                {\n                    type: \"select\",\n                    options: {\n                        Submitter: \"Medical\",\n                        Volunteer: \"Maker\",\n                    },\n                    required: true,\n                    alignment: {xs: 12},\n                    id: \".type\",\n                    label: \"User Type\",\n                    defaultValue: userType,\n                },\n\n                {\n                    type: \"text\",\n                    required: true,\n                    alignment: {xs: 12},\n                    id: \".registrationToken\",\n                    label: \"Registration Token\",\n                    hint: \"generated for you by admin\",\n                    defaultValue: registrationToken || \"\",\n                },\n\n                {\n                    type: \"text\",\n                    required: true,\n                    alignment: {xs: 12},\n                    id: \".email\",\n                    label:\n                        userType === \"Submitter\"\n                            ? \"Email (public to volunteers)\"\n                            : \"Email\",\n                    hint:\n                        userType === \"Submitter\"\n                            ? \"this email can be viewed by makers to contact you\"\n                            : undefined,\n                    autoComplete: \"email\",\n                },\n                {\n                    type: \"text\",\n                    textType: \"password\",\n                    required: true,\n                    alignment: {xs: 12},\n                    id: \".password\",\n                    label: \"Password\",\n                    autoComplete: \"password\",\n                },\n\n                {\n                    type: \"text\",\n                    textType: \"password\",\n                    required: true,\n                    alignment: {xs: 12},\n                    id: \".confirmPassword\",\n                    label: \"Confirm Password\",\n                    autoComplete: \"password\",\n                },\n\n                {\n                    type: \"text\",\n                    required: true,\n                    alignment: {xs: 12, sm: 6},\n                    id: \".firstName\",\n                    label: \"First Name\",\n                    autoComplete: \"fname\",\n                },\n\n                {\n                    type: \"text\",\n                    required: true,\n                    alignment: {xs: 12, sm: 6},\n                    id: \".lastName\",\n                    label: \"Last Name\",\n                    autoComplete: \"lname\",\n                },\n\n                ...(userType === \"Submitter\"\n                    ? [\n                          {\n                              freeSolo: true,\n                              type: \"location\",\n                              required: true,\n                              alignment: {xs: 12},\n                              id: \".address\",\n                              label: \"Shipping Address\",\n                              locationIds: {\n                                  latitude: \".geolocation.latitude\",\n                                  longitude: \".geolocation.longitude\",\n                              },\n                              hint:\n                                  \"address 3D printer owners should send parts\",\n                              autoComplete: \"address\",\n                          },\n                      ]\n                    : []),\n\n                {\n                    type: \"location\",\n                    required: true,\n                    alignment: {xs: 12},\n                    id: userType === \"Submitter\" ? \".city\" : \".address\",\n                    hint: \"city your are based to find hospitals nearby\",\n                    locationIds: {\n                        latitude: \".geolocation.latitude\",\n                        longitude: \".geolocation.longitude\",\n                    },\n                    autoComplete: \"address-level2\",\n                    label: \"City\",\n                },\n            ] as FormItem[],\n        [registrationToken, userType],\n    )\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    {userType === \"Submitter\" ? \"Medical\" : \"Maker\"} Register\n                </Typography>\n\n                <FormComponent\n                    submitButtonTitle=\"Register\"\n                    formItems={formItems}\n                    onUpdate={(id, value) => {\n                        if (id === \".type\") {\n                            changeUserType(value)\n                        }\n                    }}\n                    onSubmit={onSubmit}>\n                    <Grid style={{marginTop: 10}} container justify=\"flex-end\">\n                        <Grid item>\n                            <Link href=\"/account/login\" variant=\"body2\">\n                                Already have an account? Login\n                            </Link>\n                        </Grid>\n                    </Grid>\n                </FormComponent>\n            </div>\n        </Container>\n    )\n}\n\nexport interface RegisterPageProps extends BasePageProps {}\nexport const RegisterPage: React.FC<RegisterPageProps> = ({updateSnack}) => {\n    const [mutate] = useRegisterMutation({\n        refetchQueries: [{query: MeDocument}],\n        onCompleted: data => {\n            if (data.register) {\n                localStorage.setItem(tokenKey, data.register.token)\n                goTo(\"/\")\n            }\n        },\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n    })\n    const onSubmit = useCallback(\n        (\n            args: MutationRegisterArgs & {\n                confirmPassword: string\n            },\n        ) => {\n            if (args.password === args.confirmPassword) {\n                delete args.confirmPassword\n                mutate({\n                    variables: args,\n                })\n            } else {\n                updateSnack({message: \"passwords do not match\"})\n            }\n        },\n        [mutate, updateSnack],\n    )\n\n    return (\n        <PageComponent\n            showFooter={true}\n            title=\"Register\"\n            rolePages={[\n                {role: \"Submitter\", redirect: \"/\"},\n                {role: \"Volunteer\", redirect: \"/\"},\n            ]}>\n            <RegisterPageView onSubmit={onSubmit} />\n        </PageComponent>\n    )\n}\n\nexport default RegisterPage\n","import {Typography} from \"@material-ui/core\"\nimport Avatar from \"@material-ui/core/Avatar\"\nimport Container from \"@material-ui/core/Container\"\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\nimport {makeStyles} from \"@material-ui/core/styles\"\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\"\nimport React, {useCallback, useMemo, useState} from \"react\"\nimport {BasePageProps} from \"../../App\"\nimport FormComponent, {FormItem} from \"../../components/form/form\"\nimport PageComponent from \"../../components/page\"\nimport WrongPageComponent from \"../../components/wrong-page\"\nimport {\n    AllUserInfoFragment,\n    MeDocument,\n    MutationUpdateAccountArgs,\n    useUpdateAccountMutation,\n} from \"../../graphql/schema.generated\"\nimport {removeNested} from \"../../services/utils\"\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n}))\n\nexport interface AccountUpdatePageViewProps {\n    onSubmit: (\n        form: MutationUpdateAccountArgs & {\n            password?: {confirmPassword: string}\n        },\n    ) => void\n    user: AllUserInfoFragment\n    isPasswordUpdate: boolean\n    changeIsPasswordUpdate: (isPasswordUpdate: boolean) => void\n}\nexport const AccountUpdatePageView: React.FC<AccountUpdatePageViewProps> = ({\n    onSubmit,\n    isPasswordUpdate,\n    changeIsPasswordUpdate,\n    user: {address, latitude, longitude, type, firstName, lastName},\n}) => {\n    const classes = useStyles()\n\n    const formItems = useMemo(\n        () =>\n            [\n                {\n                    type: \"text\",\n                    textType: \"password\",\n                    required: isPasswordUpdate,\n                    alignment: {xs: 12},\n                    id: \".password.oldPassword\",\n                    label: \"Old Password\",\n                    autoComplete: \"password\",\n                },\n\n                {\n                    type: \"text\",\n                    textType: \"password\",\n                    required: isPasswordUpdate,\n                    alignment: {xs: 12},\n                    id: \".password.newPassword\",\n                    label: \"New Password\",\n                    autoComplete: \"password\",\n                },\n\n                {\n                    type: \"text\",\n                    textType: \"password\",\n                    required: isPasswordUpdate,\n                    alignment: {xs: 12},\n                    id: \".password.confirmPassword\",\n                    label: \"Confirm Password\",\n                    autoComplete: \"password\",\n                },\n\n                {\n                    type: \"text\",\n                    required: true,\n                    defaultValue: firstName,\n                    alignment: {xs: 12, sm: 6},\n                    id: \".firstName\",\n                    label: \"First Name\",\n                    autoComplete: \"fname\",\n                },\n\n                {\n                    type: \"text\",\n                    required: true,\n                    defaultValue: lastName,\n                    alignment: {xs: 12, sm: 6},\n                    id: \".lastName\",\n                    label: \"Last Name\",\n                    autoComplete: \"lname\",\n                },\n\n                ...(type === \"Submitter\"\n                    ? [\n                          {\n                              defaultValue: {\n                                  properties: {\n                                      display_name: address,\n                                  },\n                                  geometry: {\n                                      coordinates: [longitude, latitude],\n                                  },\n                              },\n                              freeSolo: true,\n                              type: \"location\",\n                              required: true,\n                              alignment: {xs: 12},\n                              id: \".address\",\n                              label: \"Shipping Address\",\n                              locationIds: {\n                                  latitude: \".geolocation.latitude\",\n                                  longitude: \".geolocation.longitude\",\n                              },\n                              hint:\n                                  \"address 3D printer owners should send parts\",\n                              autoComplete: \"address\",\n                          },\n                      ]\n                    : []),\n\n                {\n                    type: \"location\",\n                    required: true,\n                    alignment: {xs: 12},\n                    id: type === \"Submitter\" ? \".city\" : \".address\",\n                    hint: \"city your are based to find hospitals nearby\",\n                    locationIds: {\n                        latitude: \".geolocation.latitude\",\n                        longitude: \".geolocation.longitude\",\n                    },\n                    defaultValue: {\n                        properties: {\n                            display_name: address,\n                        },\n                        geometry: {\n                            coordinates: [longitude, latitude],\n                        },\n                    },\n\n                    autoComplete: \"address-level2\",\n                    label: \"City\",\n                },\n            ] as FormItem[],\n        [\n            address,\n            firstName,\n            isPasswordUpdate,\n            lastName,\n            latitude,\n            longitude,\n            type,\n        ],\n    )\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Update Account\n                </Typography>\n\n                <FormComponent\n                    submitButtonTitle=\"Update Account\"\n                    formItems={formItems}\n                    onUpdate={(id, value) => {\n                        if (id === \".password.oldPassword\") {\n                            changeIsPasswordUpdate(!!value)\n                        }\n                    }}\n                    onSubmit={onSubmit}></FormComponent>\n            </div>\n        </Container>\n    )\n}\n\nexport interface AccountUpdatePageProps extends BasePageProps {}\nexport const AccountUpdatePage: React.FC<AccountUpdatePageProps> = ({\n    updateSnack,\n}) => {\n    const [isPasswordUpdate, changeIsPasswordUpdate] = useState(false)\n\n    const [mutate] = useUpdateAccountMutation({\n        refetchQueries: [{query: MeDocument}],\n        onCompleted: data => {\n            if (data.updateAccount) {\n                updateSnack({\n                    message: \"successfully updated account\",\n                    severity: \"success\",\n                })\n            }\n        },\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n    })\n\n    const onSubmitAccount = useCallback(\n        (args: MutationUpdateAccountArgs) => {\n            mutate({\n                variables: removeNested(args, \".password.confirmPassword\"),\n            })\n        },\n        [mutate],\n    )\n\n    const onSubmit = useCallback(\n        async (\n            args: MutationUpdateAccountArgs & {\n                password?: {confirmPassword: string}\n            },\n        ) => {\n            if (isPasswordUpdate && args.password) {\n                if (\n                    args[\"password\"][\"newPassword\"] ===\n                    args[\"password\"][\"confirmPassword\"]\n                ) {\n                    onSubmitAccount(args)\n                } else {\n                    updateSnack({message: \"passwords do not match\"})\n                }\n            } else {\n                args.password = undefined\n                onSubmitAccount(args)\n            }\n        },\n        [onSubmitAccount, updateSnack, isPasswordUpdate],\n    )\n\n    const updatePage = useCallback(\n        (user: AllUserInfoFragment) => {\n            return (\n                <AccountUpdatePageView\n                    changeIsPasswordUpdate={changeIsPasswordUpdate}\n                    user={user}\n                    isPasswordUpdate={isPasswordUpdate}\n                    onSubmit={onSubmit}\n                />\n            )\n        },\n        [isPasswordUpdate, onSubmit],\n    )\n\n    return (\n        <PageComponent\n            showFooter={true}\n            title=\"Update Account\"\n            rolePages={[\n                {\n                    component: updatePage,\n                    role: \"Volunteer\",\n                },\n                {\n                    component: updatePage,\n                    role: \"Submitter\",\n                },\n            ]}>\n            <WrongPageComponent text={\"Must be signed in to update account\"} />\n        </PageComponent>\n    )\n}\n\nexport default AccountUpdatePage\n","import * as React from \"react\"\nimport MarkdownComponent from \"../components/markdown\"\nimport PageComponent from \"../components/page\"\n\nconst ContactPage = () => {\n    return (\n        <PageComponent showFooter={true} title=\"Contact\">\n            <MarkdownComponent url=\"contact.md\" />\n        </PageComponent>\n    )\n}\n\nexport default ContactPage\n","import * as React from \"react\"\nimport {useEffect, useState} from \"react\"\nimport {BasePageProps} from \"../App\"\nimport PageComponent from \"../components/page\"\nimport {RenderType} from \"../components/part-renderer\"\nimport EnhancedTable, {ComparableObject, HeadCell} from \"../components/table\"\nimport WrongPageComponent from \"../components/wrong-page\"\nimport {\n    JobInfoFragment,\n    useAvailableJobsQuery,\n} from \"../graphql/schema.generated\"\nimport {goTo, renderFileType} from \"../services/utils\"\n\nconst headCells: HeadCell<JobInfoFragment & {jobType: RenderType}>[] = [\n    {\n        id: \"name\",\n        numeric: false,\n        disablePadding: true,\n        label: \"Print Jobs\",\n    },\n    {id: \"id\", numeric: true, disablePadding: false, label: \"Job ID\"},\n    {id: \"progress\", numeric: true, disablePadding: false, label: \"Progress\"},\n    {id: \"quantity\", numeric: true, disablePadding: false, label: \"Quantity\"},\n    {id: \"createdAt\", numeric: true, disablePadding: false, label: \"Created\"},\n    {id: \"jobType\", numeric: true, disablePadding: false, label: \"Type\"},\n]\n\nexport interface FindPageViewProps {\n    availableJobs: JobInfoFragment[]\n    loading: boolean\n}\nexport const FindPageView: React.FC<FindPageViewProps> = ({\n    availableJobs: acceptedJobs,\n}) => {\n    return (\n        <PageComponent\n            showFooter={true}\n            title=\"Find Jobs\"\n            rolePages={[\n                {\n                    role: \"Volunteer\",\n                    component: () => (\n                        <EnhancedTable\n                            initialOrderProperty={\"createdAt\"}\n                            nameProperty={\"name\"}\n                            rows={\n                                (acceptedJobs.map(job => {\n                                    return {\n                                        ...job,\n                                        jobType:\n                                            renderFileType(job.name) === \"dxf\"\n                                                ? \"Laser Cut\"\n                                                : \"3D Print\",\n                                    }\n                                }) as unknown) as ComparableObject[]\n                            }\n                            headCells={\n                                (headCells as unknown) as HeadCell<\n                                    ComparableObject\n                                >[]\n                            }\n                            onRowClick={row => {\n                                goTo(`/job?jobID=${row.id}`)\n                            }}\n                            title=\"Available Print Jobs\"\n                        />\n                    ),\n                },\n            ]}>\n            <WrongPageComponent text={\"Find only provided for volunteers\"} />\n        </PageComponent>\n    )\n}\n\nexport interface FindPageProps extends BasePageProps {}\nconst FindPage: React.FC<FindPageProps> = ({updateSnack}) => {\n    const {loading, error, data} = useAvailableJobsQuery()\n    const [availableJobs, changeAvailableJobs] = useState<JobInfoFragment[]>([])\n\n    useEffect(() => {\n        if (!error && data?.availableJobs) {\n            changeAvailableJobs(data.availableJobs)\n        } else if (error) {\n            updateSnack({message: error.message})\n        }\n    }, [error, data, changeAvailableJobs, updateSnack])\n    return <FindPageView availableJobs={availableJobs} loading={loading} />\n}\n\nexport default FindPage\n","import React, {useMemo} from \"react\"\n//@ts-ignore\nimport STLViewer from \"stl-viewer\"\nimport DXFViewer from \"./dxf-viewer\"\nimport theme from \"./theme\"\n\nexport type RenderType = \"stl\" | \"dxf\"\n\nexport interface PartRenderProps {\n    url: string\n    type: RenderType\n    color?: string\n    width: number\n    height: number\n}\nconst PartRender: React.FC<PartRenderProps> = ({\n    type,\n    url,\n    color,\n    width,\n    height,\n}) => {\n    const viewer = useMemo(() => {\n        return type === \"dxf\" ? (\n            <DXFViewer\n                width={width}\n                height={height}\n                source={{type: \"url\", url: url}}\n                strokeColor={color || theme.palette.primary.light}\n                strokeWidth={\"0.5%\"}\n            />\n        ) : (\n            <STLViewer\n                model={url}\n                width={width}\n                height={height}\n                modelColor={color || theme.palette.primary.light}\n                backgroundColor=\"white\"\n                rotate={true}\n                orbitControls={true}\n            />\n        )\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return viewer\n}\n\nexport default PartRender\n","import Step from \"@material-ui/core/Step\";\nimport StepConnector from \"@material-ui/core/StepConnector\";\nimport { StepIconProps } from \"@material-ui/core/StepIcon\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport {\n  createStyles,\n  makeStyles,\n  Theme,\n  withStyles\n} from \"@material-ui/core/styles\";\nimport clsx from \"clsx\";\nimport React, { useCallback, useEffect, useMemo } from \"react\";\nimport theme from \"./theme\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: \"100%\"\n    },\n    button: {\n      marginRight: theme.spacing(1)\n    },\n    instructions: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1)\n    }\n  })\n);\n\nexport interface StepperStep {\n  label: string;\n  icon: React.ReactElement;\n}\n\nexport interface CustomizedSteppersProps {\n  steps: StepperStep[];\n  currentStep: number;\n  colors?: { color1: string; color2: string; color3: string };\n}\n\nexport default function CustomizedSteppers({\n  steps,\n  currentStep,\n  colors: { color1, color2, color3 } = {\n    color1: theme.palette.primary.main,\n    color2: theme.palette.primary.main,\n    color3: theme.palette.primary.main\n  }\n}: CustomizedSteppersProps) {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(1);\n\n  const ColorLibConnector = useMemo(() => {\n    return withStyles({\n      alternativeLabel: {\n        top: 22\n      },\n      active: {\n        \"& $line\": {\n          backgroundImage: `linear-gradient( 95deg,${color1} 0%,${color2} 50%,${color3} 100%)`\n        }\n      },\n      completed: {\n        \"& $line\": {\n          backgroundImage: `linear-gradient( 95deg,${color1} 0%,${color2} 50%,${color3} 100%)`\n        }\n      },\n      line: {\n        height: 3,\n        border: 0,\n        backgroundColor: \"#eaeaf0\",\n        borderRadius: 1\n      }\n    })(StepConnector);\n  }, [color1, color2, color3]);\n\n  const icons: { [index: string]: React.ReactElement } = useMemo(() => {\n    const object: { [key: number]: React.ReactElement } = {};\n    steps.forEach((step, i) => {\n      object[i + 1] = step.icon;\n    });\n    return object;\n  }, [steps]);\n\n  const ColorLibStepIcon = useCallback(\n    (props: StepIconProps) => {\n      const classes = makeStyles({\n        root: {\n          backgroundColor: \"#ccc\",\n          zIndex: 1,\n          color: \"#fff\",\n          width: 50,\n          height: 50,\n          display: \"flex\",\n          borderRadius: \"50%\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        active: {\n          backgroundImage: `linear-gradient( 136deg, ${color1} 0%, ${color2} 50%, ${color3} 100%)`,\n          boxShadow: \"0 4px 10px 0 rgba(0,0,0,.25)\"\n        },\n        completed: {\n          backgroundImage: `linear-gradient( 136deg, ${color1} 0%, ${color2} 50%, ${color3} 100%)`\n        }\n      })();\n      const { active, completed } = props;\n\n      return (\n        <div\n          className={clsx(classes.root, {\n            [classes.active]: active,\n            [classes.completed]: completed\n          })}\n        >\n          {icons[String(props.icon)]}\n        </div>\n      );\n    },\n    [color1, color2, color3, icons]\n  );\n\n  useEffect(() => {\n    setActiveStep(currentStep);\n  }, [currentStep]);\n  return (\n    <div className={classes.root}>\n      <Stepper\n        alternativeLabel\n        activeStep={activeStep}\n        connector={<ColorLibConnector />}\n      >\n        {steps.map(step => (\n          <Step key={step.label}>\n            <StepLabel StepIconComponent={ColorLibStepIcon}>\n              {step.label}\n            </StepLabel>\n          </Step>\n        ))}\n      </Stepper>\n    </div>\n  );\n}\n","/* eslint-disable no-restricted-globals */\nimport {\n    Button,\n    Card,\n    CardContent,\n    createStyles,\n    FormControl,\n    InputLabel,\n    Link,\n    List,\n    ListItem,\n    ListItemText,\n    makeStyles,\n    MenuItem,\n    Select,\n    Theme,\n    Typography,\n} from \"@material-ui/core\"\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\"\nimport AssignmentIcon from \"@material-ui/icons/Assignment\"\nimport AssignmentTurnedInIcon from \"@material-ui/icons/AssignmentTurnedIn\"\nimport DeleteIcon from \"@material-ui/icons/Delete\"\nimport DoneAllIcon from \"@material-ui/icons/DoneAll\"\nimport GetAppIcon from \"@material-ui/icons/GetApp\"\nimport HourglassEmptyIcon from \"@material-ui/icons/HourglassEmpty\"\nimport LocalShippingIcon from \"@material-ui/icons/LocalShipping\"\nimport TimerIcon from \"@material-ui/icons/Timer\"\nimport * as clipboard from \"clipboard-polyfill\"\nimport * as React from \"react\"\nimport {useCallback, useEffect, useMemo, useState} from \"react\"\nimport {BasePageProps} from \"../App\"\nimport PageComponent, {RolePage} from \"../components/page\"\nimport PartRender, {RenderType} from \"../components/part-renderer\"\nimport CustomizedSteppers from \"../components/stepper\"\nimport WrongPageComponent from \"../components/wrong-page\"\nimport {\n    AllUserInfoFragment,\n    JobInfoFragment,\n    JobProgress,\n    useAcceptJobMutation,\n    useCancelJobSubmitterMutation,\n    useCancelJobVolunteerMutation,\n    useJobQuery,\n    useMeQuery,\n    UserType,\n    useUpdateJobProgressMutation,\n} from \"../graphql/schema.generated\"\nimport {goTo, renderFileType, useQuery} from \"../services/utils\"\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: \"flex\",\n            flex: 1,\n            justifyContent: \"center\",\n        },\n\n        button: {\n            margin: theme.spacing(1),\n        },\n\n        stl: {\n            display: \"flex\",\n            justifyContent: \"center\",\n        },\n\n        card: {\n            width: \"50vw\",\n            minWidth: 400,\n            display: \"flex\",\n            justifyContent: \"center\",\n            textAlign: \"center\",\n            textDecoration: \"none\",\n            maxWidth: 1200,\n        },\n        details: {\n            display: \"flex\",\n            flexDirection: \"column\",\n        },\n\n        list: {\n            width: \"45vw\",\n            minWidth: 200,\n            maxWidth: 1000,\n            backgroundColor: theme.palette.background.paper,\n        },\n\n        image: {\n            display: \"flex\",\n            flex: 1,\n            justifyContent: \"center\",\n            marginTop: 10,\n        },\n\n        link: {\n            textDecoration: \"none\",\n        },\n    }),\n)\n\nconst jobStepsDict: {\n    [id: string]: {\n        icon: JSX.Element\n        label: string\n        step: number\n        id: JobProgress\n    }\n} = {\n    Pending: {icon: <TimerIcon />, label: \"Pending\", step: 0, id: \"Pending\"},\n    Assigned: {\n        icon: <AssignmentIcon />,\n        label: \"Assigned\",\n        step: 1,\n        id: \"Assigned\",\n    },\n    PrintStarted: {\n        icon: <HourglassEmptyIcon />,\n        label: \"Print Started\",\n        step: 2,\n        id: \"PrintStarted\",\n    },\n    PrintComplete: {\n        icon: <AssignmentTurnedInIcon />,\n        label: \"Print Complete\",\n        step: 3,\n        id: \"PrintComplete\",\n    },\n    Shipped: {\n        icon: <LocalShippingIcon />,\n        label: \"Shipped\",\n        step: 4,\n        id: \"Shipped\",\n    },\n}\n\nconst jobSteps = Object.values(jobStepsDict)\n\nexport type JobBaseProps = {\n    user: AllUserInfoFragment\n    job: JobInfoFragment\n    acceptJob: (id: string) => void\n    cancelJob: (userType: UserType, id: string) => void\n    updateJobProgress: (args: {\n        id: string\n        progress: JobProgress\n        trackingNumber?: string | undefined\n    }) => void\n} & BasePageProps\n\nexport interface JobStatusPageProps extends JobBaseProps {}\n\ntype ShippingType = \"UPS\" | \"USPS\" | \"Other\"\n\nexport const JobPageStatus: React.FC<JobStatusPageProps> = ({\n    user: {type: userType, email: userEmail},\n    cancelJob,\n    job: {id: jobID, progress, volunteer},\n    updateJobProgress,\n    acceptJob,\n}) => {\n    const classes = useStyles()\n    const [trackingNumber, changeTrackingNumber] = useState<string>()\n    const [step, changeStep] = useState<number>(0)\n    const [shippingProvider, changeShippingProvider] = useState<ShippingType>(\n        \"UPS\",\n    )\n    useEffect(() => {\n        changeStep(jobStepsDict[progress].step)\n    }, [progress])\n    return (\n        <div>\n            <CustomizedSteppers\n                {...{\n                    steps: jobSteps,\n                    currentStep: step,\n                }}\n            />\n\n            {userType === \"Submitter\" ? (\n                <div>\n                    {progress !== \"Shipped\" ? (\n                        <Button\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            onClick={() => {\n                                cancelJob(userType, jobID)\n                            }}\n                            className={classes.button}\n                            startIcon={<DeleteIcon />}>\n                            Delete Job\n                        </Button>\n                    ) : null}\n                </div>\n            ) : (\n                <div>\n                    {progress === \"Pending\" ||\n                    (volunteer && userEmail === volunteer.email) ? (\n                        <div>\n                            {step === 3 ? (\n                                <div>\n                                    <Link onClick={print}>\n                                        <Typography\n                                            style={{\n                                                alignSelf: \"center\",\n                                                marginBottom: 10,\n                                            }}\n                                            variant=\"subtitle1\">\n                                            Print this page and send in package\n                                        </Typography>\n                                    </Link>\n\n                                    <FormControl variant=\"outlined\">\n                                        <InputLabel id=\"demo-customized-select-label\">\n                                            Type\n                                        </InputLabel>\n                                        <Select\n                                            labelId=\"demo-customized-select-label\"\n                                            label=\"Type\"\n                                            id=\"demo-customized-select\"\n                                            value={shippingProvider}\n                                            onChange={({target: {value}}) => {\n                                                if (typeof value === \"string\") {\n                                                    changeShippingProvider(\n                                                        value as ShippingType,\n                                                    )\n                                                }\n                                            }}>\n                                            <MenuItem value={\"UPS\"}>\n                                                UPS\n                                            </MenuItem>\n                                            <MenuItem value={\"USPS\"}>\n                                                USPS\n                                            </MenuItem>\n                                            <MenuItem value={\"Other\"}>\n                                                Other\n                                            </MenuItem>\n                                        </Select>\n                                    </FormControl>\n\n                                    <FormControl\n                                        style={{marginLeft: 10}}\n                                        variant=\"outlined\">\n                                        <InputLabel htmlFor=\"outlined-adornment-password\">\n                                            Tracking Number\n                                        </InputLabel>\n                                        <OutlinedInput\n                                            label={\"Tracking Number\"}\n                                            id=\"outlined-adornment-password\"\n                                            onChange={({target: {value}}) => {\n                                                changeTrackingNumber(\n                                                    !!value\n                                                        ? `${shippingProvider}-${value}`\n                                                        : undefined,\n                                                )\n                                            }}\n                                        />\n                                    </FormControl>\n                                </div>\n                            ) : null}\n\n                            <div>\n                                {progress !== \"Pending\" &&\n                                progress !== \"Shipped\" ? (\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"secondary\"\n                                        onClick={() => {\n                                            cancelJob(userType, jobID)\n                                        }}\n                                        className={classes.button}\n                                        startIcon={<DeleteIcon />}>\n                                        Cancel Job\n                                    </Button>\n                                ) : null}\n\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    disabled={step === jobSteps.length - 1}\n                                    onClick={() => {\n                                        const updatedStep = step + 1\n                                        if (updatedStep === 1) {\n                                            acceptJob(jobID)\n                                        } else {\n                                            updateJobProgress({\n                                                id: jobID,\n                                                progress:\n                                                    jobSteps[updatedStep].id,\n                                                trackingNumber,\n                                            })\n                                        }\n                                    }}\n                                    className={classes.button}\n                                    endIcon={\n                                        step + 1 === jobSteps.length ? (\n                                            <DoneAllIcon />\n                                        ) : (\n                                            jobSteps[step + 1].icon\n                                        )\n                                    }>\n                                    {step + 1 === jobSteps.length\n                                        ? \"Done\"\n                                        : // Used to make assign message more intuitive\n                                          jobSteps[step + 1].label.replace(\n                                              \"Assigned\",\n                                              \"Assign to me\",\n                                          )}\n                                </Button>\n                            </div>\n                        </div>\n                    ) : null}\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport type JobPageListProps = JobBaseProps & {fileType?: RenderType}\nexport const JobPageList: React.FC<JobPageListProps> = ({\n    job,\n    updateSnack,\n    fileType,\n}) => {\n    const classes = useStyles()\n    const {\n        quantity,\n        createdAt,\n        description,\n        submitter,\n        volunteer,\n        address,\n        trackingNumber,\n    } = useMemo(() => job, [job])\n\n    return (\n        <List\n            component=\"nav\"\n            aria-labelledby=\"nested-list-subheader\"\n            className={classes.list}>\n            {[\n                [\"Quantity\", quantity],\n                [\"Created\", createdAt],\n                [\"Description\", description || \"N/A\"],\n                [\"Submitter\", submitter.email],\n                [\"Assignee\", volunteer?.email || \"Not Assigned Yet\"],\n                [\"Recipient Address\", address],\n                [\"Tracking Number\", trackingNumber || \"N/A\"],\n                [\"Job Type\", fileType === \"dxf\" ? \"Laser Cut\" : \"3D Print\"],\n            ].map(([title, value], i) => {\n                return (\n                    <ListItem\n                        button\n                        key={i}\n                        onClick={() => {\n                            clipboard.writeText(String(value))\n                            updateSnack({\n                                message: \"copied to clipboard\",\n                                severity: \"info\",\n                            })\n                        }}>\n                        <ListItemText\n                            primary={title}\n                            secondary={String(value)}\n                        />\n                    </ListItem>\n                )\n            })}\n        </List>\n    )\n}\n\nexport type JobPageViewProps = JobBaseProps\nexport const JobPageView: React.FC<JobPageViewProps> = props => {\n    const classes = useStyles()\n    const [fileType, changeFileType] = useState<RenderType>()\n    const job = useMemo(() => props.job, [props.job])\n    const {name, id} = useMemo(() => job, [job])\n    const stlViewer = useMemo(() => {\n        const type = renderFileType(name)\n        if (type) {\n            changeFileType(type)\n\n            return (\n                <PartRender\n                    type={type}\n                    width={300}\n                    height={300}\n                    url={job.file.link}\n                />\n            )\n        } else {\n            return null\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return (\n        <div className={classes.root}>\n            {job ? (\n                <Card className={classes.card}>\n                    <div className={classes.details}>\n                        <CardContent>\n                            <Typography component=\"h5\" variant=\"h5\">\n                                {name}\n                            </Typography>\n                            <Typography color=\"textSecondary\" variant=\"h6\">\n                                {`#${id}`}\n                            </Typography>\n\n                            <div className={classes.stl}>{stlViewer}</div>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => {\n                                    goTo(job.file.link)\n                                }}\n                                startIcon={<GetAppIcon />}>\n                                Download {fileType?.toUpperCase()}\n                            </Button>\n                            <JobPageList\n                                {...props}\n                                job={job}\n                                fileType={fileType}\n                            />\n\n                            <JobPageStatus {...props} job={job} />\n                        </CardContent>\n                    </div>\n                </Card>\n            ) : (\n                <WrongPageComponent text={\"Job failed to load\"} />\n            )}\n        </div>\n    )\n}\n\nexport interface JobPageProps extends BasePageProps {}\nconst JobPage: React.FC<JobPageProps> = ({updateSnack}) => {\n    const query = useQuery()\n    const jobID = query.get(\"jobID\")\n    const [job, changeJob] = useState<JobInfoFragment>()\n\n    const [cancelSubmitterMutation] = useCancelJobSubmitterMutation({\n        onCompleted: cancelResponse => {\n            if (cancelResponse.cancelJobSubmitter) {\n                changeJob(cancelResponse.cancelJobSubmitter)\n                goTo(\"/\")\n            }\n        },\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n    })\n    const [cancelVolunteerMutation] = useCancelJobVolunteerMutation({\n        onCompleted: cancelResponse => {\n            if (cancelResponse.cancelJobVolunteer) {\n                changeJob(cancelResponse.cancelJobVolunteer)\n                goTo(\"/\")\n            }\n        },\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n    })\n    const [acceptJobMutation] = useAcceptJobMutation({\n        onCompleted: acceptResponse => {\n            if (acceptResponse.acceptJob) {\n                changeJob(acceptResponse.acceptJob)\n            }\n        },\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n    })\n\n    const [updateJobProgressMutation] = useUpdateJobProgressMutation({\n        onCompleted: updateJobProgressResponse => {\n            if (updateJobProgressResponse.updateJobProgress) {\n                changeJob(updateJobProgressResponse.updateJobProgress)\n            }\n        },\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n    })\n\n    const {error: meError, data: meData} = useMeQuery()\n\n    const {error: jobError, data: jobData} = useJobQuery({\n        variables: {id: jobID || \"\"},\n    })\n\n    useEffect(() => {\n        if (!jobError && jobData?.job) {\n            changeJob(jobData.job)\n        } else if (jobError) {\n            updateSnack({message: jobError.message})\n        }\n    }, [jobError, jobData, meError, meData, updateSnack])\n\n    const acceptJob = useCallback(\n        (id: string) => {\n            acceptJobMutation({variables: {id}})\n        },\n        [acceptJobMutation],\n    )\n\n    const cancelJob = useCallback(\n        (userType: UserType, id: string) => {\n            if (userType === \"Submitter\") {\n                cancelSubmitterMutation({variables: {id}})\n            } else {\n                cancelVolunteerMutation({variables: {id}})\n            }\n        },\n        [cancelSubmitterMutation, cancelVolunteerMutation],\n    )\n\n    const updateJobProgress = useCallback(\n        (args: {\n            id: string\n            progress: JobProgress\n            trackingNumber?: string\n        }) => {\n            updateJobProgressMutation({variables: args})\n        },\n        [updateJobProgressMutation],\n    )\n\n    const jopPage: (userType: UserType) => RolePage = useCallback(\n        (userType: UserType) => {\n            return {\n                role: userType,\n                component: user => (\n                    <div>\n                        {job ? (\n                            <JobPageView\n                                updateSnack={updateSnack}\n                                job={job}\n                                user={user}\n                                acceptJob={acceptJob}\n                                cancelJob={cancelJob}\n                                updateJobProgress={updateJobProgress}\n                            />\n                        ) : null}\n                    </div>\n                ),\n            }\n        },\n        [acceptJob, cancelJob, job, updateSnack, updateJobProgress],\n    )\n\n    return (\n        <PageComponent\n            disableHide={false}\n            showFooter={true}\n            title=\"Job\"\n            rolePages={[jopPage(\"Submitter\"), jopPage(\"Volunteer\")]}>\n            <WrongPageComponent text={\"Must be signed in to view Job\"} />\n        </PageComponent>\n    )\n}\n\nexport default JobPage\n","import {Typography} from \"@material-ui/core\"\nimport Container from \"@material-ui/core/Container\"\nimport {makeStyles} from \"@material-ui/core/styles\"\nimport React, {useCallback} from \"react\"\nimport {BasePageProps} from \"../../App\"\nimport FormComponent, {FormItem} from \"../../components/form/form\"\nimport PageComponent from \"../../components/page\"\nimport WrongPageComponent from \"../../components/wrong-page\"\nimport {\n    AllUserInfoFragment,\n    MutationCreateJobArgs,\n    useCreateJobMutation,\n} from \"../../graphql/schema.generated\"\nimport {goTo} from \"../../services/utils\"\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n}))\n\nexport interface CreateJobPageViewProps {\n    user: AllUserInfoFragment\n    onSubmit: (form: MutationCreateJobArgs) => void\n}\n\nexport const CreateJobPageView: React.FC<CreateJobPageViewProps> = ({\n    onSubmit,\n    user: {latitude, longitude, address},\n}) => {\n    const classes = useStyles()\n\n    const formItems: FormItem[] = [\n        {\n            type: \"slider\",\n            min: 5,\n            max: 100,\n            ending: \"Parts\",\n            step: 5,\n            defaultValue: 25,\n            alignment: {xs: 12},\n            id: \".quantity\",\n            label: \"Quantity\",\n        },\n\n        {\n            type: \"text\",\n            alignment: {xs: 12},\n            id: \".description\",\n            label: \"Description\",\n        },\n\n        {\n            type: \"location\",\n            required: true,\n            alignment: {xs: 12},\n            id: \".address\",\n            defaultValue: {\n                properties: {\n                    display_name: address,\n                },\n                geometry: {\n                    coordinates: [longitude, latitude],\n                },\n            },\n            locationIds: {\n                latitude: \".geolocation.latitude\",\n                longitude: \".geolocation.longitude\",\n            },\n            label: \"Shipping Address\",\n        },\n\n        {\n            type: \"file-upload\",\n            required: true,\n            alignment: {xs: 12},\n            id: \".file\",\n            fileNameId: \".name\",\n            label: \"Upload STL\",\n        },\n    ]\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <div className={classes.paper}>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Create Print Jobs\n                </Typography>\n\n                <FormComponent\n                    submitButtonTitle=\"Create Jobs\"\n                    formItems={formItems}\n                    onSubmit={onSubmit}\n                />\n            </div>\n        </Container>\n    )\n}\n\nexport interface CreateJobPageProps extends BasePageProps {}\nexport const CreateJobPage: React.FC<CreateJobPageProps> = ({updateSnack}) => {\n    const [mutate] = useCreateJobMutation({\n        onCompleted: data => {\n            if (data.createJob) {\n                goTo(\"/\")\n            }\n        },\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n    })\n    const onSubmit = useCallback(\n        (args: MutationCreateJobArgs) => {\n            mutate({\n                variables: args,\n            })\n        },\n        [mutate],\n    )\n\n    return (\n        <PageComponent\n            showFooter={true}\n            title=\"Create Job\"\n            rolePages={[\n                {\n                    role: \"Submitter\",\n                    component: user => (\n                        <CreateJobPageView onSubmit={onSubmit} user={user} />\n                    ),\n                },\n            ]}>\n            <WrongPageComponent\n                text={\n                    \"Must be logged in as a Submitter to create a job\"\n                }></WrongPageComponent>\n        </PageComponent>\n    )\n}\n\nexport default CreateJobPage\n","import {Link} from \"@material-ui/core\"\nimport Card from \"@material-ui/core/Card\"\nimport CardContent from \"@material-ui/core/CardContent\"\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\"\nimport Typography from \"@material-ui/core/Typography\"\nimport React from \"react\"\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        card: {\n            display: \"flex\",\n            alignItems: \"column\",\n            textDecoration: \"none\",\n        },\n        details: {\n            display: \"flex\",\n            flexDirection: \"column\",\n        },\n        content: {\n            flex: \"1 0 auto\",\n        },\n\n        image: {\n            display: \"flex\",\n            flex: 1,\n            justifyContent: \"center\",\n            marginTop: 10,\n        },\n\n        link: {\n            textDecoration: \"none\",\n        },\n    }),\n)\n\nexport interface CardOptionComponentProps {\n    title: string\n    subtitle: string\n    path: string\n}\n\nexport const CardOptionComponent: React.FunctionComponent<CardOptionComponentProps> = ({\n    title,\n    subtitle,\n    path,\n}) => {\n    const classes = useStyles()\n\n    return (\n        <Link href={path}>\n            <Card className={classes.card}>\n                <div className={classes.details}>\n                    <CardContent className={classes.content}>\n                        <Typography component=\"h3\" variant=\"h5\">\n                            {title}\n                        </Typography>\n                        <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                            {subtitle}\n                        </Typography>\n                    </CardContent>\n                </div>\n            </Card>\n        </Link>\n    )\n}\n","import {Grid, Grow} from \"@material-ui/core\"\nimport {makeStyles} from \"@material-ui/styles\"\nimport * as React from \"react\"\nimport {CardOptionComponent} from \"../components/card-option\"\nimport PageComponent from \"../components/page\"\n\nconst useStyles = makeStyles(() => ({\n    container: {\n        flexGrow: 1,\n        justifyContent: \"center\",\n        display: \"flex\",\n        padding: 10,\n    },\n}))\n\nconst LegalPage = () => {\n    const classes = useStyles()\n    return (\n        <PageComponent showFooter={true} title=\"Legal\">\n            <div className={classes.container}>\n                {/* End hero unit */}\n                <Grid container spacing={4}>\n                    <Grid item xs={12} sm={6} md={4}>\n                        <Grow timeout={500} in={true}>\n                            <div>\n                                <CardOptionComponent\n                                    title=\"Terms of Service\"\n                                    subtitle=\"Everything regarding how you can use the platform\"\n                                    path=\"/legal/terms-of-service\"\n                                />\n                            </div>\n                        </Grow>\n                    </Grid>\n\n                    <Grid item xs={12} sm={6} md={4}>\n                        <Grow timeout={1000} in={true}>\n                            <div>\n                                <CardOptionComponent\n                                    title=\"Privacy Policy\"\n                                    subtitle=\"Everything regarding how we handle your data\"\n                                    path=\"/legal/privacy-policy\"\n                                />\n                            </div>\n                        </Grow>\n                    </Grid>\n\n                    <Grid item xs={12} sm={6} md={4}>\n                        <Grow timeout={1000} in={true}>\n                            <div>\n                                <CardOptionComponent\n                                    title=\"Disclaimer\"\n                                    subtitle=\"Everything regarding Disclaimer\"\n                                    path=\"/legal/disclaimer\"\n                                />\n                            </div>\n                        </Grow>\n                    </Grid>\n                </Grid>\n            </div>\n        </PageComponent>\n    )\n}\n\nexport default LegalPage\n","import * as React from \"react\"\nimport {useState} from \"react\"\nimport MarkdownComponent from \"../../components/markdown\"\nimport PageComponent from \"../../components/page\"\n\nconst DisclaimerPage = () => {\n    const [showFooter, changeShowFooter] = useState<boolean>()\n    return (\n        <PageComponent\n            disableHide={false}\n            showFooter={showFooter}\n            title=\"Disclaimer\">\n            <MarkdownComponent\n                onFinish={() => changeShowFooter(true)}\n                url=\"disclaimer.md\"\n            />\n        </PageComponent>\n    )\n}\n\nexport default DisclaimerPage\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport MarkdownComponent from \"../../components/markdown\";\nimport PageComponent from \"../../components/page\";\n\n\n\nconst FaqPage = () => {\n  const [showFooter, changeShowFooter] = useState<boolean>();\n  return (\n    <PageComponent disableHide={false} showFooter={showFooter} title=\"FAQ\">\n      <MarkdownComponent\n        onFinish={() => changeShowFooter(true)}\n        url=\"faq.md\"\n      />\n    </PageComponent>\n  );\n};\n\nexport default FaqPage;\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport MarkdownComponent from \"../../components/markdown\";\nimport PageComponent from \"../../components/page\";\n\n\n\nconst PrivacyPolicyPage = () => {\n  const [showFooter, changeShowFooter] = useState<boolean>();\n  return (\n    <PageComponent disableHide={false} showFooter={showFooter} title=\"Privacy Policy\">\n      <MarkdownComponent\n        onFinish={() => changeShowFooter(true)}\n        url=\"privacy-policy.md\"\n      />\n    </PageComponent>\n  );\n};\n\nexport default PrivacyPolicyPage;\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport MarkdownComponent from \"../../components/markdown\";\nimport PageComponent from \"../../components/page\";\n\nconst TermsOfServicePage = () => {\n  const [showFooter, changeShowFooter] = useState<boolean>();\n  return (\n    <PageComponent\n      disableHide={false}\n      showFooter={showFooter}\n      title=\"Terms of Service\"\n    >\n      <MarkdownComponent\n        onFinish={() => changeShowFooter(true)}\n        url=\"terms-of-service.md\"\n      />\n    </PageComponent>\n  );\n};\n\nexport default TermsOfServicePage;\n","import {ApolloProvider} from \"@apollo/react-hooks\"\nimport {Snackbar} from \"@material-ui/core\"\nimport MuiAlert, {AlertProps} from \"@material-ui/lab/Alert\"\nimport React, {useState} from \"react\"\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\"\nimport {client, NotifyMessage} from \"./client\"\nimport IndexPage from \"./pages\"\nimport AboutPage from \"./pages/about\"\nimport AccountChoosePage from \"./pages/account/choose\"\nimport ForgotPasswordPage from \"./pages/account/forgot-password\"\nimport {LoginPage} from \"./pages/account/login\"\nimport {LogoutPage} from \"./pages/account/logout\"\nimport PasswordResetPage from \"./pages/account/password-reset\"\nimport RegisterPage from \"./pages/account/register\"\nimport AccountUpdatePage from \"./pages/account/update\"\nimport ContactPage from \"./pages/contact\"\nimport FindPage from \"./pages/find\"\nimport JobPage from \"./pages/job\"\nimport JobCreatePage from \"./pages/job/create\"\nimport LegalPage from \"./pages/legal\"\nimport DisclaimerPage from \"./pages/legal/disclaimer\"\nimport FaqPage from \"./pages/legal/faq\"\nimport PrivacyPolicyPage from \"./pages/legal/privacy-policy\"\nimport TermsOfServicePage from \"./pages/legal/terms-of-service\"\n\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\nexport interface BasePageProps {\n    updateSnack: (snack: NotifyMessage | undefined) => void\n}\n\nexport interface AppViewProps {}\n\nexport const AppView: React.FC<AppViewProps> = () => {\n    const [snack, updateSnack] = useState<NotifyMessage>()\n\n    return (\n        <div className=\"App\">\n            <Router>\n                <Switch>\n                    <Route path=\"/legal/terms-of-service\">\n                        <TermsOfServicePage />\n                    </Route>\n\n                    <Route path=\"/legal/privacy-policy\">\n                        <PrivacyPolicyPage />\n                    </Route>\n\n                    <Route path=\"/faq\">\n                        <FaqPage />\n                    </Route>\n\n                    <Route path=\"/legal/disclaimer\">\n                        <DisclaimerPage />\n                    </Route>\n\n                    <Route path=\"/account/logout\">\n                        <LogoutPage />\n                    </Route>\n\n                    <Route path=\"/account/password-reset\">\n                        <PasswordResetPage updateSnack={updateSnack} />\n                    </Route>\n\n                    <Route path=\"/account/forgot-password\">\n                        <ForgotPasswordPage updateSnack={updateSnack} />\n                    </Route>\n\n                    <Route path=\"/account/update\">\n                        <AccountUpdatePage updateSnack={updateSnack} />\n                    </Route>\n\n                    <Route path=\"/account/register/choose\">\n                        <AccountChoosePage />\n                    </Route>\n\n                    <Route path=\"/find\">\n                        <FindPage updateSnack={updateSnack} />\n                    </Route>\n\n                    <Route path=\"/job/create\">\n                        <JobCreatePage updateSnack={updateSnack} />\n                    </Route>\n\n                    <Route path=\"/job\">\n                        <JobPage updateSnack={updateSnack} />\n                    </Route>\n\n                    <Route path=\"/account/register\">\n                        <RegisterPage updateSnack={updateSnack} />\n                    </Route>\n\n                    <Route path=\"/account/login\">\n                        <LoginPage updateSnack={updateSnack} />\n                    </Route>\n\n                    <Route path=\"/about\">\n                        <AboutPage />\n                    </Route>\n\n                    <Route path=\"/legal\">\n                        <LegalPage />\n                    </Route>\n\n                    <Route path=\"/contact\">\n                        <ContactPage />\n                    </Route>\n\n                    <Route path=\"/\">\n                        <IndexPage updateSnack={updateSnack} />\n                    </Route>\n                </Switch>\n            </Router>\n\n            <Snackbar\n                open={!!snack}\n                autoHideDuration={6000}\n                onClose={event => {\n                    if (!event) {\n                        updateSnack(undefined)\n                    }\n                }}>\n                <Alert severity={snack?.severity || \"error\"}>\n                    {snack ? snack.message.replace(\"GraphQL error:\", \"\") : \"\"}\n                </Alert>\n            </Snackbar>\n        </div>\n    )\n}\n\nfunction App() {\n    return (\n        <ApolloProvider\n            {...{\n                client,\n            }}>\n            <AppView />\n        </ApolloProvider>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}