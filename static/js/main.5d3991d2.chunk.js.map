{"version":3,"sources":["hooks/useDateFromNow.ts","services/utils.ts","services/thumbnail.ts","graphql/schema.generated.ts","../../src/assert.ts","../../../src/validation/common.ts","graphql/fragmentMatcher.generated.ts","components/dxf-viewer.tsx","../../src/index.ts","../../src/memoize.ts","../../src/setting.ts","../../src/singleton.ts","../../../src/validation/index.ts","../../../src/validation/mutation.ts","../../../src/validation/query.ts","services/location-search.ts","components/snackbar.tsx","hooks/useSnack.tsx","hooks/useQuery.ts","components/form/file-upload.tsx","components/api-autocomplete.tsx","hooks/useDebounce.ts","components/form/location.tsx","components/tooltip.tsx","components/form/select.tsx","components/form/slider.tsx","components/form/text.tsx","components/form/resolver.tsx","components/form/form.tsx","hooks/useForm.ts","pages/invite.tsx","pages/job.tsx","components/hide-app-bar.tsx","components/menu.tsx","components/modal.tsx","components/page.tsx","components/markdown.tsx","pages/home.tsx","components/card-item.tsx","components/file-renderer.tsx","components/file-item-preview.tsx","components/page-title-bar.tsx","components/wrong-page.tsx","pages/jobs.tsx","components/switch-button.tsx","pages/submissions.tsx","pages/index.tsx","pages/about.tsx","components/picture-button.tsx","components/picture-select.tsx","pages/account/choose.tsx","pages/account/forgot-password.tsx","pages/account/login.tsx","pages/account/logout.tsx","pages/account/password-reset.tsx","pages/account/register.tsx","pages/account/update.tsx","pages/contact.tsx","pages/find.tsx","components/info-list.tsx","components/stepper.tsx","components/card-option.tsx","pages/legal.tsx","pages/legal/disclaimer.tsx","pages/legal/faq.tsx","pages/legal/privacy-policy.tsx","pages/legal/terms-of-service.tsx","components/table.tsx","services/download.ts","pages/submission.tsx","services/jsonToCsv.ts","components/file-preview.tsx","components/tabs.tsx","pages/submission/create.tsx","App.tsx","serviceWorker.ts","index.tsx","components/theme.ts","util/cachedStorage.ts","util/refreshToken.ts","util/index.ts","client.ts"],"names":["dayjs","extend","relativeTime","useDateFromNow","date","useMemo","fromNow","logger","Logging","__filename","removeIn","object","key","copy","contentFromFile","file","onLoad","reader","FileReader","onerror","error","onload","event","target","result","readAsText","svgToPng","dataUrl","canvas","document","createElement","context","getContext","image","Image","src","drawImage","pngUrl","toDataURL","dataURLtoFile","filename","arr","split","first","assert","match","mime","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","File","type","goToNewTab","url","window","open","goTo","nested","path","root","indices","slice","beforeIndex","lastIndex","nestedIndex","previous","reduce","acc","current","undefined","getRenderType","jobType","renderFileType","name","toLowerCase","setNested","value","removeNested","Object","keys","getNested","dxfToImageBuffer","dxf","strokeColor","theme","palette","primary","main","strokeWidth","svg","Helper","toSVG","replace","Buffer","from","CancelJobDocument","gql","useCancelJobMutation","baseOptions","ApolloReactHooks","CancelSubmissionDocument","useCancelSubmissionMutation","CreateNewJobFromSubmissionDocument","useCreateNewJobFromSubmissionMutation","CreateSubmissionDocument","useCreateSubmissionMutation","ForgotPasswordDocument","useForgotPasswordMutation","LoginDocument","useLoginMutation","LoginRefreshTokenDocument","RegisterDocument","useRegisterMutation","SendInvitationDocument","useSendInvitationMutation","SubmitForgotPasswordDocument","useSubmitForgotPasswordMutation","ToggleJobReceivedDocument","useToggleJobReceivedMutation","UpdateAccountDocument","useUpdateAccountMutation","UpdateJobProgressDocument","useUpdateJobProgressMutation","AcceptedJobsDocument","useAcceptedJobsQuery","AvailableSubmissionsDocument","useAvailableSubmissionsQuery","JobDocument","useJobQuery","MeDocument","useMeQuery","MedicalItemsDocument","useMedicalItemsQuery","SubmissionDocument","useSubmissionQuery","SubmissionJobsDocument","useSubmissionJobsQuery","SubmittedSubmissionsDocument","useSubmittedSubmissionsQuery","throwErr","mixed","oneOf","DXFViewer","height","source","width","useState","base64","changeSBase64","useEffect","updateSvg","test","base64data","toString","debug","a","data","content","fetch","response","text","getDXFData","style","padding","alt","cache","instance","email","common_1","password","GeometryType","Category","OsmType","FeatureType","SnackBarComponent","state","snack","updateSnack","Snackbar","autoHideDuration","onClose","elevation","variant","severity","message","SnackContext","React","createContext","useSnack","useContext","useQuery","URLSearchParams","useLocation","search","MAX_SIZE","FormFileUploadItem","PreviewComponent","accept","handleChange","icon","id","label","multiple","defaultValue","handleChangeStatus","useCallback","_","status","includes","props","SubmitButtonComponent","maxSizeBytes","initialFiles","Array","isArray","onChangeStatus","autoUpload","maxFiles","inputContent","extra","reject","display","flexDirection","Typography","marginLeft","toUpperCase","styles","dropzone","borderColor","dropzoneActive","backgroundColor","dropzoneReject","inputLabel","color","searchLocations","query","encodeURI","json","ApiAutocomplete","freeSolo","objectResolver","onQuery","onSelect","onTextChange","textProps","changeText","debouncedText","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","options","changeOptions","Autocomplete","filterOptions","x","onChange","newValue","renderInput","params","TextField","getOptionLabel","option","FormLocationItem","autoComplete","locationIds","required","setLocation","location","properties","display_name","latitude","longitude","geometry","coordinates","fullWidth","features","feature","TooltipComponent","hint","InputAdornment","position","Tooltip","title","placement","arrow","IconButton","aria-label","FormSelectItem","disabled","selectValue","changeSelectValue","FormControl","InputLabel","Select","endAdornment","labelId","entries","map","MenuItem","useStyles","makeStyles","flex","FormSliderItem","ending","form","max","min","step","classes","className","gutterBottom","Slider","getAriaValueText","valuetext","aria-labelledby","valueLabelDisplay","FormTextItem","multiline","textType","textValue","changeTextValue","htmlFor","OutlinedInput","rows","FormItemResolverComponent","formItem","element","render","unreachable","marginTop","spacing","FormComponent","children","formItems","initialForm","onSubmit","onUpdate","submitButtonTitle","initial","changeForm","updateForm","old","useForm","update","preventDefault","Grid","container","alignment","sm","xs","item","Button","ProgressStep","InvitePageView","user","Submitter","Volunteer","InvitePage","closeModal","onCompleted","sendInvitation","onError","mutate","args","variables","createStyles","link","textDecoration","sidebarButtons","justifyContent","previousScroll","HideOnScroll","throttleInverted","window_prop","trigger","useScrollTrigger","threshold","addEventListener","scrollY","Fade","in","HideAppBar","buttons","disableHide","homeButton","invertedInitial","inverted","changeInverted","buttonStyle","fontFamily","typography","fontSize","textTransform","appBar","AppBar","background","Toolbar","flexGrow","Link","href","button","CssBaseline","MenuComponent","anchorEl","setAnchorEl","Boolean","handleClose","onClick","currentTarget","handleClick","endIcon","startIcon","Menu","keepMounted","PaperProps","maxHeight","ITEM_HEIGHT","card","alignItems","details","modal","titleButton","marginBottom","titleText","ModalComponent","modalOpen","buttonProps","setOpen","handleOpen","renderedContent","Modal","disableBackdropClick","aria-describedby","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Card","CardContent","component","footer","textAlign","PageComponent","rolePages","roleRedirect","showFooter","changeComponent","meData","meError","loading","me","userType","rolePage","find","role","redirect","marginRight","firstName","lastName","paper","maxWidth","MarkdownComponent","fileName","onFinish","variableMaps","changeContent","markdown","forEach","to","Grow","onEntered","Paper","html","cardContent","cardGrid","paddingBottom","paddingTop","cardMedia","heroButtons","heroContent","backgroundImage","zIndex","HomePage","particles","line_linked","enable","move","out_mode","OutMode","out","speed","number","density","value_area","shape","size","anim","size_min","sync","random","retina_detect","Container","align","justify","allow","allowFullScreen","margin","CardItem","ButtonBase","FileRenderStateContainer","createContainer","previewImage","changePreviewImage","FileRender","useContainer","changeElement","inputSource","light","arrayBuffer","painter","captureFrame","model","getPainter","modelColor","rotate","orbitControls","getElement","gridContainer","GridView","child","i","FileItemPreview","items","presignedUrl","Provider","menuButton","PageTitleBar","rightItem","rightActionItem","WrongPageComponent","alignSelf","avatar","red","cardRoot","expand","transform","transition","transitions","create","duration","shortest","expandOpen","media","progressBar","progressText","fontWeight","JobCard","job","showAvatar","createdAt","progressNumber","progress","CardHeader","Avatar","volunteer","subheader","submission","files","preview","CardMedia","LinearProgress","toFixed","quantity","VolunteerJobs","acceptedJobs","sort","b","Date","getTime","SwitchButton","offIcon","onIcon","onStateChange","changeState","sortBy","titleMenu","SubmissionCard","submitter","total","distance","modelQuantity","laserCuttingQuantity","SubmitterSubmissions","submissions","useSortedSubmissions","submittedSubmissions","VolunteerSubmissions","availableSubmissions","fixSortOrder","sortOrder","SubmissionSortContainer","setSortBy","setSortOrder","SortingProperties","IndexPage","AboutPage","focusVisible","opacity","border","breakpoints","down","imageBackdrop","common","black","bottom","left","right","top","imageButton","white","imageMarked","imageSrc","backgroundPosition","backgroundSize","imageTitle","flexWrap","minWidth","PictureButton","focusRipple","focusVisibleClassName","PictureSelectComponent","images","AccountChoosePage","secondary","ForgotPasswordPageView","ForgotPasswordPage","forgotPassword","LoginPageView","LoginPage","login","refetchQueries","LogoutPage","logout","PasswordResetPageView","PasswordResetPage","submitForgotPassword","argToken","get","confirmPassword","token","RegisterPageView","argUserType","registrationToken","changeUserType","RegisterPage","register","AccountUpdatePageView","changeIsPasswordUpdate","isPasswordUpdate","address","AccountUpdatePage","updateAccount","onSubmitAccount","newPassword","updatePage","ContactPage","FindPageView","FindPage","list","InfoListComponent","List","action","actionItem","description","ListItem","clipboard","String","callback","ListItemAvatar","ListItemText","primaryTypographyProps","ListItemSecondaryAction","instructions","CustomizedSteppers","steps","currentStep","colors","color1","color2","color3","activeStep","setActiveStep","ColorLibConnector","withStyles","active","alternativeLabel","completed","line","borderRadius","StepConnector","icons","ColorLibStepIcon","boxShadow","clsx","Stepper","connector","Step","StepLabel","StepIconComponent","jobPageView","viewOriginalSubmissionButton","shippingProviders","jobStepperSteps","PrintCompleteView","onClickPrint","print","updateTrackingNumber","shippingProvider","changeShippingProvider","trim","JobPageStatus","cancelJob","showActionButtons","updateJobProgress","trackingNumber","changeTrackingNumber","done","nextStep","JobPageList","JobPageView","onSubmissionClick","renderType","JobPage","cancelResponse","cancelJobMutation","updateJobProgressMutation","jopPage","CardOptionComponent","subtitle","LegalPage","md","DisclaimerPage","changeShowFooter","FaqPage","PrivacyPolicyPage","TermsOfServicePage","table","visuallyHidden","clip","overflow","descendingComparator","orderBy","EnhancedTableHead","headCells","onRequestSort","order","TableHead","TableRow","TableCell","headCell","numeric","disablePadding","sortDirection","TableSortLabel","direction","property","EnhancedTableToolbar","toolbarBarItems","EnhancedTable","initialOrderProperty","nameProperty","onRowClick","customItems","setOrder","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","emptyRows","Math","TableContainer","Table","handleRequestSort","TableBody","array","comparator","stabilizedThis","el","index","stableSort","getComparator","row","hover","tabIndex","paddingRight","scope","customItem","filter","rowName","colSpan","TablePagination","rowsPerPageOptions","count","onChangePage","onChangeRowsPerPage","parseInt","submissionPageView","SubmissionInfo","assemblyUrl","SubmissionActions","useMyUserType","cancelSubmission","cancel","onRemoveSubmission","confirm","SubmissionTitle","SubmissionPageView","showJobs","modelFiles","laserCuttingFiles","SubmissionPage","submissionPage","SubmissionFilesContainer","setJobType","SubmissionSelector","CreateNewJobModal","laserCutterOption","LaserCutting","printingOption","Printing","maxQuantity","submitFormItems","createNewJobFromSubmission","MarkAsReceivedButton","SubmissionJobs","submissionJobs","fileType","blob","Blob","download","URL","createObjectURL","dataset","downloadurl","join","body","appendChild","click","removeChild","revokeObjectURL","downloadString","objects","objectHandler","values","Error","jsonToCsv","charAt","FilePreview","canCancel","canRemove","canRestart","fileWithMeta","meta","remove","restart","percent","hashName","hash","allFiles","startsWith","TabPanel","other","hidden","Box","p","TabsComponent","currentTab","tabs","setValue","Tabs","textColor","indicatorColor","Tab","SubmissionStateContainer","changeSubmission","changeStep","SubmissionItemSelect","medicalItems","marketplaceId","onMarketplaceSelect","onCustomSelect","custom","assembly","laserCutting","CreateSubmissionPageView","findItemFromId","medicalItem","stepViews","createdSubmission","previewPreview","modelPreview","laserCuttingPreview","uuid","submitted","CreateSubmissionPage","createSubmission","AppView","App","client","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","createMuiTheme","default","A400","cachedStorage","clear","localStorage","getItem","removeItem","setItem","tokenExpired","jwt","JSON","parse","decode","exp","now","getNewToken","userId","refreshToken","mutation","errors","loginRefreshToken","getJwtToken","jwtToken","InMemoryCache","fragmentMatcher","IntrospectionFragmentMatcher","introspectionQueryResultData","errorLink","graphQLErrors","networkError","locations","stringify","authLink","setContext","headers","authorization","uploadLink","createUploadLink","uri","ApolloLink","ApolloClient"],"mappings":"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","file":"static/js/main.5d3991d2.chunk.js","sourcesContent":["import dayjs from \"dayjs\"\nimport relativeTime from \"dayjs/plugin/relativeTime\"\nimport {useMemo} from \"react\"\n\ndayjs.extend(relativeTime)\n\nexport const useDateFromNow = (date: Date | string) =>\n    useMemo(() => dayjs(date).fromNow(), [date])\n","import {assert} from \"@dynamo/common\"\nimport {Logging} from \"@nimashoghi/logging\"\nimport {RenderType} from \"../components/file-renderer\"\nimport {JobType} from \"../graphql/schema.generated\"\n\nconst logger = Logging.logger({__filename})\n\nexport const nestedIndex = (path: string) => {\n    const indices = path.split(\".\").slice(1)\n    const beforeIndex: string | undefined = indices[indices.length - 2]\n    const lastIndex = indices[indices.length - 1]\n    return {beforeIndex, indices, lastIndex}\n}\n\nexport const removeIn = <T>(object: {[key: string]: T}, key: string) => {\n    const copy = {...object}\n    delete copy[key]\n    return copy\n}\n\nexport const capitalize = (string: string, all = false) => {\n    const regex = all ? /(?:^|\\s)\\S/g : /(?:^|\\s)\\S/\n    return string.replace(regex, (a) => {\n        return a.toUpperCase()\n    })\n}\n\nexport const contentFromFile = ({\n    file,\n    onLoad,\n}: {\n    file: File\n    onLoad: (content: string) => void\n}) => {\n    const reader = new FileReader()\n    reader.onerror = () => {\n        logger.error`error reading file`\n    }\n    reader.onload = (event) => {\n        onLoad(event.target?.result as string)\n    }\n    reader.readAsText(file)\n}\n\nexport const svgToPng = ({\n    dataUrl,\n    onLoad,\n}: {\n    dataUrl: string\n    onLoad: (pngUrl?: string) => void\n}) => {\n    const canvas = document.createElement(\"canvas\")\n    const context = canvas?.getContext(\"2d\")\n\n    const image = new Image()\n    image.src = dataUrl\n\n    image.onload = () => {\n        context?.drawImage(image, 75, 0)\n        const pngUrl = canvas?.toDataURL(\"image/png\")\n        onLoad(pngUrl)\n    }\n}\n\nexport const dataURLtoFile = (dataUrl: string, filename: string) => {\n    try {\n        const arr = dataUrl.split(\",\")\n        const first = arr[0]\n        assert(!!first[0], \"invalid data url\")\n        const match = first.match(/:(.*?);/)\n        assert(!!match, \"invalid data url\")\n        const mime = match[1]\n        const bstr = atob(arr[1])\n        let n = bstr.length\n        const u8arr = new Uint8Array(n)\n\n        while (n--) {\n            u8arr[n] = bstr.charCodeAt(n)\n        }\n\n        return new File([u8arr], filename, {type: mime})\n    } catch {\n        return undefined\n    }\n}\n\nexport const urlFromFile = ({\n    file,\n    onLoad,\n}: {\n    file: File\n    onLoad: (url: string) => void\n}) => {\n    const reader = new FileReader()\n    reader.onerror = () => {\n        logger.error`error reading file`\n    }\n    reader.onload = (event) => {\n        onLoad(event.target?.result as string)\n    }\n    reader.readAsDataURL(file)\n}\n\nexport const goToNewTab = (url: string) => {\n    window.open(url, \"_blank\")\n}\n\nexport const goTo = (url: string) => {\n    window.open(url, \"_self\")\n}\n\nconst nested = <T>(object: {[key: string]: T}, path: string) => {\n    const root = {...object}\n    const {beforeIndex, indices, lastIndex} = nestedIndex(path)\n    return {\n        beforeIndex,\n        lastIndex,\n        previous: indices.slice(0, -1).reduce(\n            // eslint-disable-next-line no-return-assign\n            (acc, current) =>\n                acc[current] !== undefined\n                    ? acc[current]\n                    : // eslint-disable-next-line @typescript-eslint/no-explicit-any, no-param-reassign\n                      (acc[current] = {} as any),\n            root,\n        ),\n        root,\n    }\n}\n\nexport const getRenderType = (jobType: JobType): RenderType => {\n    switch (jobType) {\n        case \"LaserCutting\":\n            return \"dxf\"\n        case \"Printing\":\n            return \"stl\"\n    }\n}\n\nexport const renderFileType = (name: string) => {\n    const type = name.match(/(.*)\\.(.*)/)?.[2]?.toLowerCase()\n    if (\n        type === \"png\" ||\n        type === \"png\" ||\n        type === \"jpeg\" ||\n        type === \"jpg\" ||\n        type === \"tif\" ||\n        type === \"svg\" ||\n        type === \"gif\"\n    ) {\n        return \"image\"\n    }\n    return type as RenderType | undefined\n}\n\nexport const partition = <T>(array: T[], isValid: (element: T) => boolean) => {\n    return array.reduce<T[][]>(\n        ([p, f], e) => (isValid(e) ? [[...p, e], f] : [p, [...f, e]]),\n        [[], []],\n    )\n}\n\nexport const setNested = <T>(object: {}, path: string, value: T) => {\n    const {lastIndex, previous, root} = nested(object, path)\n    previous[lastIndex] = value\n    return root\n}\n\nexport const removeNested = <T>(\n    object: {[key: string]: T},\n    path: string,\n): {[key: string]: T} => {\n    const {beforeIndex, lastIndex, previous, root} = nested(object, path)\n    delete previous[lastIndex]\n\n    if (Object.keys(previous).length === 0) {\n        if (beforeIndex) {\n            return removeNested<T>(root, `.${beforeIndex}`)\n        }\n    }\n    return root\n}\n\nexport const getNested = <T, C>(\n    object: Partial<T>,\n    path: string,\n): C | undefined => {\n    const {lastIndex, previous} = nested(object, path)\n    return previous[lastIndex] as C | undefined\n}\n\n/**\n * Determine the mobile operating system.\n * This function returns one of 'iOS', 'Android', 'Windows Phone', or 'unknown'.\n *\n * @returns {String}\n */\nexport const getMobileOperatingSystem = (): \"android\" | \"ios\" | \"unknown\" => {\n    const userAgent =\n        navigator.userAgent ||\n        navigator.vendor ||\n        ((window as unknown) as {opera: string}).opera\n\n    if (/android/i.test(userAgent)) {\n        return \"android\"\n    }\n\n    // iOS detection from: http://stackoverflow.com/a/9039885/177710\n    if (/iPad|iPhone|iPod/.test(userAgent)) {\n        return \"ios\"\n    }\n\n    return \"unknown\"\n}\n","import {Helper} from \"dxf\"\nimport {theme} from \"../components/theme\"\n\nexport const dxfToImageBuffer = ({\n    dxf,\n    strokeColor = theme.palette.primary.main,\n    strokeWidth = \"0.2%\",\n}: {\n    dxf: string\n    strokeColor?: string\n    strokeWidth?: string\n}) => {\n    const helper = new Helper(dxf)\n    const svg = helper\n        .toSVG()\n        .replace(`stroke-width=\"0.1%\"`, `stroke-width=\"${strokeWidth}\"`)\n        .replace(`stroke=\"rgb(0, 0, 0)\"`, `stroke=\"${strokeColor}\"`)\n\n        .replace(`stroke=\"#000000\"`, `stroke=\"${strokeColor || \"#000000\"}\"`)\n\n    const buff = Buffer.from(svg)\n    return buff\n}\n","/* eslint-disable */\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null | undefined;\n\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  DateTime: any;\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any;\n  /**\n   * A date string, such as 2007-12-03, compliant with the `full-date` format\n   * outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for\n   * representation of dates and times using the Gregorian calendar.\n   */\n  Date: string;\n};\n\nexport type AuthenticationResult = {\n   __typename: 'AuthenticationResult';\n  id: Scalars['ID'];\n  refreshToken: Scalars['String'];\n  token: Scalars['String'];\n  user: CurrentUser;\n};\n\nexport type CurrentUser = {\n   __typename: 'CurrentUser';\n  id: Scalars['ID'];\n  user: User;\n};\n\n\n\nexport type File = {\n   __typename: 'File';\n  id: Scalars['String'];\n  presignedUrl: Scalars['String'];\n};\n\nexport type GeolocationInput = {\n  latitude: Scalars['Float'];\n  longitude: Scalars['Float'];\n};\n\nexport type Job = {\n   __typename: 'Job';\n  createdAt: Scalars['DateTime'];\n  description?: Maybe<Scalars['String']>;\n  files: Array<File>;\n  id: Scalars['String'];\n  name: Scalars['String'];\n  progress: JobProgress;\n  quantity: Scalars['Int'];\n  submission: Submission;\n  trackingNumber?: Maybe<Scalars['String']>;\n  type: JobType;\n  volunteer: User;\n};\n\nexport type JobProgress = \n  'Assigned' |\n  'PrintComplete' |\n  'PrintStarted' |\n  'Received' |\n  'Shipped';\n\nexport type JobType = \n  'LaserCutting' |\n  'Printing';\n\nexport type MedicalItem = {\n   __typename: 'MedicalItem';\n  createdAt: Scalars['DateTime'];\n  description: Scalars['String'];\n  files: SubmissionFiles;\n  id: Scalars['String'];\n  name: Scalars['String'];\n};\n\nexport type Mutation = {\n   __typename: 'Mutation';\n  cancelJob: Job;\n  cancelSubmission: Submission;\n  createNewJobFromSubmission: Job;\n  createSubmission: Submission;\n  forgotPassword: Scalars['DateTime'];\n  login: AuthenticationResult;\n  loginRefreshToken: AuthenticationResult;\n  register: AuthenticationResult;\n  sendInvitation: Scalars['DateTime'];\n  submitForgotPassword: AuthenticationResult;\n  toggleJobReceived: Job;\n  updateAccount: User;\n  updateJobProgress: Job;\n};\n\n\nexport type MutationCancelJobArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationCancelSubmissionArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationCreateNewJobFromSubmissionArgs = {\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n  type: JobType;\n};\n\n\nexport type MutationCreateSubmissionArgs = {\n  address?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  files?: Maybe<SubmissionFilesInput>;\n  geolocation?: Maybe<GeolocationInput>;\n  marketplaceId?: Maybe<Scalars['ID']>;\n  name: Scalars['String'];\n  quantity: Scalars['Int'];\n};\n\n\nexport type MutationForgotPasswordArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationLoginArgs = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type MutationLoginRefreshTokenArgs = {\n  refreshToken: Scalars['String'];\n  userId: Scalars['ID'];\n};\n\n\nexport type MutationRegisterArgs = {\n  address: Scalars['String'];\n  email: Scalars['String'];\n  firstName: Scalars['String'];\n  geolocation: GeolocationInput;\n  lastName: Scalars['String'];\n  password: Scalars['String'];\n  registrationToken: Scalars['String'];\n  type: UserType;\n};\n\n\nexport type MutationSendInvitationArgs = {\n  email: Scalars['String'];\n  type: UserType;\n};\n\n\nexport type MutationSubmitForgotPasswordArgs = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n  token: Scalars['String'];\n};\n\n\nexport type MutationToggleJobReceivedArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationUpdateAccountArgs = {\n  address?: Maybe<Scalars['String']>;\n  firstName?: Maybe<Scalars['String']>;\n  geolocation?: Maybe<GeolocationInput>;\n  lastName?: Maybe<Scalars['String']>;\n  password?: Maybe<PasswordUpdateInput>;\n};\n\n\nexport type MutationUpdateJobProgressArgs = {\n  id: Scalars['ID'];\n  progress: JobProgress;\n  trackingNumber?: Maybe<Scalars['String']>;\n};\n\nexport type PasswordUpdateInput = {\n  newPassword: Scalars['String'];\n  oldPassword: Scalars['String'];\n};\n\nexport type Query = {\n   __typename: 'Query';\n  acceptedJobs: Array<Job>;\n  availableSubmissions: Array<Submission>;\n  job: Job;\n  me: CurrentUser;\n  medicalItems: Array<MedicalItem>;\n  submission: Submission;\n  submissionJobs: Array<Job>;\n  submittedSubmissions: Array<Submission>;\n};\n\n\nexport type QueryJobArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QuerySubmissionArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QuerySubmissionJobsArgs = {\n  id: Scalars['ID'];\n};\n\nexport type Submission = {\n   __typename: 'Submission';\n  address: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  description?: Maybe<Scalars['String']>;\n  distance: Scalars['Float'];\n  files: SubmissionFiles;\n  id: Scalars['String'];\n  latitude: Scalars['Float'];\n  longitude: Scalars['Float'];\n  name: Scalars['String'];\n  progress: SubmissionProgress;\n  quantity: Scalars['Int'];\n  status: SubmissionStatus;\n  submitter: User;\n};\n\nexport type SubmissionFiles = {\n   __typename: 'SubmissionFiles';\n  assemblyUrl?: Maybe<Scalars['String']>;\n  createdAt: Scalars['DateTime'];\n  id: Scalars['String'];\n  laserCuttingFiles: Array<File>;\n  modelFiles: Array<File>;\n  preview?: Maybe<File>;\n};\n\nexport type SubmissionFilesInput = {\n  assembly?: Maybe<Scalars['Upload']>;\n  assemblyUrl?: Maybe<Scalars['String']>;\n  laserCutting: Array<Scalars['Upload']>;\n  model: Array<Scalars['Upload']>;\n  preview?: Maybe<Scalars['Upload']>;\n};\n\nexport type SubmissionProgress = {\n   __typename: 'SubmissionProgress';\n  laserCutting: Scalars['Float'];\n  laserCuttingQuantity: Scalars['Float'];\n  model: Scalars['Float'];\n  modelQuantity: Scalars['Float'];\n  total: Scalars['Float'];\n};\n\nexport type SubmissionStatus = \n  'Finished' |\n  'InProgress' |\n  'Pending';\n\n\nexport type User = {\n   __typename: 'User';\n  address: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  email: Scalars['String'];\n  firstName: Scalars['String'];\n  id: Scalars['String'];\n  isMe: Scalars['Boolean'];\n  lastName: Scalars['String'];\n  latitude: Scalars['Float'];\n  longitude: Scalars['Float'];\n  type: UserType;\n};\n\nexport type UserType = \n  'Submitter' |\n  'Volunteer';\n\nexport type CancelJobMutationVariables = {\n  id: Scalars['ID'];\n};\n\n\nexport type CancelJobMutation = (\n  { __typename: 'Mutation' }\n  & { cancelJob: (\n    { __typename: 'Job' }\n    & Pick<Job, 'createdAt' | 'description' | 'id' | 'name' | 'progress' | 'quantity' | 'trackingNumber' | 'type'>\n    & { files: Array<(\n      { __typename: 'File' }\n      & Pick<File, 'id' | 'presignedUrl'>\n    )>, submission: (\n      { __typename: 'Submission' }\n      & Pick<Submission, 'address' | 'createdAt' | 'description' | 'distance' | 'id' | 'latitude' | 'longitude' | 'name' | 'quantity' | 'status'>\n      & { files: (\n        { __typename: 'SubmissionFiles' }\n        & Pick<SubmissionFiles, 'assemblyUrl' | 'createdAt' | 'id'>\n        & { laserCuttingFiles: Array<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )>, modelFiles: Array<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )>, preview?: Maybe<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )> }\n      ), progress: (\n        { __typename: 'SubmissionProgress' }\n        & Pick<SubmissionProgress, 'laserCutting' | 'laserCuttingQuantity' | 'model' | 'modelQuantity' | 'total'>\n      ), submitter: (\n        { __typename: 'User' }\n        & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n      ) }\n    ), volunteer: (\n      { __typename: 'User' }\n      & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n    ) }\n  ) }\n);\n\nexport type CancelSubmissionMutationVariables = {\n  id: Scalars['ID'];\n};\n\n\nexport type CancelSubmissionMutation = (\n  { __typename: 'Mutation' }\n  & { cancelSubmission: (\n    { __typename: 'Submission' }\n    & Pick<Submission, 'address' | 'createdAt' | 'description' | 'distance' | 'id' | 'latitude' | 'longitude' | 'name' | 'quantity' | 'status'>\n    & { files: (\n      { __typename: 'SubmissionFiles' }\n      & Pick<SubmissionFiles, 'assemblyUrl' | 'createdAt' | 'id'>\n      & { laserCuttingFiles: Array<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )>, modelFiles: Array<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )>, preview?: Maybe<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )> }\n    ), progress: (\n      { __typename: 'SubmissionProgress' }\n      & Pick<SubmissionProgress, 'laserCutting' | 'laserCuttingQuantity' | 'model' | 'modelQuantity' | 'total'>\n    ), submitter: (\n      { __typename: 'User' }\n      & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n    ) }\n  ) }\n);\n\nexport type CreateNewJobFromSubmissionMutationVariables = {\n  id: Scalars['ID'];\n  quantity: Scalars['Int'];\n  type: JobType;\n};\n\n\nexport type CreateNewJobFromSubmissionMutation = (\n  { __typename: 'Mutation' }\n  & { createNewJobFromSubmission: (\n    { __typename: 'Job' }\n    & Pick<Job, 'createdAt' | 'description' | 'id' | 'name' | 'progress' | 'quantity' | 'trackingNumber' | 'type'>\n    & { files: Array<(\n      { __typename: 'File' }\n      & Pick<File, 'id' | 'presignedUrl'>\n    )>, submission: (\n      { __typename: 'Submission' }\n      & Pick<Submission, 'address' | 'createdAt' | 'description' | 'distance' | 'id' | 'latitude' | 'longitude' | 'name' | 'quantity' | 'status'>\n      & { files: (\n        { __typename: 'SubmissionFiles' }\n        & Pick<SubmissionFiles, 'assemblyUrl' | 'createdAt' | 'id'>\n        & { laserCuttingFiles: Array<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )>, modelFiles: Array<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )>, preview?: Maybe<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )> }\n      ), progress: (\n        { __typename: 'SubmissionProgress' }\n        & Pick<SubmissionProgress, 'laserCutting' | 'laserCuttingQuantity' | 'model' | 'modelQuantity' | 'total'>\n      ), submitter: (\n        { __typename: 'User' }\n        & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n      ) }\n    ), volunteer: (\n      { __typename: 'User' }\n      & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n    ) }\n  ) }\n);\n\nexport type CreateSubmissionMutationVariables = {\n  address?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  files?: Maybe<SubmissionFilesInput>;\n  geolocation?: Maybe<GeolocationInput>;\n  marketplaceId?: Maybe<Scalars['ID']>;\n  name: Scalars['String'];\n  quantity: Scalars['Int'];\n};\n\n\nexport type CreateSubmissionMutation = (\n  { __typename: 'Mutation' }\n  & { createSubmission: (\n    { __typename: 'Submission' }\n    & Pick<Submission, 'address' | 'createdAt' | 'description' | 'distance' | 'id' | 'latitude' | 'longitude' | 'name' | 'quantity' | 'status'>\n    & { files: (\n      { __typename: 'SubmissionFiles' }\n      & Pick<SubmissionFiles, 'assemblyUrl' | 'createdAt' | 'id'>\n      & { laserCuttingFiles: Array<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )>, modelFiles: Array<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )>, preview?: Maybe<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )> }\n    ), progress: (\n      { __typename: 'SubmissionProgress' }\n      & Pick<SubmissionProgress, 'laserCutting' | 'laserCuttingQuantity' | 'model' | 'modelQuantity' | 'total'>\n    ), submitter: (\n      { __typename: 'User' }\n      & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n    ) }\n  ) }\n);\n\nexport type ForgotPasswordMutationVariables = {\n  email: Scalars['String'];\n};\n\n\nexport type ForgotPasswordMutation = (\n  { __typename: 'Mutation' }\n  & Pick<Mutation, 'forgotPassword'>\n);\n\nexport type LoginMutationVariables = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type LoginMutation = (\n  { __typename: 'Mutation' }\n  & { login: (\n    { __typename: 'AuthenticationResult' }\n    & Pick<AuthenticationResult, 'id' | 'refreshToken' | 'token'>\n    & { user: (\n      { __typename: 'CurrentUser' }\n      & Pick<CurrentUser, 'id'>\n      & { user: (\n        { __typename: 'User' }\n        & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n      ) }\n    ) }\n  ) }\n);\n\nexport type LoginRefreshTokenMutationVariables = {\n  refreshToken: Scalars['String'];\n  userId: Scalars['ID'];\n};\n\n\nexport type LoginRefreshTokenMutation = (\n  { __typename: 'Mutation' }\n  & { loginRefreshToken: (\n    { __typename: 'AuthenticationResult' }\n    & Pick<AuthenticationResult, 'id' | 'refreshToken' | 'token'>\n    & { user: (\n      { __typename: 'CurrentUser' }\n      & Pick<CurrentUser, 'id'>\n      & { user: (\n        { __typename: 'User' }\n        & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n      ) }\n    ) }\n  ) }\n);\n\nexport type RegisterMutationVariables = {\n  address: Scalars['String'];\n  email: Scalars['String'];\n  firstName: Scalars['String'];\n  geolocation: GeolocationInput;\n  lastName: Scalars['String'];\n  password: Scalars['String'];\n  registrationToken: Scalars['String'];\n  type: UserType;\n};\n\n\nexport type RegisterMutation = (\n  { __typename: 'Mutation' }\n  & { register: (\n    { __typename: 'AuthenticationResult' }\n    & Pick<AuthenticationResult, 'id' | 'refreshToken' | 'token'>\n    & { user: (\n      { __typename: 'CurrentUser' }\n      & Pick<CurrentUser, 'id'>\n      & { user: (\n        { __typename: 'User' }\n        & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n      ) }\n    ) }\n  ) }\n);\n\nexport type SendInvitationMutationVariables = {\n  email: Scalars['String'];\n  type: UserType;\n};\n\n\nexport type SendInvitationMutation = (\n  { __typename: 'Mutation' }\n  & Pick<Mutation, 'sendInvitation'>\n);\n\nexport type SubmitForgotPasswordMutationVariables = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n  token: Scalars['String'];\n};\n\n\nexport type SubmitForgotPasswordMutation = (\n  { __typename: 'Mutation' }\n  & { submitForgotPassword: (\n    { __typename: 'AuthenticationResult' }\n    & Pick<AuthenticationResult, 'id' | 'refreshToken' | 'token'>\n    & { user: (\n      { __typename: 'CurrentUser' }\n      & Pick<CurrentUser, 'id'>\n      & { user: (\n        { __typename: 'User' }\n        & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n      ) }\n    ) }\n  ) }\n);\n\nexport type ToggleJobReceivedMutationVariables = {\n  id: Scalars['ID'];\n};\n\n\nexport type ToggleJobReceivedMutation = (\n  { __typename: 'Mutation' }\n  & { toggleJobReceived: (\n    { __typename: 'Job' }\n    & Pick<Job, 'createdAt' | 'description' | 'id' | 'name' | 'progress' | 'quantity' | 'trackingNumber' | 'type'>\n    & { files: Array<(\n      { __typename: 'File' }\n      & Pick<File, 'id' | 'presignedUrl'>\n    )>, submission: (\n      { __typename: 'Submission' }\n      & Pick<Submission, 'address' | 'createdAt' | 'description' | 'distance' | 'id' | 'latitude' | 'longitude' | 'name' | 'quantity' | 'status'>\n      & { files: (\n        { __typename: 'SubmissionFiles' }\n        & Pick<SubmissionFiles, 'assemblyUrl' | 'createdAt' | 'id'>\n        & { laserCuttingFiles: Array<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )>, modelFiles: Array<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )>, preview?: Maybe<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )> }\n      ), progress: (\n        { __typename: 'SubmissionProgress' }\n        & Pick<SubmissionProgress, 'laserCutting' | 'laserCuttingQuantity' | 'model' | 'modelQuantity' | 'total'>\n      ), submitter: (\n        { __typename: 'User' }\n        & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n      ) }\n    ), volunteer: (\n      { __typename: 'User' }\n      & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n    ) }\n  ) }\n);\n\nexport type UpdateAccountMutationVariables = {\n  address?: Maybe<Scalars['String']>;\n  firstName?: Maybe<Scalars['String']>;\n  geolocation?: Maybe<GeolocationInput>;\n  lastName?: Maybe<Scalars['String']>;\n  password?: Maybe<PasswordUpdateInput>;\n};\n\n\nexport type UpdateAccountMutation = (\n  { __typename: 'Mutation' }\n  & { updateAccount: (\n    { __typename: 'User' }\n    & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n  ) }\n);\n\nexport type UpdateJobProgressMutationVariables = {\n  id: Scalars['ID'];\n  progress: JobProgress;\n  trackingNumber?: Maybe<Scalars['String']>;\n};\n\n\nexport type UpdateJobProgressMutation = (\n  { __typename: 'Mutation' }\n  & { updateJobProgress: (\n    { __typename: 'Job' }\n    & Pick<Job, 'createdAt' | 'description' | 'id' | 'name' | 'progress' | 'quantity' | 'trackingNumber' | 'type'>\n    & { files: Array<(\n      { __typename: 'File' }\n      & Pick<File, 'id' | 'presignedUrl'>\n    )>, submission: (\n      { __typename: 'Submission' }\n      & Pick<Submission, 'address' | 'createdAt' | 'description' | 'distance' | 'id' | 'latitude' | 'longitude' | 'name' | 'quantity' | 'status'>\n      & { files: (\n        { __typename: 'SubmissionFiles' }\n        & Pick<SubmissionFiles, 'assemblyUrl' | 'createdAt' | 'id'>\n        & { laserCuttingFiles: Array<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )>, modelFiles: Array<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )>, preview?: Maybe<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )> }\n      ), progress: (\n        { __typename: 'SubmissionProgress' }\n        & Pick<SubmissionProgress, 'laserCutting' | 'laserCuttingQuantity' | 'model' | 'modelQuantity' | 'total'>\n      ), submitter: (\n        { __typename: 'User' }\n        & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n      ) }\n    ), volunteer: (\n      { __typename: 'User' }\n      & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n    ) }\n  ) }\n);\n\nexport type AcceptedJobsQueryVariables = {};\n\n\nexport type AcceptedJobsQuery = (\n  { __typename: 'Query' }\n  & { acceptedJobs: Array<(\n    { __typename: 'Job' }\n    & Pick<Job, 'createdAt' | 'description' | 'id' | 'name' | 'progress' | 'quantity' | 'trackingNumber' | 'type'>\n    & { files: Array<(\n      { __typename: 'File' }\n      & Pick<File, 'id' | 'presignedUrl'>\n    )>, submission: (\n      { __typename: 'Submission' }\n      & Pick<Submission, 'address' | 'createdAt' | 'description' | 'distance' | 'id' | 'latitude' | 'longitude' | 'name' | 'quantity' | 'status'>\n      & { files: (\n        { __typename: 'SubmissionFiles' }\n        & Pick<SubmissionFiles, 'assemblyUrl' | 'createdAt' | 'id'>\n        & { laserCuttingFiles: Array<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )>, modelFiles: Array<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )>, preview?: Maybe<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )> }\n      ), progress: (\n        { __typename: 'SubmissionProgress' }\n        & Pick<SubmissionProgress, 'laserCutting' | 'laserCuttingQuantity' | 'model' | 'modelQuantity' | 'total'>\n      ), submitter: (\n        { __typename: 'User' }\n        & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n      ) }\n    ), volunteer: (\n      { __typename: 'User' }\n      & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n    ) }\n  )> }\n);\n\nexport type AvailableSubmissionsQueryVariables = {};\n\n\nexport type AvailableSubmissionsQuery = (\n  { __typename: 'Query' }\n  & { availableSubmissions: Array<(\n    { __typename: 'Submission' }\n    & Pick<Submission, 'address' | 'createdAt' | 'description' | 'distance' | 'id' | 'latitude' | 'longitude' | 'name' | 'quantity' | 'status'>\n    & { files: (\n      { __typename: 'SubmissionFiles' }\n      & Pick<SubmissionFiles, 'assemblyUrl' | 'createdAt' | 'id'>\n      & { laserCuttingFiles: Array<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )>, modelFiles: Array<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )>, preview?: Maybe<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )> }\n    ), progress: (\n      { __typename: 'SubmissionProgress' }\n      & Pick<SubmissionProgress, 'laserCutting' | 'laserCuttingQuantity' | 'model' | 'modelQuantity' | 'total'>\n    ), submitter: (\n      { __typename: 'User' }\n      & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n    ) }\n  )> }\n);\n\nexport type JobQueryVariables = {\n  id: Scalars['ID'];\n};\n\n\nexport type JobQuery = (\n  { __typename: 'Query' }\n  & { job: (\n    { __typename: 'Job' }\n    & Pick<Job, 'createdAt' | 'description' | 'id' | 'name' | 'progress' | 'quantity' | 'trackingNumber' | 'type'>\n    & { files: Array<(\n      { __typename: 'File' }\n      & Pick<File, 'id' | 'presignedUrl'>\n    )>, submission: (\n      { __typename: 'Submission' }\n      & Pick<Submission, 'address' | 'createdAt' | 'description' | 'distance' | 'id' | 'latitude' | 'longitude' | 'name' | 'quantity' | 'status'>\n      & { files: (\n        { __typename: 'SubmissionFiles' }\n        & Pick<SubmissionFiles, 'assemblyUrl' | 'createdAt' | 'id'>\n        & { laserCuttingFiles: Array<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )>, modelFiles: Array<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )>, preview?: Maybe<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )> }\n      ), progress: (\n        { __typename: 'SubmissionProgress' }\n        & Pick<SubmissionProgress, 'laserCutting' | 'laserCuttingQuantity' | 'model' | 'modelQuantity' | 'total'>\n      ), submitter: (\n        { __typename: 'User' }\n        & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n      ) }\n    ), volunteer: (\n      { __typename: 'User' }\n      & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n    ) }\n  ) }\n);\n\nexport type MeQueryVariables = {};\n\n\nexport type MeQuery = (\n  { __typename: 'Query' }\n  & { me: (\n    { __typename: 'CurrentUser' }\n    & Pick<CurrentUser, 'id'>\n    & { user: (\n      { __typename: 'User' }\n      & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n    ) }\n  ) }\n);\n\nexport type MedicalItemsQueryVariables = {};\n\n\nexport type MedicalItemsQuery = (\n  { __typename: 'Query' }\n  & { medicalItems: Array<(\n    { __typename: 'MedicalItem' }\n    & Pick<MedicalItem, 'createdAt' | 'description' | 'id' | 'name'>\n    & { files: (\n      { __typename: 'SubmissionFiles' }\n      & Pick<SubmissionFiles, 'assemblyUrl' | 'createdAt' | 'id'>\n      & { laserCuttingFiles: Array<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )>, modelFiles: Array<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )>, preview?: Maybe<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )> }\n    ) }\n  )> }\n);\n\nexport type SubmissionQueryVariables = {\n  id: Scalars['ID'];\n};\n\n\nexport type SubmissionQuery = (\n  { __typename: 'Query' }\n  & { submission: (\n    { __typename: 'Submission' }\n    & Pick<Submission, 'address' | 'createdAt' | 'description' | 'distance' | 'id' | 'latitude' | 'longitude' | 'name' | 'quantity' | 'status'>\n    & { files: (\n      { __typename: 'SubmissionFiles' }\n      & Pick<SubmissionFiles, 'assemblyUrl' | 'createdAt' | 'id'>\n      & { laserCuttingFiles: Array<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )>, modelFiles: Array<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )>, preview?: Maybe<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )> }\n    ), progress: (\n      { __typename: 'SubmissionProgress' }\n      & Pick<SubmissionProgress, 'laserCutting' | 'laserCuttingQuantity' | 'model' | 'modelQuantity' | 'total'>\n    ), submitter: (\n      { __typename: 'User' }\n      & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n    ) }\n  ) }\n);\n\nexport type SubmissionJobsQueryVariables = {\n  id: Scalars['ID'];\n};\n\n\nexport type SubmissionJobsQuery = (\n  { __typename: 'Query' }\n  & { submissionJobs: Array<(\n    { __typename: 'Job' }\n    & Pick<Job, 'createdAt' | 'description' | 'id' | 'name' | 'progress' | 'quantity' | 'trackingNumber' | 'type'>\n    & { files: Array<(\n      { __typename: 'File' }\n      & Pick<File, 'id' | 'presignedUrl'>\n    )>, submission: (\n      { __typename: 'Submission' }\n      & Pick<Submission, 'address' | 'createdAt' | 'description' | 'distance' | 'id' | 'latitude' | 'longitude' | 'name' | 'quantity' | 'status'>\n      & { files: (\n        { __typename: 'SubmissionFiles' }\n        & Pick<SubmissionFiles, 'assemblyUrl' | 'createdAt' | 'id'>\n        & { laserCuttingFiles: Array<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )>, modelFiles: Array<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )>, preview?: Maybe<(\n          { __typename: 'File' }\n          & Pick<File, 'id' | 'presignedUrl'>\n        )> }\n      ), progress: (\n        { __typename: 'SubmissionProgress' }\n        & Pick<SubmissionProgress, 'laserCutting' | 'laserCuttingQuantity' | 'model' | 'modelQuantity' | 'total'>\n      ), submitter: (\n        { __typename: 'User' }\n        & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n      ) }\n    ), volunteer: (\n      { __typename: 'User' }\n      & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n    ) }\n  )> }\n);\n\nexport type SubmittedSubmissionsQueryVariables = {};\n\n\nexport type SubmittedSubmissionsQuery = (\n  { __typename: 'Query' }\n  & { submittedSubmissions: Array<(\n    { __typename: 'Submission' }\n    & Pick<Submission, 'address' | 'createdAt' | 'description' | 'distance' | 'id' | 'latitude' | 'longitude' | 'name' | 'quantity' | 'status'>\n    & { files: (\n      { __typename: 'SubmissionFiles' }\n      & Pick<SubmissionFiles, 'assemblyUrl' | 'createdAt' | 'id'>\n      & { laserCuttingFiles: Array<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )>, modelFiles: Array<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )>, preview?: Maybe<(\n        { __typename: 'File' }\n        & Pick<File, 'id' | 'presignedUrl'>\n      )> }\n    ), progress: (\n      { __typename: 'SubmissionProgress' }\n      & Pick<SubmissionProgress, 'laserCutting' | 'laserCuttingQuantity' | 'model' | 'modelQuantity' | 'total'>\n    ), submitter: (\n      { __typename: 'User' }\n      & Pick<User, 'address' | 'createdAt' | 'email' | 'firstName' | 'id' | 'isMe' | 'lastName' | 'latitude' | 'longitude' | 'type'>\n    ) }\n  )> }\n);\n\n\nexport const CancelJobDocument = gql`\n    mutation cancelJob($id: ID!) {\n  cancelJob(id: $id) {\n    createdAt\n    description\n    files {\n      id\n      presignedUrl\n    }\n    id\n    name\n    progress\n    quantity\n    submission {\n      address\n      createdAt\n      description\n      distance\n      files {\n        assemblyUrl\n        createdAt\n        id\n        laserCuttingFiles {\n          id\n          presignedUrl\n        }\n        modelFiles {\n          id\n          presignedUrl\n        }\n        preview {\n          id\n          presignedUrl\n        }\n      }\n      id\n      latitude\n      longitude\n      name\n      progress {\n        laserCutting\n        laserCuttingQuantity\n        model\n        modelQuantity\n        total\n      }\n      quantity\n      status\n      submitter {\n        address\n        createdAt\n        email\n        firstName\n        id\n        isMe\n        lastName\n        latitude\n        longitude\n        type\n      }\n    }\n    trackingNumber\n    type\n    volunteer {\n      address\n      createdAt\n      email\n      firstName\n      id\n      isMe\n      lastName\n      latitude\n      longitude\n      type\n    }\n  }\n}\n    `;\nexport type CancelJobMutationFn = ApolloReactCommon.MutationFunction<CancelJobMutation, CancelJobMutationVariables>;\n\n/**\n * __useCancelJobMutation__\n *\n * To run a mutation, you first call `useCancelJobMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCancelJobMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [cancelJobMutation, { data, loading, error }] = useCancelJobMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useCancelJobMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CancelJobMutation, CancelJobMutationVariables>) {\n        return ApolloReactHooks.useMutation<CancelJobMutation, CancelJobMutationVariables>(CancelJobDocument, baseOptions);\n      }\nexport type CancelJobMutationHookResult = ReturnType<typeof useCancelJobMutation>;\nexport type CancelJobMutationResult = ApolloReactCommon.MutationResult<CancelJobMutation>;\nexport type CancelJobMutationOptions = ApolloReactCommon.BaseMutationOptions<CancelJobMutation, CancelJobMutationVariables>;\nexport const CancelSubmissionDocument = gql`\n    mutation cancelSubmission($id: ID!) {\n  cancelSubmission(id: $id) {\n    address\n    createdAt\n    description\n    distance\n    files {\n      assemblyUrl\n      createdAt\n      id\n      laserCuttingFiles {\n        id\n        presignedUrl\n      }\n      modelFiles {\n        id\n        presignedUrl\n      }\n      preview {\n        id\n        presignedUrl\n      }\n    }\n    id\n    latitude\n    longitude\n    name\n    progress {\n      laserCutting\n      laserCuttingQuantity\n      model\n      modelQuantity\n      total\n    }\n    quantity\n    status\n    submitter {\n      address\n      createdAt\n      email\n      firstName\n      id\n      isMe\n      lastName\n      latitude\n      longitude\n      type\n    }\n  }\n}\n    `;\nexport type CancelSubmissionMutationFn = ApolloReactCommon.MutationFunction<CancelSubmissionMutation, CancelSubmissionMutationVariables>;\n\n/**\n * __useCancelSubmissionMutation__\n *\n * To run a mutation, you first call `useCancelSubmissionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCancelSubmissionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [cancelSubmissionMutation, { data, loading, error }] = useCancelSubmissionMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useCancelSubmissionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CancelSubmissionMutation, CancelSubmissionMutationVariables>) {\n        return ApolloReactHooks.useMutation<CancelSubmissionMutation, CancelSubmissionMutationVariables>(CancelSubmissionDocument, baseOptions);\n      }\nexport type CancelSubmissionMutationHookResult = ReturnType<typeof useCancelSubmissionMutation>;\nexport type CancelSubmissionMutationResult = ApolloReactCommon.MutationResult<CancelSubmissionMutation>;\nexport type CancelSubmissionMutationOptions = ApolloReactCommon.BaseMutationOptions<CancelSubmissionMutation, CancelSubmissionMutationVariables>;\nexport const CreateNewJobFromSubmissionDocument = gql`\n    mutation createNewJobFromSubmission($id: ID!, $quantity: Int!, $type: JobType!) {\n  createNewJobFromSubmission(id: $id, quantity: $quantity, type: $type) {\n    createdAt\n    description\n    files {\n      id\n      presignedUrl\n    }\n    id\n    name\n    progress\n    quantity\n    submission {\n      address\n      createdAt\n      description\n      distance\n      files {\n        assemblyUrl\n        createdAt\n        id\n        laserCuttingFiles {\n          id\n          presignedUrl\n        }\n        modelFiles {\n          id\n          presignedUrl\n        }\n        preview {\n          id\n          presignedUrl\n        }\n      }\n      id\n      latitude\n      longitude\n      name\n      progress {\n        laserCutting\n        laserCuttingQuantity\n        model\n        modelQuantity\n        total\n      }\n      quantity\n      status\n      submitter {\n        address\n        createdAt\n        email\n        firstName\n        id\n        isMe\n        lastName\n        latitude\n        longitude\n        type\n      }\n    }\n    trackingNumber\n    type\n    volunteer {\n      address\n      createdAt\n      email\n      firstName\n      id\n      isMe\n      lastName\n      latitude\n      longitude\n      type\n    }\n  }\n}\n    `;\nexport type CreateNewJobFromSubmissionMutationFn = ApolloReactCommon.MutationFunction<CreateNewJobFromSubmissionMutation, CreateNewJobFromSubmissionMutationVariables>;\n\n/**\n * __useCreateNewJobFromSubmissionMutation__\n *\n * To run a mutation, you first call `useCreateNewJobFromSubmissionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateNewJobFromSubmissionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createNewJobFromSubmissionMutation, { data, loading, error }] = useCreateNewJobFromSubmissionMutation({\n *   variables: {\n *      id: // value for 'id'\n *      quantity: // value for 'quantity'\n *      type: // value for 'type'\n *   },\n * });\n */\nexport function useCreateNewJobFromSubmissionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateNewJobFromSubmissionMutation, CreateNewJobFromSubmissionMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateNewJobFromSubmissionMutation, CreateNewJobFromSubmissionMutationVariables>(CreateNewJobFromSubmissionDocument, baseOptions);\n      }\nexport type CreateNewJobFromSubmissionMutationHookResult = ReturnType<typeof useCreateNewJobFromSubmissionMutation>;\nexport type CreateNewJobFromSubmissionMutationResult = ApolloReactCommon.MutationResult<CreateNewJobFromSubmissionMutation>;\nexport type CreateNewJobFromSubmissionMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateNewJobFromSubmissionMutation, CreateNewJobFromSubmissionMutationVariables>;\nexport const CreateSubmissionDocument = gql`\n    mutation createSubmission($address: String, $description: String, $files: SubmissionFilesInput, $geolocation: GeolocationInput, $marketplaceId: ID, $name: String!, $quantity: Int!) {\n  createSubmission(address: $address, description: $description, files: $files, geolocation: $geolocation, marketplaceId: $marketplaceId, name: $name, quantity: $quantity) {\n    address\n    createdAt\n    description\n    distance\n    files {\n      assemblyUrl\n      createdAt\n      id\n      laserCuttingFiles {\n        id\n        presignedUrl\n      }\n      modelFiles {\n        id\n        presignedUrl\n      }\n      preview {\n        id\n        presignedUrl\n      }\n    }\n    id\n    latitude\n    longitude\n    name\n    progress {\n      laserCutting\n      laserCuttingQuantity\n      model\n      modelQuantity\n      total\n    }\n    quantity\n    status\n    submitter {\n      address\n      createdAt\n      email\n      firstName\n      id\n      isMe\n      lastName\n      latitude\n      longitude\n      type\n    }\n  }\n}\n    `;\nexport type CreateSubmissionMutationFn = ApolloReactCommon.MutationFunction<CreateSubmissionMutation, CreateSubmissionMutationVariables>;\n\n/**\n * __useCreateSubmissionMutation__\n *\n * To run a mutation, you first call `useCreateSubmissionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateSubmissionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createSubmissionMutation, { data, loading, error }] = useCreateSubmissionMutation({\n *   variables: {\n *      address: // value for 'address'\n *      description: // value for 'description'\n *      files: // value for 'files'\n *      geolocation: // value for 'geolocation'\n *      marketplaceId: // value for 'marketplaceId'\n *      name: // value for 'name'\n *      quantity: // value for 'quantity'\n *   },\n * });\n */\nexport function useCreateSubmissionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateSubmissionMutation, CreateSubmissionMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateSubmissionMutation, CreateSubmissionMutationVariables>(CreateSubmissionDocument, baseOptions);\n      }\nexport type CreateSubmissionMutationHookResult = ReturnType<typeof useCreateSubmissionMutation>;\nexport type CreateSubmissionMutationResult = ApolloReactCommon.MutationResult<CreateSubmissionMutation>;\nexport type CreateSubmissionMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateSubmissionMutation, CreateSubmissionMutationVariables>;\nexport const ForgotPasswordDocument = gql`\n    mutation forgotPassword($email: String!) {\n  forgotPassword(email: $email)\n}\n    `;\nexport type ForgotPasswordMutationFn = ApolloReactCommon.MutationFunction<ForgotPasswordMutation, ForgotPasswordMutationVariables>;\n\n/**\n * __useForgotPasswordMutation__\n *\n * To run a mutation, you first call `useForgotPasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useForgotPasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [forgotPasswordMutation, { data, loading, error }] = useForgotPasswordMutation({\n *   variables: {\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useForgotPasswordMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables>) {\n        return ApolloReactHooks.useMutation<ForgotPasswordMutation, ForgotPasswordMutationVariables>(ForgotPasswordDocument, baseOptions);\n      }\nexport type ForgotPasswordMutationHookResult = ReturnType<typeof useForgotPasswordMutation>;\nexport type ForgotPasswordMutationResult = ApolloReactCommon.MutationResult<ForgotPasswordMutation>;\nexport type ForgotPasswordMutationOptions = ApolloReactCommon.BaseMutationOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables>;\nexport const LoginDocument = gql`\n    mutation login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    id\n    refreshToken\n    token\n    user {\n      id\n      user {\n        address\n        createdAt\n        email\n        firstName\n        id\n        isMe\n        lastName\n        latitude\n        longitude\n        type\n      }\n    }\n  }\n}\n    `;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LoginRefreshTokenDocument = gql`\n    mutation loginRefreshToken($refreshToken: String!, $userId: ID!) {\n  loginRefreshToken(refreshToken: $refreshToken, userId: $userId) {\n    id\n    refreshToken\n    token\n    user {\n      id\n      user {\n        address\n        createdAt\n        email\n        firstName\n        id\n        isMe\n        lastName\n        latitude\n        longitude\n        type\n      }\n    }\n  }\n}\n    `;\nexport type LoginRefreshTokenMutationFn = ApolloReactCommon.MutationFunction<LoginRefreshTokenMutation, LoginRefreshTokenMutationVariables>;\n\n/**\n * __useLoginRefreshTokenMutation__\n *\n * To run a mutation, you first call `useLoginRefreshTokenMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginRefreshTokenMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginRefreshTokenMutation, { data, loading, error }] = useLoginRefreshTokenMutation({\n *   variables: {\n *      refreshToken: // value for 'refreshToken'\n *      userId: // value for 'userId'\n *   },\n * });\n */\nexport function useLoginRefreshTokenMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginRefreshTokenMutation, LoginRefreshTokenMutationVariables>) {\n        return ApolloReactHooks.useMutation<LoginRefreshTokenMutation, LoginRefreshTokenMutationVariables>(LoginRefreshTokenDocument, baseOptions);\n      }\nexport type LoginRefreshTokenMutationHookResult = ReturnType<typeof useLoginRefreshTokenMutation>;\nexport type LoginRefreshTokenMutationResult = ApolloReactCommon.MutationResult<LoginRefreshTokenMutation>;\nexport type LoginRefreshTokenMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginRefreshTokenMutation, LoginRefreshTokenMutationVariables>;\nexport const RegisterDocument = gql`\n    mutation register($address: String!, $email: String!, $firstName: String!, $geolocation: GeolocationInput!, $lastName: String!, $password: String!, $registrationToken: String!, $type: UserType!) {\n  register(address: $address, email: $email, firstName: $firstName, geolocation: $geolocation, lastName: $lastName, password: $password, registrationToken: $registrationToken, type: $type) {\n    id\n    refreshToken\n    token\n    user {\n      id\n      user {\n        address\n        createdAt\n        email\n        firstName\n        id\n        isMe\n        lastName\n        latitude\n        longitude\n        type\n      }\n    }\n  }\n}\n    `;\nexport type RegisterMutationFn = ApolloReactCommon.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      address: // value for 'address'\n *      email: // value for 'email'\n *      firstName: // value for 'firstName'\n *      geolocation: // value for 'geolocation'\n *      lastName: // value for 'lastName'\n *      password: // value for 'password'\n *      registrationToken: // value for 'registrationToken'\n *      type: // value for 'type'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        return ApolloReactHooks.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = ApolloReactCommon.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = ApolloReactCommon.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const SendInvitationDocument = gql`\n    mutation sendInvitation($email: String!, $type: UserType!) {\n  sendInvitation(email: $email, type: $type)\n}\n    `;\nexport type SendInvitationMutationFn = ApolloReactCommon.MutationFunction<SendInvitationMutation, SendInvitationMutationVariables>;\n\n/**\n * __useSendInvitationMutation__\n *\n * To run a mutation, you first call `useSendInvitationMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSendInvitationMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [sendInvitationMutation, { data, loading, error }] = useSendInvitationMutation({\n *   variables: {\n *      email: // value for 'email'\n *      type: // value for 'type'\n *   },\n * });\n */\nexport function useSendInvitationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SendInvitationMutation, SendInvitationMutationVariables>) {\n        return ApolloReactHooks.useMutation<SendInvitationMutation, SendInvitationMutationVariables>(SendInvitationDocument, baseOptions);\n      }\nexport type SendInvitationMutationHookResult = ReturnType<typeof useSendInvitationMutation>;\nexport type SendInvitationMutationResult = ApolloReactCommon.MutationResult<SendInvitationMutation>;\nexport type SendInvitationMutationOptions = ApolloReactCommon.BaseMutationOptions<SendInvitationMutation, SendInvitationMutationVariables>;\nexport const SubmitForgotPasswordDocument = gql`\n    mutation submitForgotPassword($email: String!, $password: String!, $token: String!) {\n  submitForgotPassword(email: $email, password: $password, token: $token) {\n    id\n    refreshToken\n    token\n    user {\n      id\n      user {\n        address\n        createdAt\n        email\n        firstName\n        id\n        isMe\n        lastName\n        latitude\n        longitude\n        type\n      }\n    }\n  }\n}\n    `;\nexport type SubmitForgotPasswordMutationFn = ApolloReactCommon.MutationFunction<SubmitForgotPasswordMutation, SubmitForgotPasswordMutationVariables>;\n\n/**\n * __useSubmitForgotPasswordMutation__\n *\n * To run a mutation, you first call `useSubmitForgotPasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSubmitForgotPasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [submitForgotPasswordMutation, { data, loading, error }] = useSubmitForgotPasswordMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *      token: // value for 'token'\n *   },\n * });\n */\nexport function useSubmitForgotPasswordMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SubmitForgotPasswordMutation, SubmitForgotPasswordMutationVariables>) {\n        return ApolloReactHooks.useMutation<SubmitForgotPasswordMutation, SubmitForgotPasswordMutationVariables>(SubmitForgotPasswordDocument, baseOptions);\n      }\nexport type SubmitForgotPasswordMutationHookResult = ReturnType<typeof useSubmitForgotPasswordMutation>;\nexport type SubmitForgotPasswordMutationResult = ApolloReactCommon.MutationResult<SubmitForgotPasswordMutation>;\nexport type SubmitForgotPasswordMutationOptions = ApolloReactCommon.BaseMutationOptions<SubmitForgotPasswordMutation, SubmitForgotPasswordMutationVariables>;\nexport const ToggleJobReceivedDocument = gql`\n    mutation toggleJobReceived($id: ID!) {\n  toggleJobReceived(id: $id) {\n    createdAt\n    description\n    files {\n      id\n      presignedUrl\n    }\n    id\n    name\n    progress\n    quantity\n    submission {\n      address\n      createdAt\n      description\n      distance\n      files {\n        assemblyUrl\n        createdAt\n        id\n        laserCuttingFiles {\n          id\n          presignedUrl\n        }\n        modelFiles {\n          id\n          presignedUrl\n        }\n        preview {\n          id\n          presignedUrl\n        }\n      }\n      id\n      latitude\n      longitude\n      name\n      progress {\n        laserCutting\n        laserCuttingQuantity\n        model\n        modelQuantity\n        total\n      }\n      quantity\n      status\n      submitter {\n        address\n        createdAt\n        email\n        firstName\n        id\n        isMe\n        lastName\n        latitude\n        longitude\n        type\n      }\n    }\n    trackingNumber\n    type\n    volunteer {\n      address\n      createdAt\n      email\n      firstName\n      id\n      isMe\n      lastName\n      latitude\n      longitude\n      type\n    }\n  }\n}\n    `;\nexport type ToggleJobReceivedMutationFn = ApolloReactCommon.MutationFunction<ToggleJobReceivedMutation, ToggleJobReceivedMutationVariables>;\n\n/**\n * __useToggleJobReceivedMutation__\n *\n * To run a mutation, you first call `useToggleJobReceivedMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useToggleJobReceivedMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [toggleJobReceivedMutation, { data, loading, error }] = useToggleJobReceivedMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useToggleJobReceivedMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ToggleJobReceivedMutation, ToggleJobReceivedMutationVariables>) {\n        return ApolloReactHooks.useMutation<ToggleJobReceivedMutation, ToggleJobReceivedMutationVariables>(ToggleJobReceivedDocument, baseOptions);\n      }\nexport type ToggleJobReceivedMutationHookResult = ReturnType<typeof useToggleJobReceivedMutation>;\nexport type ToggleJobReceivedMutationResult = ApolloReactCommon.MutationResult<ToggleJobReceivedMutation>;\nexport type ToggleJobReceivedMutationOptions = ApolloReactCommon.BaseMutationOptions<ToggleJobReceivedMutation, ToggleJobReceivedMutationVariables>;\nexport const UpdateAccountDocument = gql`\n    mutation updateAccount($address: String, $firstName: String, $geolocation: GeolocationInput, $lastName: String, $password: PasswordUpdateInput) {\n  updateAccount(address: $address, firstName: $firstName, geolocation: $geolocation, lastName: $lastName, password: $password) {\n    address\n    createdAt\n    email\n    firstName\n    id\n    isMe\n    lastName\n    latitude\n    longitude\n    type\n  }\n}\n    `;\nexport type UpdateAccountMutationFn = ApolloReactCommon.MutationFunction<UpdateAccountMutation, UpdateAccountMutationVariables>;\n\n/**\n * __useUpdateAccountMutation__\n *\n * To run a mutation, you first call `useUpdateAccountMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateAccountMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateAccountMutation, { data, loading, error }] = useUpdateAccountMutation({\n *   variables: {\n *      address: // value for 'address'\n *      firstName: // value for 'firstName'\n *      geolocation: // value for 'geolocation'\n *      lastName: // value for 'lastName'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useUpdateAccountMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateAccountMutation, UpdateAccountMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateAccountMutation, UpdateAccountMutationVariables>(UpdateAccountDocument, baseOptions);\n      }\nexport type UpdateAccountMutationHookResult = ReturnType<typeof useUpdateAccountMutation>;\nexport type UpdateAccountMutationResult = ApolloReactCommon.MutationResult<UpdateAccountMutation>;\nexport type UpdateAccountMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateAccountMutation, UpdateAccountMutationVariables>;\nexport const UpdateJobProgressDocument = gql`\n    mutation updateJobProgress($id: ID!, $progress: JobProgress!, $trackingNumber: String) {\n  updateJobProgress(id: $id, progress: $progress, trackingNumber: $trackingNumber) {\n    createdAt\n    description\n    files {\n      id\n      presignedUrl\n    }\n    id\n    name\n    progress\n    quantity\n    submission {\n      address\n      createdAt\n      description\n      distance\n      files {\n        assemblyUrl\n        createdAt\n        id\n        laserCuttingFiles {\n          id\n          presignedUrl\n        }\n        modelFiles {\n          id\n          presignedUrl\n        }\n        preview {\n          id\n          presignedUrl\n        }\n      }\n      id\n      latitude\n      longitude\n      name\n      progress {\n        laserCutting\n        laserCuttingQuantity\n        model\n        modelQuantity\n        total\n      }\n      quantity\n      status\n      submitter {\n        address\n        createdAt\n        email\n        firstName\n        id\n        isMe\n        lastName\n        latitude\n        longitude\n        type\n      }\n    }\n    trackingNumber\n    type\n    volunteer {\n      address\n      createdAt\n      email\n      firstName\n      id\n      isMe\n      lastName\n      latitude\n      longitude\n      type\n    }\n  }\n}\n    `;\nexport type UpdateJobProgressMutationFn = ApolloReactCommon.MutationFunction<UpdateJobProgressMutation, UpdateJobProgressMutationVariables>;\n\n/**\n * __useUpdateJobProgressMutation__\n *\n * To run a mutation, you first call `useUpdateJobProgressMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateJobProgressMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateJobProgressMutation, { data, loading, error }] = useUpdateJobProgressMutation({\n *   variables: {\n *      id: // value for 'id'\n *      progress: // value for 'progress'\n *      trackingNumber: // value for 'trackingNumber'\n *   },\n * });\n */\nexport function useUpdateJobProgressMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateJobProgressMutation, UpdateJobProgressMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateJobProgressMutation, UpdateJobProgressMutationVariables>(UpdateJobProgressDocument, baseOptions);\n      }\nexport type UpdateJobProgressMutationHookResult = ReturnType<typeof useUpdateJobProgressMutation>;\nexport type UpdateJobProgressMutationResult = ApolloReactCommon.MutationResult<UpdateJobProgressMutation>;\nexport type UpdateJobProgressMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateJobProgressMutation, UpdateJobProgressMutationVariables>;\nexport const AcceptedJobsDocument = gql`\n    query acceptedJobs {\n  acceptedJobs {\n    createdAt\n    description\n    files {\n      id\n      presignedUrl\n    }\n    id\n    name\n    progress\n    quantity\n    submission {\n      address\n      createdAt\n      description\n      distance\n      files {\n        assemblyUrl\n        createdAt\n        id\n        laserCuttingFiles {\n          id\n          presignedUrl\n        }\n        modelFiles {\n          id\n          presignedUrl\n        }\n        preview {\n          id\n          presignedUrl\n        }\n      }\n      id\n      latitude\n      longitude\n      name\n      progress {\n        laserCutting\n        laserCuttingQuantity\n        model\n        modelQuantity\n        total\n      }\n      quantity\n      status\n      submitter {\n        address\n        createdAt\n        email\n        firstName\n        id\n        isMe\n        lastName\n        latitude\n        longitude\n        type\n      }\n    }\n    trackingNumber\n    type\n    volunteer {\n      address\n      createdAt\n      email\n      firstName\n      id\n      isMe\n      lastName\n      latitude\n      longitude\n      type\n    }\n  }\n}\n    `;\n\n/**\n * __useAcceptedJobsQuery__\n *\n * To run a query within a React component, call `useAcceptedJobsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAcceptedJobsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAcceptedJobsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAcceptedJobsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AcceptedJobsQuery, AcceptedJobsQueryVariables>) {\n        return ApolloReactHooks.useQuery<AcceptedJobsQuery, AcceptedJobsQueryVariables>(AcceptedJobsDocument, baseOptions);\n      }\nexport function useAcceptedJobsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AcceptedJobsQuery, AcceptedJobsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AcceptedJobsQuery, AcceptedJobsQueryVariables>(AcceptedJobsDocument, baseOptions);\n        }\nexport type AcceptedJobsQueryHookResult = ReturnType<typeof useAcceptedJobsQuery>;\nexport type AcceptedJobsLazyQueryHookResult = ReturnType<typeof useAcceptedJobsLazyQuery>;\nexport type AcceptedJobsQueryResult = ApolloReactCommon.QueryResult<AcceptedJobsQuery, AcceptedJobsQueryVariables>;\nexport const AvailableSubmissionsDocument = gql`\n    query availableSubmissions {\n  availableSubmissions {\n    address\n    createdAt\n    description\n    distance\n    files {\n      assemblyUrl\n      createdAt\n      id\n      laserCuttingFiles {\n        id\n        presignedUrl\n      }\n      modelFiles {\n        id\n        presignedUrl\n      }\n      preview {\n        id\n        presignedUrl\n      }\n    }\n    id\n    latitude\n    longitude\n    name\n    progress {\n      laserCutting\n      laserCuttingQuantity\n      model\n      modelQuantity\n      total\n    }\n    quantity\n    status\n    submitter {\n      address\n      createdAt\n      email\n      firstName\n      id\n      isMe\n      lastName\n      latitude\n      longitude\n      type\n    }\n  }\n}\n    `;\n\n/**\n * __useAvailableSubmissionsQuery__\n *\n * To run a query within a React component, call `useAvailableSubmissionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAvailableSubmissionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAvailableSubmissionsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAvailableSubmissionsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AvailableSubmissionsQuery, AvailableSubmissionsQueryVariables>) {\n        return ApolloReactHooks.useQuery<AvailableSubmissionsQuery, AvailableSubmissionsQueryVariables>(AvailableSubmissionsDocument, baseOptions);\n      }\nexport function useAvailableSubmissionsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AvailableSubmissionsQuery, AvailableSubmissionsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AvailableSubmissionsQuery, AvailableSubmissionsQueryVariables>(AvailableSubmissionsDocument, baseOptions);\n        }\nexport type AvailableSubmissionsQueryHookResult = ReturnType<typeof useAvailableSubmissionsQuery>;\nexport type AvailableSubmissionsLazyQueryHookResult = ReturnType<typeof useAvailableSubmissionsLazyQuery>;\nexport type AvailableSubmissionsQueryResult = ApolloReactCommon.QueryResult<AvailableSubmissionsQuery, AvailableSubmissionsQueryVariables>;\nexport const JobDocument = gql`\n    query job($id: ID!) {\n  job(id: $id) {\n    createdAt\n    description\n    files {\n      id\n      presignedUrl\n    }\n    id\n    name\n    progress\n    quantity\n    submission {\n      address\n      createdAt\n      description\n      distance\n      files {\n        assemblyUrl\n        createdAt\n        id\n        laserCuttingFiles {\n          id\n          presignedUrl\n        }\n        modelFiles {\n          id\n          presignedUrl\n        }\n        preview {\n          id\n          presignedUrl\n        }\n      }\n      id\n      latitude\n      longitude\n      name\n      progress {\n        laserCutting\n        laserCuttingQuantity\n        model\n        modelQuantity\n        total\n      }\n      quantity\n      status\n      submitter {\n        address\n        createdAt\n        email\n        firstName\n        id\n        isMe\n        lastName\n        latitude\n        longitude\n        type\n      }\n    }\n    trackingNumber\n    type\n    volunteer {\n      address\n      createdAt\n      email\n      firstName\n      id\n      isMe\n      lastName\n      latitude\n      longitude\n      type\n    }\n  }\n}\n    `;\n\n/**\n * __useJobQuery__\n *\n * To run a query within a React component, call `useJobQuery` and pass it any options that fit your needs.\n * When your component renders, `useJobQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useJobQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useJobQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<JobQuery, JobQueryVariables>) {\n        return ApolloReactHooks.useQuery<JobQuery, JobQueryVariables>(JobDocument, baseOptions);\n      }\nexport function useJobLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<JobQuery, JobQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<JobQuery, JobQueryVariables>(JobDocument, baseOptions);\n        }\nexport type JobQueryHookResult = ReturnType<typeof useJobQuery>;\nexport type JobLazyQueryHookResult = ReturnType<typeof useJobLazyQuery>;\nexport type JobQueryResult = ApolloReactCommon.QueryResult<JobQuery, JobQueryVariables>;\nexport const MeDocument = gql`\n    query me {\n  me {\n    id\n    user {\n      address\n      createdAt\n      email\n      firstName\n      id\n      isMe\n      lastName\n      latitude\n      longitude\n      type\n    }\n  }\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return ApolloReactHooks.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = ApolloReactCommon.QueryResult<MeQuery, MeQueryVariables>;\nexport const MedicalItemsDocument = gql`\n    query medicalItems {\n  medicalItems {\n    createdAt\n    description\n    files {\n      assemblyUrl\n      createdAt\n      id\n      laserCuttingFiles {\n        id\n        presignedUrl\n      }\n      modelFiles {\n        id\n        presignedUrl\n      }\n      preview {\n        id\n        presignedUrl\n      }\n    }\n    id\n    name\n  }\n}\n    `;\n\n/**\n * __useMedicalItemsQuery__\n *\n * To run a query within a React component, call `useMedicalItemsQuery` and pass it any options that fit your needs.\n * When your component renders, `useMedicalItemsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMedicalItemsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMedicalItemsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MedicalItemsQuery, MedicalItemsQueryVariables>) {\n        return ApolloReactHooks.useQuery<MedicalItemsQuery, MedicalItemsQueryVariables>(MedicalItemsDocument, baseOptions);\n      }\nexport function useMedicalItemsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MedicalItemsQuery, MedicalItemsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MedicalItemsQuery, MedicalItemsQueryVariables>(MedicalItemsDocument, baseOptions);\n        }\nexport type MedicalItemsQueryHookResult = ReturnType<typeof useMedicalItemsQuery>;\nexport type MedicalItemsLazyQueryHookResult = ReturnType<typeof useMedicalItemsLazyQuery>;\nexport type MedicalItemsQueryResult = ApolloReactCommon.QueryResult<MedicalItemsQuery, MedicalItemsQueryVariables>;\nexport const SubmissionDocument = gql`\n    query submission($id: ID!) {\n  submission(id: $id) {\n    address\n    createdAt\n    description\n    distance\n    files {\n      assemblyUrl\n      createdAt\n      id\n      laserCuttingFiles {\n        id\n        presignedUrl\n      }\n      modelFiles {\n        id\n        presignedUrl\n      }\n      preview {\n        id\n        presignedUrl\n      }\n    }\n    id\n    latitude\n    longitude\n    name\n    progress {\n      laserCutting\n      laserCuttingQuantity\n      model\n      modelQuantity\n      total\n    }\n    quantity\n    status\n    submitter {\n      address\n      createdAt\n      email\n      firstName\n      id\n      isMe\n      lastName\n      latitude\n      longitude\n      type\n    }\n  }\n}\n    `;\n\n/**\n * __useSubmissionQuery__\n *\n * To run a query within a React component, call `useSubmissionQuery` and pass it any options that fit your needs.\n * When your component renders, `useSubmissionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSubmissionQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useSubmissionQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SubmissionQuery, SubmissionQueryVariables>) {\n        return ApolloReactHooks.useQuery<SubmissionQuery, SubmissionQueryVariables>(SubmissionDocument, baseOptions);\n      }\nexport function useSubmissionLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SubmissionQuery, SubmissionQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<SubmissionQuery, SubmissionQueryVariables>(SubmissionDocument, baseOptions);\n        }\nexport type SubmissionQueryHookResult = ReturnType<typeof useSubmissionQuery>;\nexport type SubmissionLazyQueryHookResult = ReturnType<typeof useSubmissionLazyQuery>;\nexport type SubmissionQueryResult = ApolloReactCommon.QueryResult<SubmissionQuery, SubmissionQueryVariables>;\nexport const SubmissionJobsDocument = gql`\n    query submissionJobs($id: ID!) {\n  submissionJobs(id: $id) {\n    createdAt\n    description\n    files {\n      id\n      presignedUrl\n    }\n    id\n    name\n    progress\n    quantity\n    submission {\n      address\n      createdAt\n      description\n      distance\n      files {\n        assemblyUrl\n        createdAt\n        id\n        laserCuttingFiles {\n          id\n          presignedUrl\n        }\n        modelFiles {\n          id\n          presignedUrl\n        }\n        preview {\n          id\n          presignedUrl\n        }\n      }\n      id\n      latitude\n      longitude\n      name\n      progress {\n        laserCutting\n        laserCuttingQuantity\n        model\n        modelQuantity\n        total\n      }\n      quantity\n      status\n      submitter {\n        address\n        createdAt\n        email\n        firstName\n        id\n        isMe\n        lastName\n        latitude\n        longitude\n        type\n      }\n    }\n    trackingNumber\n    type\n    volunteer {\n      address\n      createdAt\n      email\n      firstName\n      id\n      isMe\n      lastName\n      latitude\n      longitude\n      type\n    }\n  }\n}\n    `;\n\n/**\n * __useSubmissionJobsQuery__\n *\n * To run a query within a React component, call `useSubmissionJobsQuery` and pass it any options that fit your needs.\n * When your component renders, `useSubmissionJobsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSubmissionJobsQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useSubmissionJobsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SubmissionJobsQuery, SubmissionJobsQueryVariables>) {\n        return ApolloReactHooks.useQuery<SubmissionJobsQuery, SubmissionJobsQueryVariables>(SubmissionJobsDocument, baseOptions);\n      }\nexport function useSubmissionJobsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SubmissionJobsQuery, SubmissionJobsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<SubmissionJobsQuery, SubmissionJobsQueryVariables>(SubmissionJobsDocument, baseOptions);\n        }\nexport type SubmissionJobsQueryHookResult = ReturnType<typeof useSubmissionJobsQuery>;\nexport type SubmissionJobsLazyQueryHookResult = ReturnType<typeof useSubmissionJobsLazyQuery>;\nexport type SubmissionJobsQueryResult = ApolloReactCommon.QueryResult<SubmissionJobsQuery, SubmissionJobsQueryVariables>;\nexport const SubmittedSubmissionsDocument = gql`\n    query submittedSubmissions {\n  submittedSubmissions {\n    address\n    createdAt\n    description\n    distance\n    files {\n      assemblyUrl\n      createdAt\n      id\n      laserCuttingFiles {\n        id\n        presignedUrl\n      }\n      modelFiles {\n        id\n        presignedUrl\n      }\n      preview {\n        id\n        presignedUrl\n      }\n    }\n    id\n    latitude\n    longitude\n    name\n    progress {\n      laserCutting\n      laserCuttingQuantity\n      model\n      modelQuantity\n      total\n    }\n    quantity\n    status\n    submitter {\n      address\n      createdAt\n      email\n      firstName\n      id\n      isMe\n      lastName\n      latitude\n      longitude\n      type\n    }\n  }\n}\n    `;\n\n/**\n * __useSubmittedSubmissionsQuery__\n *\n * To run a query within a React component, call `useSubmittedSubmissionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useSubmittedSubmissionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSubmittedSubmissionsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useSubmittedSubmissionsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SubmittedSubmissionsQuery, SubmittedSubmissionsQueryVariables>) {\n        return ApolloReactHooks.useQuery<SubmittedSubmissionsQuery, SubmittedSubmissionsQueryVariables>(SubmittedSubmissionsDocument, baseOptions);\n      }\nexport function useSubmittedSubmissionsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SubmittedSubmissionsQuery, SubmittedSubmissionsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<SubmittedSubmissionsQuery, SubmittedSubmissionsQueryVariables>(SubmittedSubmissionsDocument, baseOptions);\n        }\nexport type SubmittedSubmissionsQueryHookResult = ReturnType<typeof useSubmittedSubmissionsQuery>;\nexport type SubmittedSubmissionsLazyQueryHookResult = ReturnType<typeof useSubmittedSubmissionsLazyQuery>;\nexport type SubmittedSubmissionsQueryResult = ApolloReactCommon.QueryResult<SubmittedSubmissionsQuery, SubmittedSubmissionsQueryVariables>;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst throwErr = (err, defaultMessage) => {\n    if (err === undefined || typeof err === \"string\") {\n        throw new Error(err !== null && err !== void 0 ? err : defaultMessage);\n    }\n    else if (typeof err === \"function\") {\n        throw new err();\n    }\n    else {\n        throw err;\n    }\n};\nfunction assert(condition, err) {\n    if (!condition) {\n        throwErr(err, \"Assertion failed\");\n    }\n}\nexports.assert = assert;\nfunction assertDefined(value, err) {\n    if (value === null || value === undefined) {\n        throwErr(err, \"Assertion failed\");\n    }\n    return value;\n}\nexports.assertDefined = assertDefined;\nfunction unreachable(err) {\n    return throwErr(err, \"Unreachable code detected!\");\n}\nexports.unreachable = unreachable;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXJ0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2Fzc2VydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLE1BQU0sUUFBUSxHQUFHLENBQ2IsR0FBMkIsRUFDM0IsY0FBc0IsRUFDakIsRUFBRTtJQUNQLElBQUksR0FBRyxLQUFLLFNBQVMsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7UUFDOUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLGFBQUgsR0FBRyxjQUFILEdBQUcsR0FBSSxjQUFjLENBQUMsQ0FBQTtLQUN6QztTQUFNLElBQUksT0FBTyxHQUFHLEtBQUssVUFBVSxFQUFFO1FBQ2xDLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQTtLQUNsQjtTQUFNO1FBQ0gsTUFBTSxHQUFHLENBQUE7S0FDWjtBQUNMLENBQUMsQ0FBQTtBQUVELFNBQWdCLE1BQU0sQ0FBQyxTQUFrQixFQUFFLEdBQWU7SUFDdEQsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUNaLFFBQVEsQ0FBQyxHQUFHLEVBQUUsa0JBQWtCLENBQUMsQ0FBQTtLQUNwQztBQUNMLENBQUM7QUFKRCx3QkFJQztBQUVELFNBQWdCLGFBQWEsQ0FBSSxLQUFRLEVBQUUsR0FBZTtJQUN0RCxJQUFJLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtRQUN2QyxRQUFRLENBQUMsR0FBRyxFQUFFLGtCQUFrQixDQUFDLENBQUE7S0FDcEM7SUFDRCxPQUFPLEtBQXVCLENBQUE7QUFDbEMsQ0FBQztBQUxELHNDQUtDO0FBRUQsU0FBZ0IsV0FBVyxDQUFDLEdBQWU7SUFDdkMsT0FBTyxRQUFRLENBQUMsR0FBRyxFQUFFLDRCQUE0QixDQUFDLENBQUE7QUFDdEQsQ0FBQztBQUZELGtDQUVDIn0=","\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst is_uuid_1 = require(\"is-uuid\");\nconst yup = __importStar(require(\"yup\"));\nexports.address = yup.string();\nexports.geolocation = yup.object({\n    latitude: yup.number().required(),\n    longitude: yup.number().required(),\n});\nexports.jobProgress = yup\n    .mixed()\n    .oneOf([\"Assigned\", \"PrintStarted\", \"PrintComplete\", \"Shipped\", \"Received\"]);\nexports.id = yup.string().test(\"uuid\", ({ value }) => `Invalid UUID: ${value}`, (value) => value === undefined || is_uuid_1.anyNonNil(value));\nexports.email = yup\n    .string()\n    .email()\n    .transform((value) => value.toLowerCase());\nexports.password = yup.string();\nexports.registrationToken = yup.string();\nexports.trackingNumber = yup.string();\nexports.userType = yup\n    .mixed()\n    .oneOf([\"Submitter\", \"Volunteer\"]);\nexports.file = yup.mixed();\nexports.forgotPasswordToken = yup.string();\nexports.refreshToken = yup.string();\nexports.jobType = yup\n    .mixed()\n    .oneOf([\"LaserCutting\", \"Printing\"]);\nexports.passwordUpdate = yup.object({\n    newPassword: exports.password.required(),\n    oldPassword: exports.password.required(),\n});\nexports.upload = yup.mixed().nullable();\nexports.files = yup.object({\n    assembly: exports.upload,\n    laserCutting: yup.array(exports.upload).ensure(),\n    model: yup.array(exports.upload).ensure(),\n    preview: exports.upload,\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3ZhbGlkYXRpb24vY29tbW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHFDQUEyQztBQUMzQyx5Q0FBMEI7QUFPYixRQUFBLE9BQU8sR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUE7QUFFdEIsUUFBQSxXQUFXLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBbUI7SUFDcEQsUUFBUSxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDakMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7Q0FDckMsQ0FBQyxDQUFBO0FBRVcsUUFBQSxXQUFXLEdBQUcsR0FBRztLQUN6QixLQUFLLEVBRUg7S0FDRixLQUFLLENBQUMsQ0FBQyxVQUFVLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQTtBQUVuRSxRQUFBLEVBQUUsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUMvQixNQUFNLEVBQ04sQ0FBQyxFQUFDLEtBQUssRUFBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsS0FBSyxFQUFFLEVBQ3JDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLEtBQUssU0FBUyxJQUFJLG1CQUFNLENBQUMsS0FBSyxDQUFDLENBQ2xELENBQUE7QUFDWSxRQUFBLEtBQUssR0FBRyxHQUFHO0tBQ25CLE1BQU0sRUFBRTtLQUNSLEtBQUssRUFBRTtLQUNQLFNBQVMsQ0FBQyxDQUFDLEtBQWEsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUE7QUFDekMsUUFBQSxRQUFRLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFBO0FBQ3ZCLFFBQUEsaUJBQWlCLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFBO0FBQ2hDLFFBQUEsY0FBYyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtBQUM3QixRQUFBLFFBQVEsR0FBRyxHQUFHO0tBQ3RCLEtBQUssRUFBNkI7S0FDbEMsS0FBSyxDQUFDLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUE7QUFDekIsUUFBQSxJQUFJLEdBQUcsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFBO0FBQ2xCLFFBQUEsbUJBQW1CLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFBO0FBQ2xDLFFBQUEsWUFBWSxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtBQUMzQixRQUFBLE9BQU8sR0FBRyxHQUFHO0tBQ3JCLEtBQUssRUFBK0I7S0FDcEMsS0FBSyxDQUFDLENBQUMsY0FBYyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUE7QUFFM0IsUUFBQSxjQUFjLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBc0I7SUFDMUQsV0FBVyxFQUFFLGdCQUFRLENBQUMsUUFBUSxFQUFFO0lBQ2hDLFdBQVcsRUFBRSxnQkFBUSxDQUFDLFFBQVEsRUFBRTtDQUNuQyxDQUFDLENBQUE7QUFFVyxRQUFBLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUE7QUFDL0IsUUFBQSxLQUFLLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBdUI7SUFDbEQsUUFBUSxFQUFFLGNBQU07SUFDaEIsWUFBWSxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsY0FBTSxDQUFDLENBQUMsTUFBTSxFQUFFO0lBQ3hDLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLGNBQU0sQ0FBQyxDQUFDLE1BQU0sRUFBRTtJQUNqQyxPQUFPLEVBQUUsY0FBTTtDQUNsQixDQUFDLENBQUEifQ==","/* eslint-disable */\n\n\n      export interface IntrospectionResultData {\n        __schema: {\n          types: {\n            kind: string;\n            name: string;\n            possibleTypes: {\n              name: string;\n            }[];\n          }[];\n        };\n      }\n      const result: IntrospectionResultData = {\n  \"__schema\": {\n    \"types\": []\n  }\n};\n      export default result;\n    ","import {Logging} from \"@nimashoghi/logging\"\nimport React, {useEffect, useState} from \"react\"\nimport {dxfToImageBuffer} from \"../services/thumbnail\"\nimport {contentFromFile} from \"../services/utils\"\n\nconst logger = Logging.logger({__filename})\n\nexport interface DXFViewerProps {\n    height: number\n    source:\n        | {type: \"url\"; url: string}\n        | {data: string; type: \"data\"}\n        | {file: File; type: \"file\"}\n    strokeColor?: string\n    strokeWidth?: string\n    width: number\n}\nexport const DXFViewer: React.FC<DXFViewerProps> = ({\n    height,\n    source,\n    strokeColor,\n    strokeWidth,\n    width,\n}) => {\n    const [base64, changeSBase64] = useState<string>()\n\n    useEffect(() => {\n        const updateSvg = (dxf: string) => {\n            try {\n                // eslint-disable-next-line no-control-regex\n                const isAscii = /^[\\x00-\\x7F]*$/.test(dxf)\n                if (isAscii) {\n                    const buff = dxfToImageBuffer({\n                        dxf,\n                        strokeColor,\n                        strokeWidth,\n                    })\n                    const base64data = buff.toString(\"base64\")\n                    changeSBase64(base64data)\n                }\n            } catch (error) {\n                logger.debug`Got error ${error}... Ignoring`\n            }\n        }\n\n        const getDXFData = async () => {\n            if (source.type === \"data\") {\n                updateSvg(source.data)\n            } else if (source.type === \"file\") {\n                contentFromFile({\n                    file: source.file,\n                    onLoad: (content) => {\n                        updateSvg(content)\n                    },\n                })\n            } else {\n                logger.debug`${source.url}`\n                const response = await fetch(source.url)\n                const dxf = await response.text()\n                updateSvg(dxf)\n            }\n        }\n        getDXFData()\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return (\n        <div style={{height, width}}>\n            {base64 ? (\n                <div style={{padding: width * 0.08}}>\n                    <img src={`data:image/svg+xml;base64,${base64}`} alt=\"\" />\n                </div>\n            ) : null}\n        </div>\n    )\n}\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./assert\"));\n__export(require(\"./memoize\"));\n__export(require(\"./setting\"));\n__export(require(\"./singleton\"));\n__export(require(\"./validation\"));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw4QkFBd0I7QUFDeEIsK0JBQXlCO0FBQ3pCLCtCQUF5QjtBQUN6QixpQ0FBMkI7QUFDM0Isa0NBQTRCIn0=","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexports.memoize = (f, stringify) => {\n    const cache = {};\n    return (...args) => {\n        const key = stringify(...args);\n        if (key in cache) {\n            return cache[key];\n        }\n        const value = f(...args);\n        cache[key] = value;\n        return value;\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVtb2l6ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tZW1vaXplLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsOERBQThEO0FBQ2pELFFBQUEsT0FBTyxHQUFHLENBQ25CLENBQXVCLEVBQ3ZCLFNBQW9DLEVBQ3RDLEVBQUU7SUFDQSxNQUFNLEtBQUssR0FBc0IsRUFBRSxDQUFBO0lBQ25DLE9BQU8sQ0FBQyxHQUFHLElBQVUsRUFBRSxFQUFFO1FBQ3JCLE1BQU0sR0FBRyxHQUFHLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFBO1FBQzlCLElBQUksR0FBRyxJQUFJLEtBQUssRUFBRTtZQUNkLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1NBQ3BCO1FBQ0QsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUE7UUFDeEIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQTtRQUNsQixPQUFPLEtBQUssQ0FBQTtJQUNoQixDQUFDLENBQUE7QUFDTCxDQUFDLENBQUEifQ==","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nif (typeof globalThis.window === \"undefined\") {\n    require(\"dotenv\").config({\n        path: require(\"path\").join(__dirname, \"../../../.env\"),\n    });\n}\nconst assert_1 = require(\"./assert\");\nexports.setting = (name, transformer, defaultValue) => {\n    const value = process.env[name];\n    if (value === undefined) {\n        assert_1.assert(defaultValue, `Environment variable \"${name}\" doesn't exist and default value is not set!`);\n        return defaultValue;\n    }\n    return transformer(value);\n};\nexports.setting.boolean = (name, defaultValue) => exports.setting(name, (value) => {\n    if ([\"1\", \"true\", \"TRUE\", \"True\"].includes(value)) {\n        return true;\n    }\n    if ([\"0\", \"false\", \"FALSE\", \"False\"].includes(value)) {\n        return false;\n    }\n    throw new Error(`Environment variable \"${name}\" must be a boolean!`);\n}, defaultValue);\nexports.setting.int = (name, defaultValue) => exports.setting(name, (value) => parseInt(value), defaultValue);\nexports.setting.number = (name, defaultValue) => exports.setting(name, (value) => parseFloat(value), defaultValue);\nexports.setting.string = (name, defaultValue) => exports.setting(name, (value) => value, defaultValue);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zZXR0aW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSSxPQUFRLFVBQWtCLENBQUMsTUFBTSxLQUFLLFdBQVcsRUFBRTtJQUNuRCxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQ3JCLElBQUksRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxlQUFlLENBQUM7S0FDekQsQ0FBQyxDQUFBO0NBQ0w7QUFFRCxxQ0FBK0I7QUFFbEIsUUFBQSxPQUFPLEdBQUcsQ0FDbkIsSUFBWSxFQUNaLFdBQWlDLEVBQ2pDLFlBQWdCLEVBQ2YsRUFBRTtJQUNILE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDL0IsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO1FBQ3JCLGVBQU0sQ0FDRixZQUFZLEVBQ1oseUJBQXlCLElBQUksK0NBQStDLENBQy9FLENBQUE7UUFDRCxPQUFPLFlBQVksQ0FBQTtLQUN0QjtJQUNELE9BQU8sV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQzdCLENBQUMsQ0FBQTtBQUVELGVBQU8sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFZLEVBQUUsWUFBc0IsRUFBRSxFQUFFLENBQ3ZELGVBQU8sQ0FDSCxJQUFJLEVBQ0osQ0FBQyxLQUFLLEVBQUUsRUFBRTtJQUNOLElBQUksQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDL0MsT0FBTyxJQUFJLENBQUE7S0FDZDtJQUVELElBQUksQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDbEQsT0FBTyxLQUFLLENBQUE7S0FDZjtJQUVELE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLElBQUksc0JBQXNCLENBQUMsQ0FBQTtBQUN4RSxDQUFDLEVBQ0QsWUFBWSxDQUNmLENBQUE7QUFFTCxlQUFPLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBWSxFQUFFLFlBQXFCLEVBQUUsRUFBRSxDQUNsRCxlQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUE7QUFFM0QsZUFBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQVksRUFBRSxZQUFxQixFQUFFLEVBQUUsQ0FDckQsZUFBTyxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFBO0FBRTdELGVBQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFZLEVBQUUsWUFBcUIsRUFBRSxFQUFFLENBQ3JELGVBQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQSJ9","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.singleton = (factory) => {\n    let instance;\n    return () => {\n        if (instance === undefined) {\n            instance = factory();\n        }\n        return instance;\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xldG9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NpbmdsZXRvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFhLFFBQUEsU0FBUyxHQUFHLENBQUksT0FBZ0IsRUFBRSxFQUFFO0lBQzdDLElBQUksUUFBdUIsQ0FBQTtJQUUzQixPQUFPLEdBQUcsRUFBRTtRQUNSLElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtZQUN4QixRQUFRLEdBQUcsT0FBTyxFQUFFLENBQUE7U0FDdkI7UUFDRCxPQUFPLFFBQVEsQ0FBQTtJQUNuQixDQUFDLENBQUE7QUFDTCxDQUFDLENBQUEifQ==","\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Mutation = __importStar(require(\"./mutation\"));\nconst Query = __importStar(require(\"./query\"));\nexports.validation = { Mutation, Query };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdmFsaWRhdGlvbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxxREFBc0M7QUFDdEMsK0NBQWdDO0FBRW5CLFFBQUEsVUFBVSxHQUFHLEVBQUMsUUFBUSxFQUFFLEtBQUssRUFBQyxDQUFBIn0=","\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst yup = __importStar(require(\"yup\"));\nconst common_1 = require(\"./common\");\nexports.cancelJob = yup.object({ id: common_1.id.required() });\nexports.cancelSubmission = yup.object({\n    id: common_1.id.required(),\n});\nexports.createNewJobFromSubmission = yup.object({\n    id: common_1.id.required(),\n    quantity: yup.number().min(1),\n    type: common_1.jobType.required(),\n});\nexports.createSubmission = yup\n    .object({\n    address: common_1.address,\n    description: yup.string(),\n    files: common_1.files.nullable().default(null),\n    geolocation: common_1.geolocation.nullable().default(null),\n    marketplaceId: common_1.id,\n    name: yup.string().required(),\n    quantity: yup.number().min(1),\n})\n    .test(\"valid file input\", `You must either provide input files or a medical item ID!`, (value) => !!(value.files || value.marketplaceId));\nexports.register = yup.object({\n    address: common_1.address.required(),\n    email: common_1.email.required(),\n    firstName: yup.string().required(),\n    geolocation: common_1.geolocation.required(),\n    lastName: yup.string().required(),\n    password: common_1.password.required(),\n    registrationToken: common_1.registrationToken.required(),\n    type: common_1.userType.required(),\n});\nexports.login = yup.object({\n    email: common_1.email.required(),\n    password: common_1.password.required(),\n});\nexports.updateAccount = yup.object({\n    address: common_1.address,\n    firstName: yup.string(),\n    geolocation: common_1.geolocation.nullable().default(null),\n    lastName: yup.string(),\n    password: common_1.passwordUpdate.nullable().default(null),\n});\nexports.updateJobProgress = yup\n    .object({\n    id: common_1.id.required(),\n    progress: common_1.jobProgress.required(),\n    trackingNumber: common_1.trackingNumber,\n})\n    .test(\"valid tracking number\", `You must provide a valid tracking number when the progress is Shipped!`, (value) => (value === null || value === void 0 ? void 0 : value.progress) !== \"Shipped\" ||\n    (value === null || value === void 0 ? void 0 : value.trackingNumber) !== undefined);\nexports.forgotPassword = yup.object({\n    email: common_1.email.required(),\n});\nexports.submitForgotPassword = yup.object({\n    email: common_1.email.required(),\n    password: common_1.password.required(),\n    token: common_1.forgotPasswordToken.required(),\n});\nexports.loginRefreshToken = yup.object({\n    refreshToken: common_1.refreshToken.required(),\n    userId: common_1.id.required(),\n});\nexports.sendInvitation = yup.object({\n    email: common_1.email.required(),\n    type: common_1.userType.required(),\n});\nexports.toggleJobReceived = yup.object({\n    id: common_1.id.required(),\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXV0YXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdmFsaWRhdGlvbi9tdXRhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSx5Q0FBMEI7QUFnQjFCLHFDQWVpQjtBQUVKLFFBQUEsU0FBUyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQXdCLEVBQUMsRUFBRSxFQUFFLFdBQUUsQ0FBQyxRQUFRLEVBQUUsRUFBQyxDQUFDLENBQUE7QUFDbEUsUUFBQSxnQkFBZ0IsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUErQjtJQUNyRSxFQUFFLEVBQUUsV0FBRSxDQUFDLFFBQVEsRUFBRTtDQUNwQixDQUFDLENBQUE7QUFDVyxRQUFBLDBCQUEwQixHQUFHLEdBQUcsQ0FBQyxNQUFNLENBRWxEO0lBQ0UsRUFBRSxFQUFFLFdBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDakIsUUFBUSxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzdCLElBQUksRUFBRSxnQkFBTyxDQUFDLFFBQVEsRUFBRTtDQUMzQixDQUFDLENBQUE7QUFDVyxRQUFBLGdCQUFnQixHQUFHLEdBQUc7S0FDOUIsTUFBTSxDQUErQjtJQUNsQyxPQUFPLEVBQVAsZ0JBQU87SUFDUCxXQUFXLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRTtJQUN6QixLQUFLLEVBQUUsY0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFDckMsV0FBVyxFQUFFLG9CQUFXLENBQUMsUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztJQUNqRCxhQUFhLEVBQUUsV0FBRTtJQUNqQixJQUFJLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtJQUM3QixRQUFRLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Q0FDaEMsQ0FB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","\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst yup = __importStar(require(\"yup\"));\nconst common_1 = require(\"./common\");\nexports.acceptedJobs = yup.object({});\nexports.availableJobs = yup.object({});\nexports.job = yup.object({ id: common_1.id.required() });\nexports.me = yup.object({});\nexports.medicalItems = yup.object({});\nexports.submission = yup.object({ id: common_1.id.required() });\nexports.submissionJobs = yup.object({\n    id: common_1.id.required(),\n});\nexports.submittedSubmissions = yup.object({});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdmFsaWRhdGlvbi9xdWVyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSx5Q0FBMEI7QUFNMUIscUNBQTJCO0FBRWQsUUFBQSxZQUFZLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBSyxFQUFFLENBQUMsQ0FBQTtBQUNqQyxRQUFBLGFBQWEsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFLLEVBQUUsQ0FBQyxDQUFBO0FBQ2xDLFFBQUEsR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQWUsRUFBQyxFQUFFLEVBQUUsV0FBRSxDQUFDLFFBQVEsRUFBRSxFQUFDLENBQUMsQ0FBQTtBQUNuRCxRQUFBLEVBQUUsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFLLEVBQUUsQ0FBQyxDQUFBO0FBQ3ZCLFFBQUEsWUFBWSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUssRUFBRSxDQUFDLENBQUE7QUFDakMsUUFBQSxVQUFVLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBc0IsRUFBQyxFQUFFLEVBQUUsV0FBRSxDQUFDLFFBQVEsRUFBRSxFQUFDLENBQUMsQ0FBQTtBQUNqRSxRQUFBLGNBQWMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUEwQjtJQUM5RCxFQUFFLEVBQUUsV0FBRSxDQUFDLFFBQVEsRUFBRTtDQUNwQixDQUFDLENBQUE7QUFDVyxRQUFBLG9CQUFvQixHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUssRUFBRSxDQUFDLENBQUEifQ==","export interface LocationSearch {\n    features: LocationFeature[]\n    licence: string\n    type: string\n}\n\nexport interface LocationFeature {\n    bbox?: number[]\n    geometry?: Geometry\n    properties: Properties\n    type?: FeatureType\n}\n\nexport interface Geometry {\n    coordinates: number[]\n    type: GeometryType\n}\n\nexport enum GeometryType {\n    Point = \"Point\",\n}\n\nexport interface Properties {\n    category?: Category\n    display_name: string\n    icon?: string\n    importance?: number\n    osm_id?: number\n    osm_type?: OsmType\n    place_id?: number\n    place_rank?: number\n    type?: string\n}\n\nexport enum Category {\n    Boundary = \"boundary\",\n    Place = \"place\",\n    Railway = \"railway\",\n}\n\nexport enum OsmType {\n    Node = \"node\",\n    Relation = \"relation\",\n    Way = \"way\",\n}\n\nexport enum FeatureType {\n    Feature = \"Feature\",\n}\n\nexport const searchLocations = async (\n    query: string,\n): Promise<LocationSearch> => {\n    const response = await fetch(\n        `https://nominatim.openstreetmap.org/search?q=${encodeURI(\n            query,\n        )}&format=geojson`,\n    )\n    return response.json()\n}\n","import {Snackbar} from \"@material-ui/core\"\nimport MuiAlert from \"@material-ui/lab/Alert\"\nimport React from \"react\"\nimport {NotifyMessage} from \"../client\"\n\nexport interface SnackBarComponentProps {\n    state: [\n        NotifyMessage | undefined,\n        React.Dispatch<React.SetStateAction<NotifyMessage | undefined>>,\n    ]\n}\nexport const SnackBarComponent: React.FC<SnackBarComponentProps> = ({\n    state: [snack, updateSnack],\n}) => {\n    return (\n        <Snackbar\n            open={!!snack}\n            autoHideDuration={6000}\n            onClose={(event) => {\n                if (!event) {\n                    updateSnack(undefined)\n                }\n            }}>\n            <MuiAlert\n                elevation={6}\n                variant=\"filled\"\n                severity={snack?.severity || \"error\"}>\n                {snack ? snack.message.replace(\"GraphQL error:\", \"\") : \"\"}\n            </MuiAlert>\n        </Snackbar>\n    )\n}\n","import React, {useContext} from \"react\"\nimport {NotifyMessage} from \"../client\"\n\ninterface Snack {\n    updateSnack: (snack: NotifyMessage | undefined) => void\n}\nexport const SnackContext = React.createContext<Snack>({updateSnack: () => {}})\nexport const useSnack = () => useContext(SnackContext)\n","import {useLocation} from \"react-router-dom\"\n\nexport const useQuery = () => {\n    return new URLSearchParams(useLocation().search)\n}\n","import {Typography} from \"@material-ui/core\"\nimport BackupIcon from \"@material-ui/icons/Backup\"\nimport React, {useCallback, useMemo} from \"react\"\nimport Dropzone, {IFileWithMeta, StatusValue} from \"react-dropzone-uploader\"\nimport \"react-dropzone-uploader/dist/styles.css\"\nimport {useSnack} from \"../../hooks\"\nimport {theme} from \"../theme\"\nimport \"./extra.css\"\nimport {FileUploadFormItem} from \"./form\"\n\nconst MAX_SIZE = 30 ** 20\n\nexport type FormFileUploadItemProps = FileUploadFormItem & {\n    handleChange: (id: string, value: File[] | File | undefined) => void\n}\nexport const FormFileUploadItem: React.FC<FormFileUploadItemProps> = ({\n    PreviewComponent,\n    accept,\n    handleChange,\n    icon,\n    id,\n    label,\n    multiple = true,\n    defaultValue = [],\n}) => {\n    const {updateSnack} = useSnack()\n\n    const handleChangeStatus = useCallback(\n        (_: IFileWithMeta, status: StatusValue) => {\n            if (status.includes(\"rejected\")) {\n                updateSnack({message: status})\n            }\n        },\n        [updateSnack],\n    )\n\n    const fileUploadComponent = useMemo(() => {\n        return (\n            <Dropzone\n                PreviewComponent={\n                    PreviewComponent &&\n                    ((props) => (\n                        // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n                        // @ts-ignore\n                        <PreviewComponent\n                            {...props}\n                            id={id}\n                            handleChange={(\n                                value: File[] | File | undefined,\n                            ) => {\n                                handleChange(id, value)\n                            }}\n                        />\n                    ))\n                }\n                SubmitButtonComponent={null as never}\n                maxSizeBytes={MAX_SIZE}\n                initialFiles={\n                    Array.isArray(defaultValue) ? defaultValue : [defaultValue]\n                }\n                onChangeStatus={handleChangeStatus}\n                accept={accept}\n                autoUpload\n                maxFiles={multiple ? 10 : 1}\n                multiple={multiple}\n                inputContent={(_, extra) => {\n                    return extra.reject ? (\n                        \"File type not supported\"\n                    ) : (\n                        <div\n                            key=\"upload-btn\"\n                            style={{display: \"flex\", flexDirection: \"row\"}}>\n                            {icon || <BackupIcon />}\n                            <Typography\n                                style={{marginLeft: 10}}\n                                variant=\"body1\">\n                                {label.toUpperCase()}\n                            </Typography>\n                        </div>\n                    )\n                }}\n                styles={{\n                    dropzone: {\n                        borderColor: theme.palette.primary.main,\n                        padding: 10,\n                    },\n\n                    dropzoneActive: {\n                        backgroundColor: \"rgba(46,73,168,0.1)\",\n                    },\n                    dropzoneReject: {\n                        backgroundColor: \"#DAA\",\n                        borderColor: \"red\",\n                    },\n                    inputLabel: (_, extra) =>\n                        extra.reject\n                            ? {color: \"red\"}\n                            : {color: theme.palette.primary.main},\n                }}\n            />\n        )\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return fileUploadComponent\n}\n","/* eslint-disable no-use-before-define */\n\nimport TextField, {TextFieldProps} from \"@material-ui/core/TextField\"\nimport Autocomplete from \"@material-ui/lab/Autocomplete\"\nimport React, {useEffect, useState} from \"react\"\nimport {useDebounce} from \"../hooks/useDebounce\"\n\nexport interface ApiAutocompleteProps<T> {\n    defaultValue?: T\n    freeSolo: boolean\n    objectResolver: (object: T) => string\n    onQuery: (query: string) => Promise<T[]>\n    onSelect?: (object: T | null) => void\n    onTextChange?: (value: string) => void\n    textProps?: TextFieldProps\n}\nexport function ApiAutocomplete<T>({\n    defaultValue,\n    freeSolo,\n    objectResolver,\n    onQuery,\n    onSelect,\n    onTextChange,\n    textProps,\n}: ApiAutocompleteProps<T>) {\n    const [text, changeText] = useState<string>(\"\")\n    const debouncedText = useDebounce(text, 500)\n    const [options, changeOptions] = useState<T[]>([])\n    useEffect(() => {\n        const search = async () => {\n            if (debouncedText !== \"\") {\n                const search = await onQuery(debouncedText)\n                changeOptions(() => {\n                    return [...search]\n                })\n            }\n        }\n        search()\n    }, [debouncedText, onQuery])\n\n    return (\n        <Autocomplete\n            defaultValue={defaultValue}\n            freeSolo={freeSolo}\n            id=\"combo-box-demo\"\n            filterOptions={(x) => x}\n            onChange={(_: unknown, newValue: T | null) => {\n                if (onSelect) {\n                    onSelect(newValue)\n                }\n            }}\n            renderInput={(params) => (\n                <TextField\n                    {...params}\n                    {...textProps}\n                    onChange={({target: {value}}) => {\n                        changeText(value)\n                        if (onSelect && onTextChange) {\n                            onTextChange(value)\n                        }\n                    }}\n                />\n            )}\n            options={options}\n            getOptionLabel={(option) => objectResolver(option)}\n        />\n    )\n}\n","import {useEffect, useState} from \"react\"\n\n// Our hook\nexport const useDebounce = <T>(value: T, delay: number) => {\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value)\n\n    useEffect(() => {\n        // Set debouncedValue to value (passed in) after the specified delay\n        const handler = setTimeout(() => {\n            setDebouncedValue(value)\n        }, delay)\n\n        // Return a cleanup function that will be called every time ...\n        // ... useEffect is re-called. useEffect will only be re-called ...\n        // ... if value changes (see the inputs array below).\n        // This is how we prevent debouncedValue from changing if value is ...\n        // ... changed within the delay period. Timeout gets cleared and restarted.\n        // To put it in context, if the user is typing within our app's ...\n        // ... search box, we don't want the debouncedValue to update until ...\n        // ... they've stopped typing for more than 500ms.\n        return () => {\n            clearTimeout(handler)\n        }\n    }, [value, delay]) // ... need to be able to change that dynamically. // You could also add the \"delay\" var to inputs array if you ... // Only re-call effect if value changes\n\n    return debouncedValue\n}\n","import React, {useCallback, useEffect} from \"react\"\nimport {LocationFeature, searchLocations} from \"../../services/location-search\"\nimport {ApiAutocomplete} from \"../api-autocomplete\"\nimport {LocationFormItem} from \"./form\"\n\nexport type FormLocationItemProps = LocationFormItem & {\n    handleChange: (id: string, value: string | number) => void\n}\nexport const FormLocationItem = ({\n    autoComplete,\n    defaultValue,\n    freeSolo = false,\n    handleChange,\n    id,\n    label,\n    locationIds,\n    required,\n}: FormLocationItemProps) => {\n    const setLocation = useCallback(\n        (location: LocationFeature | undefined | null) => {\n            if (location) {\n                handleChange(id, location.properties.display_name)\n                if (locationIds) {\n                    const {latitude, longitude} = locationIds\n                    if (location.geometry) {\n                        handleChange(latitude, location.geometry.coordinates[1])\n                        handleChange(\n                            longitude,\n                            location.geometry.coordinates[0],\n                        )\n                    }\n                }\n            }\n        },\n        [handleChange, id, locationIds],\n    )\n\n    useEffect(() => {\n        setLocation(defaultValue)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return (\n        <ApiAutocomplete\n            textProps={{\n                autoComplete,\n                fullWidth: true,\n                id,\n                label,\n                name: id,\n                required,\n                variant: \"outlined\",\n            }}\n            onQuery={async (query) => {\n                const search = await searchLocations(query)\n                return search.features\n            }}\n            objectResolver={(feature: LocationFeature) => {\n                return feature.properties.display_name\n            }}\n            onTextChange={(query: string) => {\n                setLocation({\n                    properties: {\n                        display_name: query,\n                    },\n                })\n            }}\n            freeSolo={freeSolo}\n            defaultValue={defaultValue}\n            onSelect={setLocation}\n        />\n    )\n}\n","import {IconButton, InputAdornment, Tooltip} from \"@material-ui/core\"\nimport React from \"react\"\n\nexport interface TooltipComponentProps {\n    hint: string\n    icon: JSX.Element\n}\nexport const TooltipComponent: React.FC<TooltipComponentProps> = ({\n    hint,\n    icon,\n}) => (\n    <InputAdornment position=\"end\">\n        <Tooltip title={hint} placement=\"top\" arrow>\n            <IconButton aria-label=\"delete\">{icon}</IconButton>\n        </Tooltip>\n    </InputAdornment>\n)\n","import {InputLabel, MenuItem, Select} from \"@material-ui/core\"\nimport FormControl from \"@material-ui/core/FormControl\"\nimport HelpIcon from \"@material-ui/icons/Help\"\nimport React, {useEffect, useState} from \"react\"\nimport {TooltipComponent} from \"../tooltip\"\nimport {SelectFormItem} from \"./form\"\n\nexport type FormSelectItemProps = SelectFormItem & {\n    handleChange: (id: string, value: string) => void\n}\nexport const FormSelectItem: React.FC<FormSelectItemProps> = ({\n    autoComplete,\n    defaultValue = \"\",\n    disabled = false,\n    handleChange,\n    hint,\n    id,\n    label,\n    options,\n    required,\n}) => {\n    const [selectValue, changeSelectValue] = useState<string>(defaultValue)\n\n    useEffect(() => {\n        handleChange(id, defaultValue)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return (\n        <FormControl required={required} variant=\"outlined\" fullWidth>\n            <InputLabel id=\"select-outlined-label\">{label}</InputLabel>\n            <Select\n                disabled={disabled}\n                endAdornment={\n                    hint ? (\n                        <TooltipComponent hint={hint} icon={<HelpIcon />} />\n                    ) : undefined\n                }\n                required={required}\n                value={selectValue}\n                autoComplete={autoComplete}\n                labelId=\"select-outlined-label\"\n                id={id}\n                onChange={({target: {value}}) => {\n                    if (typeof value === \"string\") {\n                        changeSelectValue(value)\n                        handleChange(id, value)\n                    }\n                }}\n                label={label}>\n                {Object.entries(options).map(([key, value]) => (\n                    <MenuItem {...{key}} value={key}>\n                        {value}\n                    </MenuItem>\n                ))}\n            </Select>\n        </FormControl>\n    )\n}\n","import {makeStyles, Slider, Typography} from \"@material-ui/core\"\nimport React, {useEffect, useMemo} from \"react\"\nimport {getNested} from \"../../services/utils\"\nimport {SliderFormItem} from \"./form\"\n\nconst useStyles = makeStyles({\n    root: {\n        flex: 1,\n    },\n})\n\nconst valuetext = (value: number, ending: string) => `${value} ${ending}`\n\nexport type FormSliderItemProps = SliderFormItem & {\n    form: any\n    handleChange: (id: string, value: number) => void\n}\nexport const FormSliderItem = ({\n    defaultValue = 0,\n    ending = \"\",\n    form,\n    handleChange,\n    id,\n    label,\n    max,\n    min,\n    step,\n}: FormSliderItemProps) => {\n    const classes = useStyles()\n    useEffect(() => {\n        handleChange(id, defaultValue)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n    const value = useMemo(() => getNested(form, id), [form, id])\n\n    return (\n        <div className={classes.root}>\n            <Typography id=\"discrete-slider\" gutterBottom>\n                {`${label} (${value})`}\n            </Typography>\n            <Slider\n                id={id}\n                onChange={(_, value) => {\n                    if (typeof value === \"number\") {\n                        handleChange(id, value)\n                    }\n                }}\n                defaultValue={defaultValue}\n                getAriaValueText={(value) => valuetext(value, ending)}\n                aria-labelledby=\"discrete-slider-always\"\n                step={step}\n                valueLabelDisplay=\"auto\"\n                min={min}\n                max={max}\n            />\n        </div>\n    )\n}\n","import {FormControl, InputLabel, OutlinedInput} from \"@material-ui/core\"\nimport HelpIcon from \"@material-ui/icons/Help\"\nimport React, {useEffect, useState} from \"react\"\nimport {TooltipComponent} from \"../tooltip\"\nimport {TextFormItem} from \"./form\"\n\nexport type FormTextItemProps = TextFormItem & {\n    handleChange: (id: string, value: string) => void\n}\nexport const FormTextItem = ({\n    autoComplete,\n    defaultValue,\n    handleChange,\n    hint,\n    id,\n    label,\n    multiline,\n    required,\n    textType,\n}: FormTextItemProps) => {\n    const [textValue, changeTextValue] = useState<string>(defaultValue || \"\")\n\n    useEffect(() => {\n        handleChange(id, defaultValue)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return (\n        <div style={{display: \"flex\"}}>\n            <FormControl fullWidth variant=\"outlined\">\n                <InputLabel htmlFor={id}>{label}</InputLabel>\n                <OutlinedInput\n                    fullWidth\n                    multiline={!!multiline}\n                    rows={multiline ? 5 : undefined}\n                    type={textType}\n                    required={required}\n                    value={textValue}\n                    onChange={({target: {name, value}}) => {\n                        changeTextValue(value)\n                        handleChange(name, value)\n                    }}\n                    id={id}\n                    name={id}\n                    label={label}\n                    autoComplete={autoComplete}\n                    endAdornment={\n                        hint ? (\n                            <TooltipComponent hint={hint} icon={<HelpIcon />} />\n                        ) : undefined\n                    }\n                />\n            </FormControl>\n        </div>\n    )\n}\n","import {unreachable} from \"@dynamo/common\"\nimport React from \"react\"\nimport {FormFileUploadItem} from \"./file-upload\"\nimport {FormItem} from \"./form\"\nimport {FormLocationItem} from \"./location\"\nimport {FormSelectItem} from \"./select\"\nimport {FormSliderItem} from \"./slider\"\nimport {FormTextItem} from \"./text\"\n\nexport type FormItemResolverComponentProps = FormItem & {\n    form: unknown\n    handleChange: (id: string, value: unknown) => void\n}\nexport const FormItemResolverComponent: React.FC<FormItemResolverComponentProps> = (\n    formItem,\n) => {\n    let element: JSX.Element\n    switch (formItem.type) {\n        case \"text\":\n            element = <FormTextItem {...formItem} />\n            break\n        case \"select\":\n            element = <FormSelectItem {...formItem} />\n            break\n        case \"slider\":\n            element = <FormSliderItem {...formItem} />\n            break\n        case \"location\":\n            element = <FormLocationItem {...formItem} />\n            break\n        case \"file-upload\":\n            element = <FormFileUploadItem {...formItem} />\n            break\n        case \"custom\":\n            element = formItem.render(formItem)\n            break\n        default:\n            unreachable(\"impossible case\")\n    }\n\n    return <div>{element}</div>\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport {Button, Grid, makeStyles} from \"@material-ui/core\"\nimport React, {useCallback} from \"react\"\nimport {IPreviewProps} from \"react-dropzone-uploader\"\nimport {useForm} from \"../../hooks/useForm\"\nimport {FormItemResolverComponent} from \"./resolver\"\n\nexport type ReactComponent<Props> = (\n    props: Props,\n) => React.ReactNode | React.Component<Props>\n\nexport interface FormItemBase {\n    alignment: {sm?: 12 | 6; xs?: 12 | 6}\n    autoComplete?: string\n    defaultValue?: any\n    hint?: string\n    id: string\n    label: string\n    multiline?: boolean\n    required?: boolean\n}\n\nexport interface TextFormItem extends FormItemBase {\n    textType?: string\n    type: \"text\"\n}\n\nexport interface LocationFormItem extends FormItemBase {\n    freeSolo?: boolean\n    locationIds?: {\n        latitude: string\n        longitude: string\n    }\n    textType?: string\n    type: \"location\"\n}\n\nexport interface SliderFormItem extends FormItemBase {\n    ending?: string\n    max: number\n    min: number\n    step: number\n    type: \"slider\"\n}\n\nexport interface SelectFormItem extends FormItemBase {\n    disabled?: boolean\n    options: {[value: string]: string}\n    type: \"select\"\n}\n\nexport interface FileUploadFormItem extends FormItemBase {\n    PreviewComponent?: ReactComponent<\n        IPreviewProps & {\n            handleChange: (value: File[] | File | undefined) => void\n            id: string\n        }\n    >\n    accept?: string\n    icon?: JSX.Element\n    multiple?: boolean\n    type: \"file-upload\"\n}\n\nexport interface CustomFormItem extends FormItemBase {\n    render: (props: FormItemBase) => JSX.Element\n    type: \"custom\"\n}\n\nexport type FormItem =\n    | TextFormItem\n    | SelectFormItem\n    | SliderFormItem\n    | LocationFormItem\n    | FileUploadFormItem\n    | CustomFormItem\n\nconst useStyles = makeStyles((theme) => ({\n    form: {\n        marginTop: theme.spacing(3), // Fix IE 11 issue.\n        width: \"100%\",\n    },\n    spacing: {\n        marginTop: 30,\n    },\n}))\n\nexport interface FormComponentProps<T> {\n    children?: JSX.Element | JSX.Element[]\n    formItems: FormItem[]\n    initialForm?: Partial<T>\n    onSubmit: (form: T) => void\n    onUpdate?: (id: string, value: any) => void\n    submitButtonTitle: string\n}\nexport function FormComponent<T>({\n    children,\n    formItems,\n    initialForm,\n    onSubmit,\n    onUpdate,\n    submitButtonTitle,\n}: FormComponentProps<T>) {\n    const classes = useStyles()\n    const {form, updateForm} = useForm<T>(initialForm)\n\n    const update = useCallback(\n        (id: string, value: any) => {\n            updateForm(id, value)\n            if (onUpdate) {\n                onUpdate(id, value)\n            }\n        },\n        [updateForm, onUpdate],\n    )\n\n    return (\n        <form\n            className={classes.form}\n            onSubmit={(event) => {\n                event.preventDefault()\n                onSubmit(form as T)\n            }}>\n            <Grid container spacing={2}>\n                {formItems.map((formItem) => {\n                    const {sm, xs} = formItem.alignment\n                    return (\n                        <Grid item xs={xs} sm={sm} key={formItem.id}>\n                            <FormItemResolverComponent\n                                handleChange={update}\n                                {...{form}}\n                                {...formItem}\n                            />\n                        </Grid>\n                    )\n                })}\n            </Grid>\n            {children}\n            <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.spacing}>\n                {submitButtonTitle}\n            </Button>\n        </form>\n    )\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport {useState} from \"react\"\nimport {setNested} from \"../services/utils\"\n\nexport const useForm = <\n    T extends {\n        [key: string]: any\n    }\n>(\n    initial: Partial<T> | undefined = {},\n) => {\n    const [form, changeForm] = useState<Partial<T>>(initial)\n\n    const updateForm = (path: string, value: any) => {\n        changeForm((old) => {\n            const newV: Partial<T> = setNested(old, path, value) as any\n            return newV\n        })\n    }\n    return {form, updateForm}\n}\n","import React, {useCallback, useMemo} from \"react\"\nimport {FormComponent, FormItem} from \"../components/form/form\"\nimport {\n    MutationSendInvitationArgs,\n    User,\n    useSendInvitationMutation,\n} from \"../graphql/schema.generated\"\nimport {useSnack} from \"../hooks\"\n\nexport interface InvitePageViewProps {\n    onSubmit: (args: MutationSendInvitationArgs) => void\n    user: User\n}\nexport const InvitePageView: React.FC<InvitePageViewProps> = ({\n    onSubmit,\n    user,\n}) => {\n    const formItems = useMemo(\n        () =>\n            [\n                {\n                    alignment: {xs: 12},\n                    defaultValue: user.type,\n                    disabled: user.type !== \"Submitter\",\n                    id: \".type\",\n                    label: \"User Type\",\n                    options: {\n                        Submitter: \"Medical\",\n                        Volunteer: \"Maker\",\n                    },\n                    required: true,\n                    type: \"select\",\n                },\n\n                {\n                    alignment: {xs: 12},\n                    autoComplete: \"email\",\n                    id: \".email\",\n                    label: \"Email\",\n                    required: true,\n                    textType: \"email\",\n                    type: \"text\",\n                },\n            ] as FormItem[],\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [],\n    )\n\n    return (\n        <FormComponent\n            submitButtonTitle=\"Invite\"\n            formItems={formItems}\n            onSubmit={onSubmit}\n        />\n    )\n}\n\nexport interface InvitePageProps {\n    closeModal: () => void\n    user: User\n}\nexport const InvitePage: React.FC<InvitePageProps> = ({closeModal, user}) => {\n    const {updateSnack} = useSnack()\n    const [mutate] = useSendInvitationMutation({\n        onCompleted: (data) => {\n            if (data.sendInvitation) {\n                updateSnack({\n                    message: \"successfully sent invitation\",\n                    severity: \"success\",\n                })\n                closeModal()\n            }\n        },\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n    })\n\n    const onSubmit = useCallback(\n        (args: MutationSendInvitationArgs) => mutate({variables: args}),\n        [mutate],\n    )\n\n    return <InvitePageView user={user} onSubmit={onSubmit} />\n}\n","/* eslint-disable no-restricted-globals */\n\nimport {assert} from \"@dynamo/common\"\nimport {\n    Button,\n    Card,\n    CardContent,\n    createStyles,\n    FormControl,\n    InputLabel,\n    Link,\n    makeStyles,\n    MenuItem,\n    Select,\n    Theme,\n    Typography,\n} from \"@material-ui/core\"\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\"\nimport AssignmentIcon from \"@material-ui/icons/Assignment\"\nimport DeleteIcon from \"@material-ui/icons/Delete\"\nimport DoneAllIcon from \"@material-ui/icons/DoneAll\"\nimport HourglassEmptyIcon from \"@material-ui/icons/HourglassEmpty\"\nimport * as React from \"react\"\nimport {useCallback, useState} from \"react\"\nimport {FileItemPreview} from \"../components/file-item-preview\"\nimport {InfoListComponent, InfoListItem} from \"../components/info-list\"\nimport {PageComponent, RolePage} from \"../components/page\"\nimport {CustomizedSteppers, StepperStep} from \"../components/stepper\"\nimport {WrongPageComponent} from \"../components/wrong-page\"\nimport {\n    Job,\n    JobProgress,\n    useCancelJobMutation,\n    useJobQuery,\n    UserType,\n    useUpdateJobProgressMutation,\n} from \"../graphql/schema.generated\"\nimport {useDateFromNow, useQuery, useSnack} from \"../hooks\"\nimport {getRenderType, goTo} from \"../services/utils\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        button: {\n            margin: theme.spacing(1),\n        },\n\n        jobPageView: {\n            maxWidth: 1200,\n            minWidth: 500,\n            width: \"50vw\",\n        },\n\n        viewOriginalSubmissionButton: {marginBottom: 35},\n    }),\n)\n\nconst shippingProviders = [\"UPS\", \"USPS\", \"Fedex\", \"Other\"] as const\ntype ShippingType = typeof shippingProviders[number]\n\nenum ProgressStep {\n    Assigned = 0,\n    PrintStarted = 1,\n    PrintComplete = 2,\n    Shipped = 3,\n    Received = 4,\n}\nconst jobStepperSteps: StepperStep[] = [\n    {icon: <AssignmentIcon />, label: \"Assigned\"},\n    {icon: <HourglassEmptyIcon />, label: \"Print Started\"},\n    {icon: <HourglassEmptyIcon />, label: \"Print Complete\"},\n    {icon: <HourglassEmptyIcon />, label: \"Shipped\"},\n    {icon: <DoneAllIcon />, label: \"Received\"},\n]\n\nexport interface PrintProps {\n    onClickPrint?: () => void\n    updateTrackingNumber: (trackingNumber?: string) => void\n}\nexport const PrintCompleteView: React.FC<PrintProps> = ({\n    onClickPrint = print,\n    updateTrackingNumber,\n}) => {\n    const [shippingProvider, changeShippingProvider] = useState<ShippingType>(\n        \"UPS\",\n    )\n\n    return (\n        <div>\n            <Link {...{onClick: onClickPrint}}>\n                <Typography\n                    style={{\n                        alignSelf: \"center\",\n                        marginBottom: 10,\n                    }}\n                    variant=\"subtitle1\">\n                    Print this page and send in package\n                </Typography>\n            </Link>\n\n            <FormControl variant=\"outlined\">\n                <InputLabel id=\"shipping-select-label\">Type</InputLabel>\n                <Select\n                    labelId=\"shipping-select-label\"\n                    label=\"Type\"\n                    id=\"shipping-select\"\n                    value={shippingProvider}\n                    onChange={({target: {value}}) => {\n                        if (typeof value === \"string\") {\n                            changeShippingProvider(value as ShippingType)\n                        }\n                    }}>\n                    {shippingProviders.map((shippingProvider, i) => {\n                        return (\n                            // eslint-disable-next-line react/no-array-index-key\n                            <MenuItem key={i} value={shippingProvider}>\n                                {shippingProvider}\n                            </MenuItem>\n                        )\n                    })}\n                </Select>\n            </FormControl>\n\n            <FormControl style={{marginLeft: 10}} variant=\"outlined\">\n                <InputLabel htmlFor=\"tracking-number\">\n                    Tracking Number\n                </InputLabel>\n                <OutlinedInput\n                    label=\"Tracking Number\"\n                    id=\"tracking-number\"\n                    onChange={({target: {value}}) => {\n                        updateTrackingNumber(\n                            value\n                                ? `${shippingProvider}-${value.trim()}`\n                                : undefined,\n                        )\n                    }}\n                />\n            </FormControl>\n        </div>\n    )\n}\n\nexport interface JobStatusPageProps extends JobPageViewProps {}\nexport const JobPageStatus: React.FC<JobStatusPageProps> = ({\n    cancelJob,\n    job: {id, progress},\n    showActionButtons,\n    updateJobProgress,\n}) => {\n    const classes = useStyles()\n    const {updateSnack} = useSnack()\n    const [trackingNumber, changeTrackingNumber] = useState<string>()\n    const {done, step} = {\n        done: progress === \"Shipped\" || progress === \"Received\",\n        step: ProgressStep[progress],\n    }\n    const nextStep = step + 1\n\n    return (\n        <div>\n            <CustomizedSteppers currentStep={step} steps={jobStepperSteps} />\n            <div>\n                {progress === \"PrintComplete\" && (\n                    <PrintCompleteView\n                        updateTrackingNumber={changeTrackingNumber}\n                    />\n                )}\n\n                {!done && showActionButtons && (\n                    <div>\n                        <Button\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            onClick={() => {\n                                cancelJob(id)\n                            }}\n                            className={classes.button}\n                            startIcon={<DeleteIcon />}>\n                            Cancel Job\n                        </Button>\n\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            disabled={done}\n                            onClick={() => {\n                                if (\n                                    progress === \"PrintComplete\" &&\n                                    !trackingNumber\n                                ) {\n                                    updateSnack({\n                                        message:\n                                            \"Tracking number is required. For other shipping options please pick other and explain\",\n                                    })\n                                } else {\n                                    updateJobProgress({\n                                        id,\n                                        progress: String(\n                                            ProgressStep[nextStep],\n                                        ) as JobProgress,\n                                        trackingNumber,\n                                    })\n                                }\n                            }}\n                            className={classes.button}\n                            endIcon={jobStepperSteps[nextStep].icon}>\n                            {jobStepperSteps[nextStep].label}\n                        </Button>\n                    </div>\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport interface JobPageListProps extends JobPageViewProps {}\nexport const JobPageList: React.FC<JobPageListProps> = ({\n    job: {\n        createdAt,\n        description,\n        id,\n        quantity,\n        submission: {address, submitter},\n        trackingNumber,\n        type,\n        volunteer,\n    },\n}) => {\n    const date = useDateFromNow(createdAt)\n    return (\n        <InfoListComponent\n            items={\n                [\n                    {\n                        action: {type: \"copy\"},\n                        description: id,\n                        name: \"Id\",\n                    },\n                    {\n                        action: {type: \"copy\"},\n                        description: quantity,\n                        name: \"Quantity\",\n                    },\n                    {\n                        action: {type: \"copy\"},\n                        description: date,\n                        name: \"Created\",\n                    },\n                    {\n                        action: {type: \"copy\"},\n                        description: description ?? \"N/A\",\n                        name: \"Description\",\n                    },\n                    {\n                        action: {type: \"copy\", value: submitter.email},\n                        description: `${submitter.firstName} ${submitter.lastName} <${submitter.email}>`,\n                        name: \"Submitter\",\n                    },\n                    {\n                        action: {type: \"copy\", value: volunteer},\n                        description: volunteer\n                            ? `${volunteer.firstName} ${volunteer.lastName} <${volunteer.email}>`\n                            : \"Not Assigned Yet\",\n                        name: \"Assignee\",\n                    },\n                    {\n                        action: {type: \"copy\"},\n                        description: address,\n                        name: \"Shipping Address\",\n                    },\n                    {\n                        action: {type: \"copy\"},\n                        description: trackingNumber || \"N/A\",\n                        name: \"Tracking Number\",\n                    },\n                    {\n                        action: {type: \"copy\"},\n                        description:\n                            type === \"LaserCutting\" ? \"Laser Cut\" : \"3D Print\",\n                        name: \"Job Type\",\n                    },\n                ] as InfoListItem[]\n            }\n        />\n    )\n}\n\nexport interface JobPageViewProps {\n    cancelJob: (id: string) => void\n    job: Job\n    showActionButtons: boolean\n    updateJobProgress: (args: {\n        id: string\n        progress: JobProgress\n        trackingNumber?: string | undefined\n    }) => void\n}\nexport const JobPageView: React.FC<JobPageViewProps> = (props) => {\n    const {\n        job: {createdAt, files, name, submission, type},\n    } = props\n    const date = useDateFromNow(createdAt)\n    const classes = useStyles()\n\n    const onSubmissionClick = useCallback(\n        () => goTo(`/submission/?id=${submission.id}`),\n        [submission.id],\n    )\n\n    const renderType = getRenderType(type)\n\n    return (\n        <div className={classes.jobPageView}>\n            <Card>\n                <CardContent style={{textAlign: \"center\"}}>\n                    <Typography component=\"h5\" variant=\"h5\">\n                        {name}\n                    </Typography>\n                    <Typography color=\"textSecondary\" variant=\"h6\">\n                        {date}\n                    </Typography>\n                    <Button\n                        style={{marginTop: 10}}\n                        className={classes.viewOriginalSubmissionButton}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={onSubmissionClick}>\n                        View Original Submission\n                    </Button>\n                    <FileItemPreview\n                        items={files.map((file) => {\n                            return {file, type: renderType}\n                        })}\n                    />\n\n                    <JobPageList {...props} />\n\n                    <JobPageStatus {...props} />\n                </CardContent>\n            </Card>\n        </div>\n    )\n}\n\nexport interface JobPageProps {}\nexport const JobPage: React.FC<JobPageProps> = () => {\n    const {updateSnack} = useSnack()\n    const id = useQuery().get(\"id\")\n\n    assert(id, \"Invalid job ID!\")\n\n    const {data} = useJobQuery({\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n        variables: {id},\n    })\n\n    const [cancelJobMutation] = useCancelJobMutation({\n        onCompleted: (cancelResponse) => {\n            if (cancelResponse.cancelJob) {\n                goTo(\"/\")\n            }\n        },\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n    })\n\n    const [updateJobProgressMutation] = useUpdateJobProgressMutation({\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n    })\n\n    const cancelJob = useCallback(\n        (id: string) => {\n            cancelJobMutation({variables: {id}})\n        },\n        [cancelJobMutation],\n    )\n\n    const updateJobProgress = useCallback(\n        (args: {\n            id: string\n            progress: JobProgress\n            trackingNumber?: string\n        }) => {\n            updateJobProgressMutation({variables: args})\n        },\n        [updateJobProgressMutation],\n    )\n\n    const jopPage = useCallback(\n        (userType: UserType, showActionButtons: boolean): RolePage => {\n            return {\n                component: (user) => (\n                    <div style={{display: \"flex\", justifyContent: \"center\"}}>\n                        {data?.job && (\n                            <JobPageView\n                                job={data.job}\n                                {...{\n                                    cancelJob,\n                                    showActionButtons,\n                                    updateJobProgress,\n                                    user,\n                                }}\n                            />\n                        )}\n                    </div>\n                ),\n                role: userType,\n            }\n        },\n        [cancelJob, data, updateJobProgress],\n    )\n\n    return (\n        <PageComponent\n            disableHide={false}\n            showFooter\n            title=\"Job\"\n            rolePages={[\n                jopPage(\"Submitter\", false),\n                jopPage(\"Volunteer\", true),\n            ]}>\n            <WrongPageComponent text=\"Must be signed in to view Job\" />\n        </PageComponent>\n    )\n}\n","import {\n    Button,\n    ButtonProps,\n    createStyles,\n    Fade,\n    makeStyles,\n} from \"@material-ui/core\"\nimport AppBar from \"@material-ui/core/AppBar\"\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\nimport Link from \"@material-ui/core/Link\"\nimport Toolbar from \"@material-ui/core/Toolbar\"\nimport useScrollTrigger from \"@material-ui/core/useScrollTrigger\"\nimport React, {useEffect, useState} from \"react\"\nimport {theme} from \"./theme\"\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        link: {\n            textDecoration: \"none\",\n        },\n        sidebarButtons: {\n            display: \"flex\",\n            justifyContent: \"flex-start\",\n        },\n    }),\n)\n\nexport interface SideBarButton {\n    path: string\n    props?: ButtonProps\n    title: string\n    type: \"bar-button\"\n}\n\nlet previousScroll = 0\n\nexport interface HideAppBarProps {\n    buttons: ((SideBarButton | {element: JSX.Element; type: \"element\"}) & {\n        key: string\n    })[]\n    disableHide: boolean\n    homeButton: SideBarButton\n    inverted: boolean\n    window?: () => Window\n}\n\ninterface HideOnScorllProps extends HideAppBarProps {\n    throttleInverted: (inverted: boolean) => void\n}\nconst HideOnScroll: React.FC<\n    HideOnScorllProps & {\n        children: React.ReactElement | undefined\n    }\n> = ({children, throttleInverted, window: window_prop}) => {\n    // Note that you normally won't need to set the window ref as useScrollTrigger\n    // will default to window.\n    // This is only being set here because the demo is in an iframe.\n\n    const threshold = 50\n    const trigger = useScrollTrigger({\n        target: window_prop ? window_prop() : undefined,\n        threshold,\n    })\n    useEffect(() => {\n        window.addEventListener(\"scroll\", () => {\n            if (window.scrollY <= 0) {\n                throttleInverted(false)\n            } else if (\n                window.scrollY < previousScroll &&\n                !trigger &&\n                window.scrollY > threshold\n            ) {\n                throttleInverted(true)\n            }\n            previousScroll = window.scrollY\n        })\n    }, [throttleInverted, trigger])\n\n    return <Fade in={!trigger}>{children}</Fade>\n}\n\nexport const HideAppBar: React.FC<HideAppBarProps> = (props) => {\n    const {\n        buttons,\n        children,\n        disableHide,\n        homeButton,\n        inverted: invertedInitial,\n    } = props\n\n    const classes = useStyles()\n    const [inverted, changeInverted] = useState(invertedInitial)\n    const buttonStyle = {\n        color: inverted ? \"white\" : theme.palette.primary.main,\n        fontFamily: theme.typography.fontFamily,\n        fontSize: 15,\n        textTransform: \"none\" as \"none\",\n    }\n\n    const appBar = (\n        <AppBar\n            elevation={0}\n            style={{\n                background: inverted ? theme.palette.primary.main : \"white\",\n            }}>\n            <Toolbar className={classes.sidebarButtons}>\n                <div style={{flexGrow: 1}}>\n                    <Link href={homeButton.path}>\n                        <Button style={buttonStyle} color=\"inherit\">\n                            {homeButton.title}\n                        </Button>\n                    </Link>\n                </div>\n                <div>\n                    {buttons.map(({key, ...button}) => {\n                        if (button.type === \"element\") {\n                            return <Link {...{key}}>{button.element}</Link>\n                        }\n                        const {path, props, title} = button\n                        return (\n                            <Link {...{key}} href={path}>\n                                <Button\n                                    style={buttonStyle}\n                                    color=\"inherit\"\n                                    {...props}>\n                                    {title}\n                                </Button>\n                            </Link>\n                        )\n                    })}\n                </div>\n            </Toolbar>\n        </AppBar>\n    )\n\n    return (\n        <>\n            <CssBaseline />\n            {disableHide ? (\n                <div>{appBar}</div>\n            ) : (\n                <HideOnScroll throttleInverted={changeInverted} {...props}>\n                    {appBar}\n                </HideOnScroll>\n            )}\n\n            <Toolbar />\n            {children}\n        </>\n    )\n}\n","import {Button} from \"@material-ui/core\"\nimport Menu from \"@material-ui/core/Menu\"\nimport MenuItem from \"@material-ui/core/MenuItem\"\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\"\nimport React from \"react\"\nimport {goTo} from \"../services/utils\"\n\nconst ITEM_HEIGHT = 48\n\nexport interface MenuComponentProps {\n    icon: JSX.Element\n    name: string\n    options: {key: string; name: string; url: string}[]\n}\nexport const MenuComponent: React.FC<MenuComponentProps> = ({\n    icon,\n    name,\n    options,\n}) => {\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null)\n    const open = Boolean(anchorEl)\n\n    const handleClick = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n        setAnchorEl(event.currentTarget)\n    }\n\n    const handleClose = (url?: string) => {\n        setAnchorEl(null)\n        if (url) {\n            goTo(url)\n        }\n    }\n\n    return (\n        <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={(event) => {\n                if (!open) handleClick(event)\n            }}\n            endIcon={<KeyboardArrowDownIcon />}\n            startIcon={icon}>\n            {name}\n\n            <Menu\n                id=\"long-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={open}\n                onClose={() => {\n                    handleClose()\n                }}\n                PaperProps={{\n                    style: {\n                        maxHeight: ITEM_HEIGHT * 4.5,\n                        width: \"20ch\",\n                    },\n                }}>\n                {options.map(({key, name, url}) => (\n                    <MenuItem onClick={() => handleClose(url)} {...{key}}>\n                        {name}\n                    </MenuItem>\n                ))}\n            </Menu>\n        </Button>\n    )\n}\n","import {\n    Button,\n    ButtonProps,\n    Card,\n    CardContent,\n    IconButton,\n    Typography,\n} from \"@material-ui/core\"\nimport Backdrop from \"@material-ui/core/Backdrop\"\nimport Fade from \"@material-ui/core/Fade\"\nimport Modal from \"@material-ui/core/Modal\"\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\"\nimport CloseIcon from \"@material-ui/icons/Close\"\nimport React, {useCallback, useMemo, useState} from \"react\"\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        card: {\n            alignItems: \"column\",\n            display: \"flex\",\n            textDecoration: \"none\",\n        },\n\n        children: {\n            width: \"38vw\",\n        },\n\n        content: {\n            flex: \"1 0 auto\",\n        },\n        details: {\n            display: \"flex\",\n            flexDirection: \"column\",\n        },\n\n        modal: {\n            alignItems: \"center\",\n            display: \"flex\",\n            justifyContent: \"center\",\n        },\n\n        title: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            height: 25,\n        },\n\n        titleButton: {\n            flex: 0.01,\n            marginBottom: 20,\n        },\n        titleText: {\n            flex: 0.99,\n            marginTop: 8,\n        },\n    }),\n)\n\nexport interface ModalContentProps {\n    closeModal: () => void\n}\n\nexport interface ModalComponentProps {\n    buttonProps?: ButtonProps\n    children:\n        | ((props: ModalContentProps) => JSX.Element | undefined | null)\n        | JSX.Element\n    modalOpen?: boolean\n    title?: string\n}\nexport const ModalComponent: React.FC<ModalComponentProps> = ({\n    children,\n    modalOpen = false,\n    title = \"\",\n    buttonProps = {},\n}) => {\n    const classes = useStyles()\n    const [open, setOpen] = useState(modalOpen)\n\n    const handleOpen = useCallback(() => {\n        if (!open) {\n            setOpen(true)\n        }\n    }, [open, setOpen])\n\n    const handleClose = useCallback(() => {\n        setOpen(false)\n    }, [setOpen])\n\n    const renderedContent = useMemo(\n        () =>\n            typeof children === \"function\"\n                ? children({closeModal: handleClose})\n                : children,\n        [children, handleClose],\n    )\n\n    return (\n        <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleOpen}\n            {...buttonProps}>\n            {title}\n\n            <Modal\n                disableBackdropClick={false}\n                aria-labelledby=\"transition-modal-title\"\n                aria-describedby=\"transition-modal-description\"\n                className={classes.modal}\n                open={open}\n                onClose={handleClose}\n                closeAfterTransition\n                BackdropComponent={Backdrop}\n                BackdropProps={{\n                    timeout: 500,\n                }}>\n                <div>\n                    <Fade in={open}>\n                        <Card className={classes.card}>\n                            <div className={classes.details}>\n                                <CardContent className={classes.content}>\n                                    <div className={classes.title}>\n                                        <Typography\n                                            className={classes.titleText}\n                                            gutterBottom\n                                            variant=\"h5\"\n                                            component=\"h2\">\n                                            {title}\n                                        </Typography>\n\n                                        <IconButton\n                                            onClick={handleClose}\n                                            className={classes.titleButton}\n                                            aria-label=\"close\">\n                                            <CloseIcon />\n                                        </IconButton>\n                                    </div>\n                                    <div className={classes.children}>\n                                        {renderedContent ?? <div />}\n                                    </div>\n                                </CardContent>\n                            </div>\n                        </Card>\n                    </Fade>\n                </div>\n            </Modal>\n        </Button>\n    )\n}\n","import {ButtonProps, Fade, makeStyles, Typography} from \"@material-ui/core\"\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\"\nimport LockIcon from \"@material-ui/icons/Lock\"\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\"\nimport React, {useEffect, useState} from \"react\"\nimport {NotifyMessage} from \"../client\"\nimport {useMeQuery, User, UserType} from \"../graphql/schema.generated\"\nimport {InvitePage} from \"../pages/invite\"\nimport {goTo} from \"../services/utils\"\nimport {HideAppBar, SideBarButton} from \"./hide-app-bar\"\nimport {MenuComponent} from \"./menu\"\nimport {ModalComponent} from \"./modal\"\nimport {SnackBarComponent} from \"./snackbar\"\n\nexport interface RolePage {\n    component?: (user: User) => React.ReactNode\n    redirect?: string\n    role: UserType\n    title?: string\n}\n\nconst useStyles = makeStyles(() => ({\n    container: {\n        display: \"flex\",\n        flexDirection: \"column\",\n    },\n    footer: {\n        marginTop: \"7vh\",\n        textAlign: \"center\",\n    },\n}))\n\nexport interface PageComponentProps {\n    disableHide?: boolean\n    rolePages?: RolePage[]\n    roleRedirect?: string\n    showFooter?: boolean\n    title: string\n}\nexport const PageComponent: React.FunctionComponent<PageComponentProps> = ({\n    children,\n    disableHide = true,\n    rolePages,\n    roleRedirect,\n    showFooter = false,\n    title,\n}) => {\n    const classes = useStyles()\n    const [snack, updateSnack] = useState<NotifyMessage>()\n\n    useEffect(() => {\n        document.title = `Op Dynamo | ${title}`\n    }, [title])\n\n    const [component, changeComponent] = useState<React.ReactNode>()\n    const {data: meData, error: meError, loading} = useMeQuery()\n\n    const alwaysButtons = [\n        {\n            key: \"loggedOutLegal\",\n            path: \"/legal\",\n            title: \"Legal\",\n            type: \"bar-button\",\n        },\n        {\n            key: \"loggedOutAbout\",\n            path: \"/about\",\n            title: \"About\",\n            type: \"bar-button\",\n        },\n        {\n            key: \"loggedOutContact\",\n            path: \"/contact\",\n            title: \"Contact\",\n            type: \"bar-button\",\n        },\n        {key: \"loggedOutFAQ\", path: \"/faq\", title: \"FAQ\"},\n    ]\n\n    useEffect(() => {\n        if (!meError && rolePages && meData?.me?.user) {\n            const userType = meData.me.user.type\n            const rolePage = rolePages.find((rolePage) => {\n                return rolePage.role === userType\n            })\n            if (!rolePage) {\n                if (roleRedirect) {\n                    goTo(roleRedirect)\n                }\n            } else {\n                if (rolePage.component) {\n                    changeComponent(rolePage.component(meData.me.user))\n                }\n                if (rolePage.redirect) {\n                    goTo(rolePage.redirect)\n                }\n            }\n        } else if (!loading) {\n            changeComponent(children)\n        }\n    }, [rolePages, meData, meError, roleRedirect, children, loading])\n\n    return (\n        <div>\n            <HideAppBar\n                disableHide={disableHide}\n                inverted={false}\n                homeButton={{\n                    path: \"/\",\n                    title: \"Operation Dynamo\",\n                    type: \"bar-button\",\n                }}\n                buttons={\n                    [\n                        ...alwaysButtons,\n                        ...(meData?.me?.user\n                            ? [\n                                  {\n                                      element: (\n                                          <ModalComponent\n                                              title=\"Invite\"\n                                              buttonProps={{\n                                                  startIcon: <PersonAddIcon />,\n                                                  style: {marginRight: 10},\n                                              }}>\n                                              {({closeModal}) =>\n                                                  meData?.me?.user && (\n                                                      <InvitePage\n                                                          user={\n                                                              meData?.me?.user\n                                                          }\n                                                          closeModal={\n                                                              closeModal\n                                                          }\n                                                      />\n                                                  )\n                                              }\n                                          </ModalComponent>\n                                      ),\n                                      key: \"invite\",\n                                      type: \"element\",\n                                  },\n\n                                  {\n                                      element: (\n                                          <MenuComponent\n                                              name={`${meData.me.user.firstName} ${meData.me.user.lastName}`}\n                                              icon={<AccountCircleIcon />}\n                                              options={[\n                                                  {\n                                                      key: \"update\",\n                                                      name: \"Update Account\",\n                                                      url: \"/account/update\",\n                                                  },\n                                                  {\n                                                      key: \"logout\",\n                                                      name: \"Logout\",\n                                                      url: \"/account/logout\",\n                                                  },\n                                              ]}\n                                          />\n                                      ),\n                                      key: \"loggedIn\",\n                                      type: \"element\",\n                                  },\n                              ]\n                            : [\n                                  {\n                                      key: \"loggedOutLogin\",\n                                      path: \"/account/login\",\n                                      props: {\n                                          color: \"primary\",\n                                          startIcon: <LockIcon />,\n                                          style: {\n                                              color: \"white\",\n                                              height: 35,\n                                              marginLeft: 10,\n                                          },\n                                          variant: \"contained\",\n                                      } as ButtonProps,\n                                      title: \"Login\",\n                                      type: \"bar-button\",\n                                  },\n                              ]),\n                    ] as ((SideBarButton & {\n                        element: JSX.Element\n                        type: \"element\"\n                    }) & {key: string})[]\n                }>\n                <div style={{marginTop: 40}}>{component}</div>\n            </HideAppBar>\n            <footer className={classes.footer}>\n                {showFooter ? (\n                    <Fade timeout={1000} in={showFooter}>\n                        <Typography variant=\"caption\" component=\"h3\">\n                            © Operation Dynamo A Creation of Conva LLC. All\n                            Rights Reserved\n                        </Typography>\n                    </Fade>\n                ) : null}\n            </footer>\n            <SnackBarComponent state={[snack, updateSnack]} />\n        </div>\n    )\n}\n","import {Grow, makeStyles, Paper} from \"@material-ui/core\"\nimport * as React from \"react\"\nimport {useEffect, useState} from \"react\"\nimport Markdown from \"react-remarkable\"\n\nconst useStyles = makeStyles(() => ({\n    container: {\n        display: \"flex\",\n        justifyContent: \"center\",\n    },\n\n    paper: {\n        marginTop: \"1vh\",\n        maxWidth: 800,\n        width: \"90vw\",\n    },\n}))\n\nexport interface MarkdownComponentProps {\n    onFinish?: () => void\n    url: string\n    variableMaps?: {from: string | RegExp; to: string}[]\n}\n\nexport const MarkdownComponent = ({\n    url: fileName,\n    onFinish,\n    variableMaps = [],\n}: MarkdownComponentProps) => {\n    const classes = useStyles()\n\n    const [content, changeContent] = useState<string>()\n\n    useEffect(() => {\n        ;(async () => {\n            const response = await fetch(`/assets/docs/${fileName}`)\n            let markdown = await response.text()\n            variableMaps.forEach(({from, to}) => {\n                markdown = markdown.replace(from, to)\n            })\n            changeContent(markdown)\n        })()\n    })\n\n    return (\n        <div className={classes.container}>\n            <Grow onEntered={onFinish} timeout={1000} in>\n                <Paper className={classes.paper}>\n                    <div style={{padding: 25}}>\n                        {content ? (\n                            <Markdown options={{html: true}} source={content} />\n                        ) : null}\n                    </div>\n                </Paper>\n            </Grow>\n        </div>\n    )\n}\n","import Button from \"@material-ui/core/Button\"\nimport Card from \"@material-ui/core/Card\"\nimport CardContent from \"@material-ui/core/CardContent\"\nimport Container from \"@material-ui/core/Container\"\nimport Grid from \"@material-ui/core/Grid\"\nimport {makeStyles} from \"@material-ui/core/styles\"\nimport Typography from \"@material-ui/core/Typography\"\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\"\nimport InsertCommentIcon from \"@material-ui/icons/InsertComment\"\nimport LockIcon from \"@material-ui/icons/Lock\"\nimport React from \"react\"\nimport Particles, {OutMode} from \"react-particles-js\"\nimport {MarkdownComponent} from \"../components/markdown\"\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: \"100%\",\n    },\n    cardContent: {\n        flexGrow: 1,\n    },\n    cardGrid: {\n        paddingBottom: theme.spacing(8),\n        paddingTop: theme.spacing(8),\n    },\n\n    cardMedia: {\n        paddingTop: \"56.25%\", // 16:9\n    },\n\n    footer: {\n        backgroundColor: theme.palette.background.paper,\n        padding: theme.spacing(6),\n    },\n    heroButtons: {\n        marginTop: theme.spacing(4),\n    },\n    heroContent: {\n        backgroundImage:\n            \"linear-gradient(to right, rgb(162, 0, 255) , rgb(89, 0, 255))\",\n        padding: theme.spacing(8, 0, 6),\n        zIndex: 2,\n    },\n    icon: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        color: \"white\",\n    },\n}))\n\nexport interface HomePageProps {}\nexport const HomePage: React.FC<HomePageProps> = () => {\n    const classes = useStyles()\n\n    return (\n        <>\n            <main>\n                {/* Hero unit */}\n                <Particles\n                    style={{position: \"absolute\", zIndex: 0}}\n                    params={{\n                        particles: {\n                            color: {\n                                value: \"#CCC\",\n                            },\n                            line_linked: {\n                                enable: false,\n                            },\n                            move: {\n                                out_mode: OutMode.out,\n                                speed: 1,\n                            },\n                            number: {\n                                density: {\n                                    enable: true,\n                                    value_area: 400,\n                                },\n                                value: 8,\n                            },\n                            shape: {\n                                image: [\n                                    {\n                                        height: 30,\n                                        src: \"assets/images/virus.svg\",\n                                        width: 30,\n                                    },\n                                ],\n\n                                type: [\"image\"],\n                            },\n                            size: {\n                                anim: {\n                                    enable: true,\n                                    size_min: 10,\n                                    speed: 4,\n                                    sync: false,\n                                },\n                                random: false,\n                                value: 30,\n                            },\n                        },\n                        retina_detect: false,\n                    }}\n                />\n\n                <div className={classes.heroContent}>\n                    <Container maxWidth=\"sm\">\n                        <Typography\n                            className={classes.title}\n                            component=\"h1\"\n                            variant=\"h2\"\n                            align=\"center\"\n                            color=\"textPrimary\"\n                            gutterBottom>\n                            Welcome to Operation Dynamo\n                        </Typography>\n\n                        <MarkdownComponent url=\"intro.md\" />\n\n                        <div className={classes.heroButtons}>\n                            <Grid container spacing={2} justify=\"center\">\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        startIcon={<InsertCommentIcon />}\n                                        href=\"/contact\">\n                                        Get Invite\n                                    </Button>\n                                </Grid>\n\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        startIcon={<AccountCircleIcon />}\n                                        href=\"/account/register/choose\">\n                                        Register\n                                    </Button>\n                                </Grid>\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"default\"\n                                        href=\"/account/login\"\n                                        startIcon={<LockIcon />}>\n                                        Login\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Container>\n                </div>\n                <Container className={classes.cardGrid} maxWidth=\"md\">\n                    <Typography\n                        component=\"h1\"\n                        variant=\"h2\"\n                        align=\"center\"\n                        color=\"textPrimary\"\n                        gutterBottom>\n                        Getting Started\n                    </Typography>\n\n                    {/* End hero unit */}\n                    <Grid container spacing={4}>\n                        <Grid item xs={12} sm={6}>\n                            <Card className={classes.card}>\n                                <CardContent>\n                                    <Typography\n                                        gutterBottom\n                                        variant=\"h5\"\n                                        component=\"h2\">\n                                        3D Printer Volunteer - Tutorial\n                                    </Typography>\n\n                                    <iframe\n                                        title=\"hello\"\n                                        width=\"100%\"\n                                        height=\"315\"\n                                        src=\"https://www.youtube.com/embed/G7SquoBZOi8\"\n                                        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                                        allowFullScreen\n                                    />\n                                </CardContent>\n                            </Card>\n                        </Grid>\n\n                        <Grid item xs={12} sm={6}>\n                            <Card className={classes.card}>\n                                <CardContent>\n                                    <Typography\n                                        gutterBottom\n                                        variant=\"h5\"\n                                        component=\"h2\">\n                                        Medical Submitter - Tutorial\n                                    </Typography>\n\n                                    <iframe\n                                        title=\"hello\"\n                                        width=\"100%\"\n                                        height=\"315\"\n                                        src=\"https://www.youtube.com/embed/RNVR8Y-zPQU\"\n                                        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                                        allowFullScreen\n                                    />\n                                </CardContent>\n                            </Card>\n                        </Grid>\n                    </Grid>\n                </Container>\n            </main>\n        </>\n    )\n}\n","import {\n    ButtonBase,\n    Card,\n    createStyles,\n    Grow,\n    makeStyles,\n} from \"@material-ui/core\"\nimport React from \"react\"\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        card: {\n            margin: 20,\n            textDecoration: \"none\",\n            width: 345,\n        },\n\n        details: {\n            display: \"flex\",\n            flexDirection: \"column\",\n        },\n    }),\n)\n\nexport interface CardItemProps {\n    children?: JSX.Element | JSX.Element[] | null\n    onClick?: () => void\n}\nexport const CardItem: React.FC<CardItemProps> = ({children, onClick}) => {\n    const classes = useStyles()\n    return (\n        <div>\n            <Grow in timeout={500}>\n                <ButtonBase>\n                    <Card onClick={onClick} className={classes.card}>\n                        <div className={classes.details}>\n                            {children || null}\n                        </div>\n                    </Card>\n                </ButtonBase>\n            </Grow>\n        </div>\n    )\n}\n","import React, {useEffect, useState} from \"react\"\nimport STLViewer from \"stl-viewer\"\nimport {createContainer, useContainer} from \"unstated-next\"\nimport {dxfToImageBuffer} from \"../services/thumbnail\"\nimport {contentFromFile, setNested, svgToPng} from \"../services/utils\"\nimport {DXFViewer} from \"./dxf-viewer\"\nimport {theme} from \"./theme\"\n\nexport type RenderType = \"stl\" | \"dxf\" | \"image\"\n\nexport const FileRenderStateContainer = createContainer(() => {\n    const [previewImage, changePreviewImage] = useState<{\n        [id: string]:\n            | {\n                  [fileName: string]: string | undefined\n              }\n            | undefined\n    }>({})\n    return {\n        changePreviewImage,\n        previewImage,\n    } as const\n})\n\nexport interface FileRenderProps {\n    color?: string\n    height?: number\n    id?: string\n    name?: string\n    source: {type: \"url\"; url: string} | {file: File; type: \"file\"}\n    type: RenderType\n    width?: number\n}\nexport const FileRender: React.FC<FileRenderProps> = ({\n    color,\n    height = 200,\n    id = \"default\",\n    name = \"default\",\n    source,\n    type,\n    width = 200,\n}) => {\n    const {changePreviewImage} = useContainer(FileRenderStateContainer)\n\n    const [element, changeElement] = useState<JSX.Element>()\n    useEffect(() => {\n        const getElement = async () => {\n            const inputSource = source.type === \"url\" ? source.url : source.file\n            if (source.type === \"url\") {\n                changePreviewImage((old) => {\n                    return setNested(old, `${id}.${name}`, source.url) as never\n                })\n            }\n\n            if (source.type === \"file\" && type === \"dxf\") {\n                contentFromFile({\n                    file: source.file,\n                    onLoad: (dxf: string) => {\n                        const buffer = dxfToImageBuffer({dxf})\n                        const base64 = buffer.toString(\"base64\")\n\n                        svgToPng({\n                            dataUrl: `data:image/svg+xml;base64,${base64}`,\n                            onLoad: (pngUrl?: string) => {\n                                changePreviewImage((old) => {\n                                    return setNested(\n                                        old,\n                                        `${id}.${name}`,\n                                        pngUrl,\n                                    ) as never\n                                })\n                            },\n                        })\n                    },\n                })\n            }\n\n            const element = await (async () => {\n                switch (type) {\n                    case \"dxf\":\n                        return (\n                            <DXFViewer\n                                width={width}\n                                height={height}\n                                source={\n                                    typeof inputSource === \"string\"\n                                        ? {type: \"url\", url: inputSource}\n                                        : {\n                                              file: inputSource,\n                                              type: \"file\",\n                                          }\n                                }\n                                strokeColor={\n                                    color || theme.palette.primary.light\n                                }\n                                strokeWidth=\"0.5%\"\n                            />\n                        )\n                    case \"stl\":\n                        return (\n                            <STLViewer\n                                model={\n                                    typeof inputSource === \"string\"\n                                        ? inputSource\n                                        : await inputSource.arrayBuffer()\n                                }\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                getPainter={(painter: any) => {\n                                    setTimeout(() => {\n                                        changePreviewImage((old) => {\n                                            return setNested(\n                                                old,\n                                                `${id}.${name}`,\n                                                painter.captureFrame(),\n                                            ) as never\n                                        })\n                                    }, 500)\n                                }}\n                                width={width}\n                                height={height}\n                                modelColor={\n                                    color || theme.palette.primary.light\n                                }\n                                backgroundColor=\"white\"\n                                rotate\n                                orbitControls\n                            />\n                        )\n                    default:\n                        return (\n                            <img\n                                width={width}\n                                height={height}\n                                alt=\"\"\n                                src={\n                                    typeof inputSource === \"string\"\n                                        ? inputSource\n                                        : undefined\n                                }\n                            />\n                        )\n                }\n            })()\n\n            changeElement(element)\n        }\n        getElement()\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return element || null\n}\n","import {Button, Grid, makeStyles} from \"@material-ui/core\"\nimport GetAppIcon from \"@material-ui/icons/GetApp\"\nimport React from \"react\"\nimport {File} from \"../graphql/schema.generated\"\nimport {goTo} from \"../services/utils\"\nimport {FileRender, FileRenderStateContainer, RenderType} from \"./file-renderer\"\n\nconst useStyles = makeStyles(() => ({\n    gridContainer: {\n        margin: 5,\n    },\n}))\n\nexport interface GridViewProps {\n    children: React.ReactNode[]\n}\nexport const GridView: React.FC<GridViewProps> = ({children}) => {\n    const classes = useStyles()\n\n    return (\n        <div className={classes.gridContainer}>\n            <Grid container spacing={1}>\n                {children.map((child, i) => (\n                    // eslint-disable-next-line react/no-array-index-key\n                    <Grid key={i} item>\n                        {child}\n                    </Grid>\n                ))}\n            </Grid>\n        </div>\n    )\n}\n\nexport interface FileItemPreviewProps {\n    items: {file: File; type: RenderType}[]\n}\nexport const FileItemPreview: React.FC<FileItemPreviewProps> = ({items}) => {\n    return (\n        <div style={{display: \"flex\", justifyContent: \"center\"}}>\n            <GridView>\n                {items.map(({file: {id, presignedUrl}, type}) => (\n                    <div\n                        style={{\n                            display: \"flex\",\n                            flexDirection: \"column\",\n                            margin: 10,\n                        }}\n                        key={id}>\n                        <FileRenderStateContainer.Provider>\n                            <FileRender\n                                type={type}\n                                width={200}\n                                height={200}\n                                source={{type: \"url\", url: presignedUrl}}\n                            />\n                        </FileRenderStateContainer.Provider>\n\n                        <Button\n                            variant=\"contained\"\n                            style={{height: 35}}\n                            color=\"primary\"\n                            onClick={() => goTo(presignedUrl)}\n                            startIcon={<GetAppIcon />}>\n                            {`Download ${type.toUpperCase()}`}\n                        </Button>\n                    </div>\n                ))}\n            </GridView>\n        </div>\n    )\n}\n","import {\n    AppBar,\n    createStyles,\n    makeStyles,\n    Theme,\n    Toolbar,\n    Typography,\n} from \"@material-ui/core\"\nimport React from \"react\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        menuButton: {\n            marginRight: theme.spacing(2),\n        },\n        root: {\n            flexGrow: 1,\n        },\n        title: {\n            flexGrow: 1,\n        },\n    }),\n)\n\nexport interface PageTitleBarProps {\n    rightItem?: JSX.Element\n    title: string\n}\nexport const PageTitleBar: React.FC<PageTitleBarProps> = ({\n    rightItem: rightActionItem = null,\n    title,\n}) => {\n    const classes = useStyles()\n    return (\n        <AppBar color=\"transparent\" position=\"static\">\n            <Toolbar>\n                <Typography variant=\"h6\" className={classes.title}>\n                    {title}\n                </Typography>\n                {rightActionItem}\n            </Toolbar>\n        </AppBar>\n    )\n}\n","import {Typography} from \"@material-ui/core\"\nimport React from \"react\"\n\nexport interface WrongPageComponentProps {\n    text: string\n}\nexport const WrongPageComponent: React.FC<WrongPageComponentProps> = ({\n    text,\n}) => {\n    return (\n        <div style={{display: \"flex\", justifyContent: \"center\"}}>\n            <Typography\n                style={{alignSelf: \"center\"}}\n                component=\"h5\"\n                variant=\"h5\">\n                {text}\n            </Typography>\n        </div>\n    )\n}\n","import {assert, unreachable} from \"@dynamo/common\"\nimport {makeStyles} from \"@material-ui/core\"\nimport Avatar from \"@material-ui/core/Avatar\"\nimport Button from \"@material-ui/core/Button\"\nimport CardContent from \"@material-ui/core/CardContent\"\nimport CardHeader from \"@material-ui/core/CardHeader\"\nimport CardMedia from \"@material-ui/core/CardMedia\"\nimport {red} from \"@material-ui/core/colors\"\nimport LinearProgress from \"@material-ui/core/LinearProgress\"\nimport Typography from \"@material-ui/core/Typography\"\nimport React, {useCallback, useMemo} from \"react\"\nimport {CardItem} from \"../components/card-item\"\nimport {GridView} from \"../components/file-item-preview\"\nimport {PageComponent} from \"../components/page\"\nimport {PageTitleBar} from \"../components/page-title-bar\"\nimport {WrongPageComponent} from \"../components/wrong-page\"\nimport {Job, useAcceptedJobsQuery} from \"../graphql/schema.generated\"\nimport {goTo} from \"../services/utils\"\nimport {useDateFromNow} from \"../util\"\n\nconst useStyles = makeStyles((theme) => ({\n    avatar: {\n        backgroundColor: red[500],\n    },\n    cardRoot: {\n        margin: 20,\n        width: 345,\n    },\n    expand: {\n        marginLeft: \"auto\",\n        transform: \"rotate(0deg)\",\n        transition: theme.transitions.create(\"transform\", {\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n    expandOpen: {\n        transform: \"rotate(180deg)\",\n    },\n\n    media: {\n        height: 0,\n        paddingTop: \"56.25%\", // 16:9\n    },\n    progressBar: {\n        marginBottom: 10,\n        marginLeft: -16,\n        marginRight: -16,\n        marginTop: -16,\n    },\n\n    progressText: {fontWeight: \"bold\"},\n}))\n\nexport interface JobCardProps {\n    job: Job\n    showAvatar?: boolean\n}\nexport const JobCard: React.FC<JobCardProps> = ({job, showAvatar}) => {\n    const classes = useStyles()\n\n    const onClick = useCallback(() => {\n        goTo(`/job?id=${job.id}`)\n    }, [job.id])\n\n    const createdAt = useDateFromNow(job.createdAt)\n    const progressNumber = useMemo(() => {\n        switch (job.progress) {\n            case \"Assigned\":\n                return 0\n            case \"PrintComplete\":\n                return 0.5\n            case \"PrintStarted\":\n                return 0.25\n            case \"Shipped\":\n                return 0.75\n            case \"Received\":\n                return 1.0\n            default:\n                unreachable(`Invalid job progress`)\n        }\n    }, [job.progress])\n\n    return (\n        <CardItem onClick={onClick}>\n            <div>\n                <CardHeader\n                    avatar={\n                        showAvatar && (\n                            <Avatar\n                                alt={`${job.volunteer.firstName} ${job.volunteer.lastName}`}\n                                className={classes.avatar}>\n                                {job.volunteer.firstName[0]}\n                            </Avatar>\n                        )\n                    }\n                    title={`${job.name.slice(0, 24)}${\n                        job.name.length > 24 ? \"...\" : \"\"\n                    }`}\n                    subheader={createdAt}\n                />\n                {job.submission.files.preview && (\n                    <CardMedia\n                        className={classes.media}\n                        image={job.submission.files.preview.presignedUrl}\n                        title={job.name}\n                    />\n                )}\n                <CardContent>\n                    <LinearProgress\n                        className={classes.progressBar}\n                        variant=\"determinate\"\n                        value={progressNumber * 100}\n                    />\n\n                    <Typography\n                        className={classes.progressText}\n                        variant=\"body2\"\n                        color=\"textSecondary\"\n                        component=\"p\">\n                        {`Progress: ${job.progress} (${(\n                            progressNumber * 100\n                        ).toFixed(0)}%)`}\n                    </Typography>\n\n                    <Typography\n                        variant=\"body2\"\n                        color=\"textSecondary\"\n                        component=\"p\">\n                        {`Quantity Accepted: ${job.quantity}`}\n                    </Typography>\n                </CardContent>\n            </div>\n        </CardItem>\n    )\n}\n\nexport interface VolunteerJobsProps {}\nexport const VolunteerJobs: React.FC<VolunteerJobsProps> = () => {\n    const {data, loading} = useAcceptedJobsQuery()\n    if (loading) {\n        return <div>Loading...</div>\n    }\n    assert(data?.acceptedJobs, `Couldn't get accepted jos!`)\n\n    return (\n        <>\n            <PageTitleBar\n                title=\"My Accepted Jobs\"\n                rightItem={\n                    <Button\n                        color=\"primary\"\n                        onClick={() => {\n                            goTo(\"/find\")\n                        }}\n                        variant=\"contained\">\n                        Find Jobs\n                    </Button>\n                }\n            />\n\n            <GridView>\n                {data.acceptedJobs\n                    .sort(\n                        (a, b) =>\n                            new Date(b.createdAt).getTime() -\n                            new Date(a.createdAt).getTime(),\n                    )\n                    .map((job) => (\n                        <JobCard key={job.id} {...{job}} />\n                    ))}\n            </GridView>\n        </>\n    )\n}\n\nexport interface JobsPageProps {}\nexport const JobsPage: React.FC<JobsPageProps> = () => (\n    <div>\n        <PageComponent\n            disableHide={false}\n            showFooter\n            title=\"Home\"\n            rolePages={[\n                {\n                    component: () => <VolunteerJobs />,\n                    role: \"Volunteer\",\n                },\n            ]}>\n            <WrongPageComponent text=\"Must be signed in to view submissions\" />\n        </PageComponent>\n        <br />\n    </div>\n)\n","import {IconButton} from \"@material-ui/core\"\nimport React, {useEffect, useState} from \"react\"\n\nexport interface SwitchButtonProps {\n    initial?: boolean\n    offIcon: JSX.Element\n    onIcon: JSX.Element\n    onStateChange: (state: boolean) => void\n}\nexport const SwitchButton: React.FC<SwitchButtonProps> = ({\n    initial = false,\n    offIcon,\n    onIcon,\n    onStateChange,\n}) => {\n    const [state, changeState] = useState(initial)\n\n    useEffect(() => {\n        onStateChange(state)\n    }, [onStateChange, state])\n\n    return (\n        <IconButton\n            onClick={() => {\n                changeState((old) => {\n                    return !old\n                })\n            }}>\n            {state ? onIcon : offIcon}\n        </IconButton>\n    )\n}\n","import {assert, unreachable} from \"@dynamo/common\"\nimport {\n    Avatar,\n    Button,\n    CardContent,\n    CardHeader,\n    CardMedia,\n    makeStyles,\n} from \"@material-ui/core\"\nimport {red} from \"@material-ui/core/colors\"\nimport FormControl from \"@material-ui/core/FormControl\"\nimport InputLabel from \"@material-ui/core/InputLabel\"\nimport LinearProgress from \"@material-ui/core/LinearProgress\"\nimport MenuItem from \"@material-ui/core/MenuItem\"\nimport Select from \"@material-ui/core/Select\"\nimport Typography from \"@material-ui/core/Typography\"\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\"\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\"\nimport React, {useCallback, useMemo, useState} from \"react\"\nimport {createContainer, useContainer} from \"unstated-next\"\nimport {CardItem} from \"../components/card-item\"\nimport {GridView} from \"../components/file-item-preview\"\nimport {PageComponent} from \"../components/page\"\nimport {PageTitleBar} from \"../components/page-title-bar\"\nimport {SwitchButton} from \"../components/switch-button\"\nimport {WrongPageComponent} from \"../components/wrong-page\"\nimport {\n    Submission,\n    useAvailableSubmissionsQuery,\n    useSubmittedSubmissionsQuery,\n} from \"../graphql/schema.generated\"\nimport {goTo} from \"../services/utils\"\nimport {useDateFromNow} from \"../util\"\n\nconst useStyles = makeStyles((theme) => ({\n    avatar: {\n        backgroundColor: red[500],\n    },\n    cardRoot: {\n        height: 420,\n        margin: 20,\n        width: 345,\n    },\n\n    expand: {\n        marginLeft: \"auto\",\n        transform: \"rotate(0deg)\",\n        transition: theme.transitions.create(\"transform\", {\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n    expandOpen: {\n        transform: \"rotate(180deg)\",\n    },\n\n    gridContainer: {\n        margin: 5,\n    },\n\n    media: {\n        height: 0,\n        paddingTop: \"56.25%\", // 16:9\n    },\n\n    progressBar: {\n        marginBottom: 10,\n        marginLeft: -16,\n        marginRight: -16,\n        marginTop: -16,\n    },\n    progressText: {fontWeight: \"bold\"},\n\n    sortBy: {\n        margin: 5,\n    },\n\n    titleMenu: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        margin: 20,\n    },\n}))\n\nexport interface SubmissionCardProps {\n    showAvatar?: boolean\n    submission: Submission\n}\nexport const SubmissionCard: React.FC<SubmissionCardProps> = ({\n    showAvatar = false,\n    submission,\n}) => {\n    const classes = useStyles()\n\n    const onClick = useCallback(() => {\n        goTo(`/submission?id=${submission.id}`)\n    }, [submission.id])\n\n    const createdAt = useDateFromNow(submission.createdAt)\n    return (\n        <CardItem onClick={onClick}>\n            <CardHeader\n                avatar={\n                    showAvatar && (\n                        <Avatar\n                            alt={`${submission.submitter.firstName} ${submission.submitter.lastName}`}\n                            className={classes.avatar}>\n                            {submission.submitter.firstName[0]}\n                        </Avatar>\n                    )\n                }\n                title={`${submission.name.slice(0, 24)}${\n                    submission.name.length > 24 ? \"...\" : \"\"\n                }`}\n                subheader={createdAt}\n            />\n            <CardMedia\n                className={classes.media}\n                image={submission.files.preview?.presignedUrl}\n                title={submission.name}\n            />\n\n            <CardContent>\n                <LinearProgress\n                    className={classes.progressBar}\n                    variant=\"determinate\"\n                    value={submission.progress.total * 100}\n                />\n                <Typography\n                    className={classes.progressText}\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    component=\"p\">\n                    {`Progress: ${(submission.progress.total * 100).toFixed(\n                        0,\n                    )}%`}\n                </Typography>\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                    {`Distance: ${submission.distance.toFixed(1)} miles`}\n                </Typography>\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                    {`Quantity Requested: ${submission.quantity}`}\n                </Typography>\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                    {`3D Printing Jobs Remaining: ${submission.progress.modelQuantity}`}\n                </Typography>\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                    {`Laser Cutting Jobs Remaining: ${submission.progress.laserCuttingQuantity}`}\n                </Typography>\n            </CardContent>\n        </CardItem>\n    )\n}\n\nexport interface SubmitterSubmissionsProps {}\nexport const SubmitterSubmissions: React.FC<SubmitterSubmissionsProps> = () => {\n    const {data, loading} = useSubmittedSubmissionsQuery()\n    const submissions = useSortedSubmissions(data?.submittedSubmissions)\n\n    if (loading) {\n        return <div>Loading...</div>\n    }\n    assert(submissions, `Couldn't get submitted submissions!`)\n\n    return (\n        <>\n            <PageTitleBar\n                title=\"My Submissions\"\n                rightItem={\n                    <div style={{display: \"flex\", flexDirection: \"row\"}}>\n                        <SortingProperties />\n                        <Button\n                            color=\"primary\"\n                            onClick={() => {\n                                goTo(\"/submission/create\")\n                            }}\n                            style={{marginBottom: 10, marginTop: 10}}\n                            variant=\"contained\">\n                            Create Submission\n                        </Button>\n                    </div>\n                }\n            />\n\n            <GridView>\n                {submissions.map((submission) => (\n                    <SubmissionCard key={submission.id} {...{submission}} />\n                ))}\n            </GridView>\n        </>\n    )\n}\n\nexport interface VolunteerSubmissionsProps {}\nexport const VolunteerSubmissions: React.FC<VolunteerSubmissionsProps> = () => {\n    const {data, loading} = useAvailableSubmissionsQuery()\n    const submissions = useSortedSubmissions(data?.availableSubmissions)\n\n    if (loading) {\n        return <div>Loading...</div>\n    }\n    assert(submissions, `Couldn't get available submissions!`)\n\n    return (\n        <>\n            <PageTitleBar title=\"Find Jobs\" rightItem={<SortingProperties />} />\n\n            <GridView>\n                {submissions.map((submission) => (\n                    <SubmissionCard key={submission.id} {...{submission}} />\n                ))}\n            </GridView>\n        </>\n    )\n}\n\nconst fixSortOrder = (value: number, sortOrder: SortOrder) =>\n    sortOrder === \"ascending\" ? value : -value\n\nconst useSortedSubmissions = (submissions: Submission[] | undefined) => {\n    const {sortBy, sortOrder} = useContainer(SubmissionSortContainer)\n    return useMemo(() => {\n        if (!submissions) {\n            return undefined\n        }\n\n        switch (sortBy) {\n            case \"distance\":\n                return [...submissions].sort((a, b) =>\n                    fixSortOrder(a.distance - b.distance, sortOrder),\n                )\n\n            case \"date\":\n                return [...submissions].sort((a, b) =>\n                    fixSortOrder(\n                        new Date(a.createdAt).getTime() -\n                            new Date(b.createdAt).getTime(),\n                        sortOrder,\n                    ),\n                )\n\n            case \"printing\":\n                return [...submissions].sort((a, b) => {\n                    return fixSortOrder(\n                        a.progress.modelQuantity - b.progress.modelQuantity,\n                        sortOrder,\n                    )\n                })\n\n            case \"laserCutting\":\n                return [...submissions].sort((a, b) =>\n                    fixSortOrder(\n                        a.progress.laserCuttingQuantity -\n                            b.progress.laserCuttingQuantity,\n                        sortOrder,\n                    ),\n                )\n\n            default:\n                unreachable(`Unrecognized sorting order: ${sortBy}`)\n        }\n    }, [sortBy, sortOrder, submissions])\n}\n\ntype SortBy = \"distance\" | \"date\" | \"printing\" | \"laserCutting\"\ntype SortOrder = \"ascending\" | \"descending\"\nexport const SubmissionSortContainer = createContainer(() => {\n    const [sortBy, setSortBy] = useState<SortBy>(\"distance\")\n    const [sortOrder, setSortOrder] = useState<SortOrder>(\"ascending\")\n    return {setSortBy, setSortOrder, sortBy, sortOrder}\n})\n\nexport interface SortingPropertiesProps {}\nexport const SortingProperties: React.FC<SortingPropertiesProps> = () => {\n    const {setSortBy, setSortOrder, sortBy, sortOrder} = useContainer(\n        SubmissionSortContainer,\n    )\n    const classes = useStyles()\n\n    return (\n        <div className={classes.sortBy}>\n            <FormControl>\n                <InputLabel>Sort By</InputLabel>\n                <Select\n                    value={sortBy}\n                    onChange={(event) =>\n                        setSortBy((event.target.value as unknown) as SortBy)\n                    }>\n                    <MenuItem value=\"distance\">Distance</MenuItem>\n                    <MenuItem value=\"date\">Date</MenuItem>\n                    <MenuItem value=\"printing\">3D Printing</MenuItem>\n                    <MenuItem value=\"laserCutting\">Laser Cutting</MenuItem>\n                </Select>\n            </FormControl>\n            <SwitchButton\n                initial={sortOrder === \"ascending\"}\n                onStateChange={(state) => {\n                    setSortOrder(state ? \"ascending\" : \"descending\")\n                }}\n                onIcon={<ArrowUpwardIcon />}\n                offIcon={<ArrowDownwardIcon />}\n            />\n        </div>\n    )\n}\n\nexport interface SubmissionsPageProps {}\nexport const SubmissionsPage: React.FC<SubmissionsPageProps> = () => (\n    <SubmissionSortContainer.Provider>\n        <div>\n            <PageComponent\n                disableHide={false}\n                showFooter\n                title=\"Home\"\n                rolePages={[\n                    {\n                        component: () => <SubmitterSubmissions />,\n                        role: \"Submitter\",\n                    },\n                    {\n                        component: () => <VolunteerSubmissions />,\n                        role: \"Volunteer\",\n                    },\n                ]}>\n                <WrongPageComponent text=\"Must be signed in to view submissions\" />\n            </PageComponent>\n            <br />\n        </div>\n    </SubmissionSortContainer.Provider>\n)\n","import React from \"react\"\nimport {PageComponent} from \"../components/page\"\nimport {HomePage} from \"./home\"\nimport {VolunteerJobs} from \"./jobs\"\nimport {SubmissionSortContainer, SubmitterSubmissions} from \"./submissions\"\n\nexport interface IndexPageProps {}\nexport const IndexPage: React.FC<IndexPageProps> = () => (\n    <div>\n        <PageComponent\n            disableHide={false}\n            showFooter\n            title=\"Home\"\n            rolePages={[\n                {\n                    component: () => (\n                        <div style={{padding: 10}}>\n                            <SubmissionSortContainer.Provider>\n                                <SubmitterSubmissions />\n                            </SubmissionSortContainer.Provider>\n                        </div>\n                    ),\n                    role: \"Submitter\",\n                },\n                {\n                    component: () => (\n                        <div style={{padding: 10}}>\n                            <VolunteerJobs />\n                        </div>\n                    ),\n                    role: \"Volunteer\",\n                },\n            ]}>\n            <HomePage />\n        </PageComponent>\n        <br />\n    </div>\n)\n","import * as React from \"react\"\nimport {MarkdownComponent} from \"../components/markdown\"\nimport {PageComponent} from \"../components/page\"\n\nexport interface AboutPageProps {}\nexport const AboutPage: React.FC<AboutPageProps> = () => (\n    <PageComponent showFooter title=\"About\">\n        <MarkdownComponent url=\"about.md\" />\n    </PageComponent>\n)\n","import {\n    ButtonBase,\n    createStyles,\n    makeStyles,\n    Theme,\n    Typography,\n} from \"@material-ui/core\"\nimport React from \"react\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        focusVisible: {},\n        image: {\n            \"&:hover, &$focusVisible\": {\n                \"& $imageBackdrop\": {\n                    opacity: 0.5,\n                },\n                \"& $imageMarked\": {\n                    opacity: 0,\n                },\n                \"& $imageTitle\": {\n                    border: \"4px solid currentColor\",\n                },\n                zIndex: 1,\n            },\n            height: \"40vh\",\n            [theme.breakpoints.down(\"xs\")]: {\n                height: 100, // Overrides inline-style\n                width: \"100% !important\",\n            },\n            position: \"relative\",\n        },\n        imageBackdrop: {\n            backgroundColor: theme.palette.common.black,\n            bottom: 0,\n            left: 0,\n            opacity: 0.6,\n            position: \"absolute\",\n            right: 0,\n            top: 0,\n            transition: theme.transitions.create(\"opacity\"),\n        },\n        imageButton: {\n            alignItems: \"center\",\n            bottom: 0,\n            color: theme.palette.common.white,\n            display: \"flex\",\n            fontWeight: 50,\n            justifyContent: \"center\",\n            left: 0,\n            position: \"absolute\",\n            right: 0,\n            top: 0,\n        },\n        imageMarked: {\n            backgroundColor: theme.palette.common.white,\n            bottom: -2,\n            height: 3,\n            left: \"calc(50% - 9px)\",\n            position: \"absolute\",\n            transition: theme.transitions.create(\"opacity\"),\n            width: 18,\n        },\n        imageSrc: {\n            backgroundPosition: \"center 40%\",\n            backgroundSize: \"cover\",\n            bottom: 0,\n            left: 0,\n            position: \"absolute\",\n            right: 0,\n            top: 0,\n        },\n        imageTitle: {\n            padding: `${theme.spacing(2)}px ${theme.spacing(4)}px ${\n                theme.spacing(1) + 6\n            }px`,\n            position: \"relative\",\n        },\n        root: {\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            minWidth: 300,\n            width: \"100%\",\n        },\n    }),\n)\n\nexport interface PictureButtonProps {\n    onClick: () => void\n    title: string\n    url: string\n    width: string\n}\nexport const PictureButton: React.FC<PictureButtonProps> = ({\n    onClick,\n    title,\n    url,\n    width,\n}) => {\n    const classes = useStyles()\n\n    return (\n        <ButtonBase\n            onClick={onClick}\n            focusRipple\n            key={title}\n            className={classes.image}\n            focusVisibleClassName={classes.focusVisible}\n            style={{\n                height: 200,\n\n                width,\n            }}>\n            <span\n                className={classes.imageSrc}\n                style={{\n                    backgroundImage: `url(${url})`,\n                }}\n            />\n            <span className={classes.imageBackdrop} />\n            <span className={classes.imageButton}>\n                <Typography\n                    component=\"span\"\n                    variant=\"h4\"\n                    color=\"inherit\"\n                    className={classes.imageTitle}>\n                    {title}\n                    <span className={classes.imageMarked} />\n                </Typography>\n            </span>\n        </ButtonBase>\n    )\n}\n","import {createStyles, makeStyles} from \"@material-ui/core\"\nimport * as React from \"react\"\nimport {PictureButton} from \"./picture-button\"\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            minWidth: 300,\n            width: \"100%\",\n        },\n    }),\n)\n\nexport interface PictureSelectComponentProps {\n    images: {\n        key: string\n        onClick: () => void\n        title: string\n        url: string\n        width: string\n    }[]\n}\nexport const PictureSelectComponent: React.FC<PictureSelectComponentProps> = ({\n    images,\n}) => {\n    const classes = useStyles()\n\n    return (\n        <div>\n            <div style={{marginTop: 20, textAlign: \"center\"}}>\n                <div className={classes.root}>\n                    {images.map((image) => (\n                        <PictureButton {...image} />\n                    ))}\n                </div>\n            </div>\n        </div>\n    )\n}\n","import {Typography} from \"@material-ui/core\"\nimport * as React from \"react\"\nimport {PageComponent} from \"../../components/page\"\nimport {PictureSelectComponent} from \"../../components/picture-select\"\nimport {goTo} from \"../../services/utils\"\n\nconst images = [\n    {\n        key: \"medical\",\n        onClick: () => goTo(\"/account/register?type=Submitter\"),\n        title: \"Medical\",\n        url:\n            \"https://cdn.pixabay.com/photo/2016/01/19/15/05/doctor-1149149_960_720.jpg\",\n        width: \"50%\",\n    },\n    {\n        key: \"volunteer\",\n        onClick: () => goTo(\"/account/register?type=Volunteer\"),\n        title: \"Maker\",\n        url:\n            \"https://cdn.pixabay.com/photo/2018/10/19/08/46/3d-printing-3758154_960_720.jpg\",\n        width: \"50%\",\n    },\n]\n\nexport interface AccountChoosePageProps {}\nexport const AccountChoosePage: React.FC<AccountChoosePageProps> = () => {\n    return (\n        <PageComponent showFooter title=\"Choose Type\">\n            <div style={{display: \"flex\", justifyContent: \"center\"}}>\n                <Typography\n                    style={{alignSelf: \"center\", marginLeft: 10}}\n                    component=\"h2\"\n                    variant=\"h2\">\n                    Choose Account Type\n                </Typography>\n            </div>\n            <PictureSelectComponent images={images} />\n        </PageComponent>\n    )\n}\n","import {Typography} from \"@material-ui/core\"\nimport Avatar from \"@material-ui/core/Avatar\"\nimport Container from \"@material-ui/core/Container\"\nimport {makeStyles} from \"@material-ui/core/styles\"\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\"\nimport React, {useCallback, useMemo} from \"react\"\nimport {FormComponent, FormItem} from \"../../components/form/form\"\nimport {PageComponent} from \"../../components/page\"\nimport {\n    MutationForgotPasswordArgs,\n    useForgotPasswordMutation,\n} from \"../../graphql/schema.generated\"\nimport {useSnack} from \"../../hooks\"\nimport {goTo} from \"../../services/utils\"\n\nconst useStyles = makeStyles((theme) => ({\n    avatar: {\n        backgroundColor: theme.palette.secondary.main,\n        margin: theme.spacing(1),\n    },\n    paper: {\n        alignItems: \"center\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        marginTop: theme.spacing(8),\n    },\n}))\n\nexport interface ForgotPasswordPageViewProps {\n    onSubmit: (form: MutationForgotPasswordArgs) => void\n}\nexport const ForgotPasswordPageView: React.FC<ForgotPasswordPageViewProps> = ({\n    onSubmit,\n}) => {\n    const classes = useStyles()\n\n    const formItems = useMemo(\n        () =>\n            [\n                {\n                    alignment: {xs: 12},\n                    autoComplete: \"email\",\n                    id: \".email\",\n                    label: \"Email\",\n                    required: true,\n                    type: \"text\",\n                },\n            ] as FormItem[],\n        [],\n    )\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Forgot Password\n                </Typography>\n\n                <FormComponent\n                    submitButtonTitle=\"Reset Password\"\n                    formItems={formItems}\n                    onSubmit={onSubmit}\n                />\n            </div>\n        </Container>\n    )\n}\n\nexport interface ForgotPasswordPageProps {}\nexport const ForgotPasswordPage: React.FC<ForgotPasswordPageProps> = () => {\n    const {updateSnack} = useSnack()\n    const [mutate] = useForgotPasswordMutation({\n        onCompleted: (data) => {\n            if (data.forgotPassword) {\n                updateSnack({\n                    message: \"successfully sent email. redirecting...\",\n                    severity: \"success\",\n                })\n                setTimeout(() => {\n                    goTo(\"/account/login\")\n                }, 1000)\n            }\n        },\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n    })\n\n    const onSubmit = useCallback(\n        (args: MutationForgotPasswordArgs) => {\n            mutate({\n                variables: args,\n            })\n        },\n        [mutate],\n    )\n\n    return (\n        <PageComponent\n            showFooter\n            title=\"Forgot Password\"\n            rolePages={[\n                {redirect: \"/\", role: \"Submitter\"},\n                {redirect: \"/\", role: \"Volunteer\"},\n            ]}>\n            <ForgotPasswordPageView onSubmit={onSubmit} />\n        </PageComponent>\n    )\n}\n","import {Typography} from \"@material-ui/core\"\nimport Avatar from \"@material-ui/core/Avatar\"\nimport Container from \"@material-ui/core/Container\"\nimport Grid from \"@material-ui/core/Grid\"\nimport Link from \"@material-ui/core/Link\"\nimport {makeStyles} from \"@material-ui/core/styles\"\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\"\nimport React, {useCallback} from \"react\"\nimport {login} from \"../../client\"\nimport {FormComponent, FormItem} from \"../../components/form/form\"\nimport {PageComponent} from \"../../components/page\"\nimport {\n    MeDocument,\n    MutationLoginArgs,\n    useLoginMutation,\n} from \"../../graphql/schema.generated\"\nimport {useSnack} from \"../../hooks\"\nimport {goTo} from \"../../services/utils\"\n\nconst useStyles = makeStyles((theme) => ({\n    avatar: {\n        backgroundColor: theme.palette.secondary.main,\n        margin: theme.spacing(1),\n    },\n    paper: {\n        alignItems: \"center\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        marginTop: theme.spacing(8),\n    },\n}))\n\nconst formItems = [\n    {\n        alignment: {xs: 12},\n        autoComplete: \"email\",\n        id: \".email\",\n        label: \"Email\",\n        required: true,\n        type: \"text\",\n    },\n    {\n        alignment: {xs: 12},\n        autoComplete: \"password\",\n        id: \".password\",\n        label: \"Password\",\n        required: true,\n        textType: \"password\",\n        type: \"text\",\n    },\n] as FormItem[]\n\nexport interface LoginPageViewProps {\n    onSubmit: (form: MutationLoginArgs) => void\n}\nexport const LoginPageView: React.FC<LoginPageViewProps> = ({onSubmit}) => {\n    const classes = useStyles()\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Login\n                </Typography>\n\n                <FormComponent\n                    submitButtonTitle=\"Login\"\n                    formItems={formItems}\n                    onSubmit={onSubmit}>\n                    <Grid style={{marginTop: 10}} container justify=\"flex-end\">\n                        <Grid item>\n                            <Link href=\"/account/register\" variant=\"body2\">\n                                Don&apos;t have an account?\n                            </Link>\n                        </Grid>\n                    </Grid>\n\n                    <Grid container justify=\"flex-end\">\n                        <Grid item>\n                            <Link\n                                href=\"/account/forgot-password\"\n                                variant=\"body2\">\n                                Forgot Password?\n                            </Link>\n                        </Grid>\n                    </Grid>\n                </FormComponent>\n            </div>\n        </Container>\n    )\n}\n\nexport interface LoginPageProps {}\nexport const LoginPage: React.FC<LoginPageProps> = () => {\n    const {updateSnack} = useSnack()\n    const [mutate] = useLoginMutation({\n        onCompleted: (data) => {\n            if (data.login) {\n                login(data.login)\n                goTo(\"/\")\n            }\n        },\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n        refetchQueries: [{query: MeDocument}],\n    })\n\n    const onSubmit = useCallback(\n        (args: MutationLoginArgs) => {\n            mutate({\n                variables: args,\n            })\n        },\n        [mutate],\n    )\n\n    return (\n        <PageComponent\n            showFooter\n            title=\"Login\"\n            rolePages={[\n                {redirect: \"/\", role: \"Submitter\"},\n                {redirect: \"/\", role: \"Volunteer\"},\n            ]}>\n            <LoginPageView onSubmit={onSubmit} />\n        </PageComponent>\n    )\n}\n","import React, {useEffect} from \"react\"\nimport {logout} from \"../../client\"\nimport {goTo} from \"../../services/utils\"\n\nexport interface LogoutPageProps {}\nexport const LogoutPage: React.FC<LogoutPageProps> = () => {\n    useEffect(() => {\n        logout()\n        goTo(\"/\")\n    }, [])\n    return <div />\n}\n","import {Typography} from \"@material-ui/core\"\nimport Avatar from \"@material-ui/core/Avatar\"\nimport Container from \"@material-ui/core/Container\"\nimport {makeStyles} from \"@material-ui/core/styles\"\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\"\nimport React, {useCallback, useMemo} from \"react\"\nimport {FormComponent, FormItem} from \"../../components/form/form\"\nimport {PageComponent} from \"../../components/page\"\nimport {WrongPageComponent} from \"../../components/wrong-page\"\nimport {\n    MutationSubmitForgotPasswordArgs,\n    useSubmitForgotPasswordMutation,\n} from \"../../graphql/schema.generated\"\nimport {useQuery, useSnack} from \"../../hooks\"\nimport {goTo} from \"../../services/utils\"\n\nconst useStyles = makeStyles((theme) => ({\n    avatar: {\n        backgroundColor: theme.palette.secondary.main,\n        margin: theme.spacing(1),\n    },\n    paper: {\n        alignItems: \"center\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        marginTop: theme.spacing(8),\n    },\n}))\n\nconst formItems: FormItem[] = [\n    {\n        alignment: {xs: 12},\n        autoComplete: \"password\",\n        id: \".password\",\n        label: \"Password\",\n        required: true,\n        textType: \"password\",\n        type: \"text\",\n    },\n    {\n        alignment: {xs: 12},\n        autoComplete: \"password\",\n        id: \".confirmPassword\",\n        label: \"Confirm Password\",\n        required: true,\n        textType: \"password\",\n        type: \"text\",\n    },\n]\n\nexport interface PasswordResetPageViewProps {\n    onSubmit: (\n        form: MutationSubmitForgotPasswordArgs & {\n            confirmPassword: string\n        },\n    ) => Promise<void>\n}\nexport const PasswordResetPageView: React.FC<PasswordResetPageViewProps> = ({\n    onSubmit,\n}) => {\n    const classes = useStyles()\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Change Password\n                </Typography>\n\n                <FormComponent\n                    submitButtonTitle=\"Change Password\"\n                    formItems={formItems}\n                    onSubmit={onSubmit}\n                />\n            </div>\n        </Container>\n    )\n}\n\nexport interface PasswordResetPageProps {}\nexport const PasswordResetPage: React.FC<PasswordResetPageProps> = () => {\n    const {updateSnack} = useSnack()\n\n    const [mutate] = useSubmitForgotPasswordMutation({\n        onCompleted: (data) => {\n            if (data.submitForgotPassword) {\n                updateSnack({\n                    message: \"successfully changed password. redirecting...\",\n                    severity: \"success\",\n                })\n                setTimeout(() => {\n                    goTo(\"/account/login\")\n                }, 1000)\n            }\n        },\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n    })\n\n    const query = useQuery()\n    const argToken = useMemo(() => query.get(\"token\"), [query])\n\n    const onSubmit = useCallback(\n        async (\n            args: MutationSubmitForgotPasswordArgs & {\n                confirmPassword: string\n            },\n        ) => {\n            if (args.password === args.confirmPassword && argToken) {\n                mutate({\n                    variables: {\n                        email: args.email,\n                        password: args.confirmPassword,\n                        token: argToken,\n                    },\n                })\n            } else {\n                updateSnack({message: \"passwords do not match\"})\n            }\n        },\n        [argToken, mutate, updateSnack],\n    )\n\n    return (\n        <PageComponent\n            showFooter\n            title=\"Password Reset\"\n            rolePages={[\n                {redirect: \"/\", role: \"Submitter\"},\n                {redirect: \"/\", role: \"Volunteer\"},\n            ]}>\n            {argToken ? (\n                <PasswordResetPageView onSubmit={onSubmit} />\n            ) : (\n                <WrongPageComponent text=\"Invalid reset token\" />\n            )}\n        </PageComponent>\n    )\n}\n","import {Typography} from \"@material-ui/core\"\nimport Avatar from \"@material-ui/core/Avatar\"\nimport Container from \"@material-ui/core/Container\"\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\nimport Grid from \"@material-ui/core/Grid\"\nimport Link from \"@material-ui/core/Link\"\nimport {makeStyles} from \"@material-ui/core/styles\"\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\"\nimport React, {useCallback, useMemo, useState} from \"react\"\nimport {login} from \"../../client\"\nimport {FormComponent, FormItem} from \"../../components/form/form\"\nimport {PageComponent} from \"../../components/page\"\nimport {\n    MeDocument,\n    MutationRegisterArgs,\n    useRegisterMutation,\n    UserType,\n} from \"../../graphql/schema.generated\"\nimport {useQuery, useSnack} from \"../../hooks\"\nimport {goTo} from \"../../services/utils\"\n\nconst useStyles = makeStyles((theme) => ({\n    avatar: {\n        backgroundColor: theme.palette.secondary.main,\n        margin: theme.spacing(1),\n    },\n    paper: {\n        alignItems: \"center\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        marginTop: theme.spacing(8),\n    },\n}))\n\nexport interface RegisterPageViewProps {\n    onSubmit: (\n        form: MutationRegisterArgs & {\n            confirmPassword: string\n        },\n    ) => void\n}\nexport const RegisterPageView: React.FC<RegisterPageViewProps> = ({\n    onSubmit,\n}) => {\n    const classes = useStyles()\n    const query = useQuery()\n    const argUserType = useMemo(() => query.get(\"type\"), [query])\n    const registrationToken = query.get(\"token\")\n    const [userType, changeUserType] = useState<UserType>(\n        argUserType &&\n            (argUserType === \"Submitter\" || argUserType === \"Volunteer\")\n            ? argUserType\n            : \"Volunteer\",\n    )\n    const formItems = useMemo(\n        () =>\n            [\n                {\n                    alignment: {xs: 12},\n                    defaultValue: userType,\n                    id: \".type\",\n                    label: \"User Type\",\n                    options: {\n                        Submitter: \"Medical\",\n                        Volunteer: \"Maker\",\n                    },\n                    required: true,\n                    type: \"select\",\n                },\n\n                {\n                    alignment: {xs: 12},\n                    defaultValue: registrationToken || \"\",\n                    hint: \"generated for you by admin\",\n                    id: \".registrationToken\",\n                    label: \"Registration Token\",\n                    required: true,\n                    type: \"text\",\n                },\n\n                {\n                    alignment: {xs: 12},\n                    autoComplete: \"email\",\n                    hint:\n                        userType === \"Submitter\"\n                            ? \"this email can be viewed by makers to contact you\"\n                            : undefined,\n                    id: \".email\",\n                    label:\n                        userType === \"Submitter\"\n                            ? \"Email (public to volunteers)\"\n                            : \"Email\",\n                    required: true,\n                    type: \"text\",\n                },\n                {\n                    alignment: {xs: 12},\n                    autoComplete: \"password\",\n                    id: \".password\",\n                    label: \"Password\",\n                    required: true,\n                    textType: \"password\",\n                    type: \"text\",\n                },\n\n                {\n                    alignment: {xs: 12},\n                    autoComplete: \"password\",\n                    id: \".confirmPassword\",\n                    label: \"Confirm Password\",\n                    required: true,\n                    textType: \"password\",\n                    type: \"text\",\n                },\n\n                {\n                    alignment: {sm: 6, xs: 12},\n                    autoComplete: \"fname\",\n                    id: \".firstName\",\n                    label: \"First Name\",\n                    required: true,\n                    type: \"text\",\n                },\n\n                {\n                    alignment: {sm: 6, xs: 12},\n                    autoComplete: \"lname\",\n                    id: \".lastName\",\n                    label: \"Last Name\",\n                    required: true,\n                    type: \"text\",\n                },\n\n                ...(userType === \"Submitter\"\n                    ? [\n                          {\n                              alignment: {xs: 12},\n                              autoComplete: \"address\",\n                              freeSolo: true,\n                              hint:\n                                  \"address 3D printer owners should send parts\",\n                              id: \".address\",\n                              label: \"Shipping Address\",\n                              locationIds: {\n                                  latitude: \".geolocation.latitude\",\n                                  longitude: \".geolocation.longitude\",\n                              },\n                              required: true,\n                              type: \"location\",\n                          },\n                      ]\n                    : []),\n\n                {\n                    alignment: {xs: 12},\n                    autoComplete: \"address-level2\",\n                    hint: \"city your are based to find hospitals nearby\",\n                    id: userType === \"Submitter\" ? \".city\" : \".address\",\n                    label: \"City\",\n                    locationIds: {\n                        latitude: \".geolocation.latitude\",\n                        longitude: \".geolocation.longitude\",\n                    },\n                    required: true,\n                    type: \"location\",\n                },\n            ] as FormItem[],\n        [registrationToken, userType],\n    )\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    {`${\n                        userType === \"Submitter\" ? \"Medical\" : \"Maker\"\n                    } Register`}\n                </Typography>\n\n                <FormComponent\n                    submitButtonTitle=\"Register\"\n                    formItems={formItems}\n                    onUpdate={(id, value) => {\n                        if (id === \".type\") {\n                            changeUserType(value)\n                        }\n                    }}\n                    onSubmit={onSubmit}>\n                    <Grid style={{marginTop: 10}} container justify=\"flex-end\">\n                        <Grid item>\n                            <Link href=\"/account/login\" variant=\"body2\">\n                                Already have an account? Login\n                            </Link>\n                        </Grid>\n                    </Grid>\n                </FormComponent>\n            </div>\n        </Container>\n    )\n}\n\nexport interface RegisterPageProps {}\nexport const RegisterPage: React.FC<RegisterPageProps> = () => {\n    const {updateSnack} = useSnack()\n    const [mutate] = useRegisterMutation({\n        onCompleted: (data) => {\n            if (data.register) {\n                login(data.register)\n                goTo(\"/\")\n            }\n        },\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n        refetchQueries: [{query: MeDocument}],\n    })\n    const onSubmit = useCallback(\n        (\n            args: MutationRegisterArgs & {\n                confirmPassword: string\n            },\n        ) => {\n            if (args.password === args.confirmPassword) {\n                mutate({variables: {...args}})\n            } else {\n                updateSnack({message: \"passwords do not match\"})\n            }\n        },\n        [mutate, updateSnack],\n    )\n\n    return (\n        <PageComponent\n            showFooter\n            title=\"Register\"\n            rolePages={[\n                {redirect: \"/\", role: \"Submitter\"},\n                {redirect: \"/\", role: \"Volunteer\"},\n            ]}>\n            <RegisterPageView onSubmit={onSubmit} />\n        </PageComponent>\n    )\n}\n","import {Typography} from \"@material-ui/core\"\nimport Avatar from \"@material-ui/core/Avatar\"\nimport Container from \"@material-ui/core/Container\"\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\nimport {makeStyles} from \"@material-ui/core/styles\"\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\"\nimport React, {useCallback, useMemo, useState} from \"react\"\nimport {FormComponent, FormItem} from \"../../components/form/form\"\nimport {PageComponent} from \"../../components/page\"\nimport {WrongPageComponent} from \"../../components/wrong-page\"\nimport {\n    MeDocument,\n    MutationUpdateAccountArgs,\n    User,\n    useUpdateAccountMutation,\n} from \"../../graphql/schema.generated\"\nimport {useSnack} from \"../../hooks\"\nimport {removeNested} from \"../../services/utils\"\n\nconst useStyles = makeStyles((theme) => ({\n    avatar: {\n        backgroundColor: theme.palette.secondary.main,\n        margin: theme.spacing(1),\n    },\n    paper: {\n        alignItems: \"center\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        marginTop: theme.spacing(8),\n    },\n}))\n\nexport interface AccountUpdatePageViewProps {\n    changeIsPasswordUpdate: (isPasswordUpdate: boolean) => void\n    isPasswordUpdate: boolean\n    onSubmit: (\n        form: MutationUpdateAccountArgs & {\n            password?: {confirmPassword: string}\n        },\n    ) => void\n    user: User\n}\nexport const AccountUpdatePageView: React.FC<AccountUpdatePageViewProps> = ({\n    changeIsPasswordUpdate,\n    isPasswordUpdate,\n    onSubmit,\n    user: {address, firstName, lastName, latitude, longitude, type},\n}) => {\n    const classes = useStyles()\n\n    const formItems = useMemo(\n        () =>\n            [\n                {\n                    alignment: {xs: 12},\n                    autoComplete: \"password\",\n                    id: \".password.oldPassword\",\n                    label: \"Old Password\",\n                    required: isPasswordUpdate,\n                    textType: \"password\",\n                    type: \"text\",\n                },\n\n                {\n                    alignment: {xs: 12},\n                    autoComplete: \"password\",\n                    id: \".password.newPassword\",\n                    label: \"New Password\",\n                    required: isPasswordUpdate,\n                    textType: \"password\",\n                    type: \"text\",\n                },\n\n                {\n                    alignment: {xs: 12},\n                    autoComplete: \"password\",\n                    id: \".password.confirmPassword\",\n                    label: \"Confirm Password\",\n                    required: isPasswordUpdate,\n                    textType: \"password\",\n                    type: \"text\",\n                },\n\n                {\n                    alignment: {sm: 6, xs: 12},\n                    autoComplete: \"fname\",\n                    defaultValue: firstName,\n                    id: \".firstName\",\n                    label: \"First Name\",\n                    required: true,\n                    type: \"text\",\n                },\n\n                {\n                    alignment: {sm: 6, xs: 12},\n                    autoComplete: \"lname\",\n                    defaultValue: lastName,\n                    id: \".lastName\",\n                    label: \"Last Name\",\n                    required: true,\n                    type: \"text\",\n                },\n\n                ...(type === \"Submitter\"\n                    ? [\n                          {\n                              alignment: {xs: 12},\n                              autoComplete: \"address\",\n                              defaultValue: {\n                                  geometry: {\n                                      coordinates: [longitude, latitude],\n                                  },\n                                  properties: {\n                                      display_name: address,\n                                  },\n                              },\n                              freeSolo: true,\n                              hint:\n                                  \"address 3D printer owners should send parts\",\n                              id: \".address\",\n                              label: \"Shipping Address\",\n                              locationIds: {\n                                  latitude: \".geolocation.latitude\",\n                                  longitude: \".geolocation.longitude\",\n                              },\n                              required: true,\n                              type: \"location\",\n                          },\n                      ]\n                    : []),\n\n                {\n                    alignment: {xs: 12},\n                    autoComplete: \"address-level2\",\n                    defaultValue: {\n                        geometry: {\n                            coordinates: [longitude, latitude],\n                        },\n                        properties: {\n                            display_name: address,\n                        },\n                    },\n                    hint: \"city your are based to find hospitals nearby\",\n                    id: type === \"Submitter\" ? \".city\" : \".address\",\n                    label: \"City\",\n                    locationIds: {\n                        latitude: \".geolocation.latitude\",\n                        longitude: \".geolocation.longitude\",\n                    },\n\n                    required: true,\n                    type: \"location\",\n                },\n            ] as FormItem[],\n        [\n            address,\n            firstName,\n            isPasswordUpdate,\n            lastName,\n            latitude,\n            longitude,\n            type,\n        ],\n    )\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Update Account\n                </Typography>\n\n                <FormComponent\n                    submitButtonTitle=\"Update Account\"\n                    formItems={formItems}\n                    onUpdate={(id, value) => {\n                        if (id === \".password.oldPassword\") {\n                            changeIsPasswordUpdate(!!value)\n                        }\n                    }}\n                    onSubmit={onSubmit}\n                />\n            </div>\n        </Container>\n    )\n}\n\nexport interface AccountUpdatePageProps {}\nexport const AccountUpdatePage: React.FC<AccountUpdatePageProps> = () => {\n    const {updateSnack} = useSnack()\n    const [isPasswordUpdate, changeIsPasswordUpdate] = useState(false)\n    const [mutate] = useUpdateAccountMutation({\n        onCompleted: (data) => {\n            if (data.updateAccount) {\n                updateSnack({\n                    message: \"successfully updated account\",\n                    severity: \"success\",\n                })\n            }\n        },\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n        refetchQueries: [{query: MeDocument}],\n    })\n\n    const onSubmitAccount = useCallback(\n        (args: MutationUpdateAccountArgs) => {\n            mutate({\n                variables: removeNested(args, \".password.confirmPassword\"),\n            })\n        },\n        [mutate],\n    )\n\n    const onSubmit = useCallback(\n        async (\n            args: MutationUpdateAccountArgs & {\n                password?: {confirmPassword: string}\n            },\n        ) => {\n            if (isPasswordUpdate && args.password) {\n                if (\n                    args.password.newPassword === args.password.confirmPassword\n                ) {\n                    onSubmitAccount(args)\n                } else {\n                    updateSnack({message: \"passwords do not match\"})\n                }\n            } else {\n                onSubmitAccount({...args, password: undefined})\n            }\n        },\n        [onSubmitAccount, updateSnack, isPasswordUpdate],\n    )\n\n    const updatePage = useCallback(\n        (user: User) => {\n            return (\n                <AccountUpdatePageView\n                    changeIsPasswordUpdate={changeIsPasswordUpdate}\n                    user={user}\n                    isPasswordUpdate={isPasswordUpdate}\n                    onSubmit={onSubmit}\n                />\n            )\n        },\n        [isPasswordUpdate, onSubmit],\n    )\n\n    return (\n        <PageComponent\n            showFooter\n            title=\"Update Account\"\n            rolePages={[\n                {\n                    component: updatePage,\n                    role: \"Volunteer\",\n                },\n                {\n                    component: updatePage,\n                    role: \"Submitter\",\n                },\n            ]}>\n            <WrongPageComponent text=\"Must be signed in to update account\" />\n        </PageComponent>\n    )\n}\n","import * as React from \"react\"\nimport {MarkdownComponent} from \"../components/markdown\"\nimport {PageComponent} from \"../components/page\"\n\nexport interface ContactPageProps {}\nexport const ContactPage: React.FC<ContactPageProps> = () => (\n    <PageComponent showFooter title=\"Contact\">\n        <MarkdownComponent url=\"contact.md\" />\n    </PageComponent>\n)\n","import React from \"react\"\nimport {PageComponent} from \"../components/page\"\nimport {WrongPageComponent} from \"../components/wrong-page\"\nimport {SubmissionSortContainer, VolunteerSubmissions} from \"./submissions\"\n\nexport interface FindPageViewProps {}\nexport const FindPageView: React.FC<FindPageViewProps> = () => {\n    return (\n        <div style={{padding: 10}}>\n            <VolunteerSubmissions />\n        </div>\n    )\n}\n\nexport interface FindPageProps {}\nexport const FindPage: React.FC<FindPageProps> = () => {\n    return (\n        <SubmissionSortContainer.Provider>\n            <div>\n                <PageComponent\n                    disableHide={false}\n                    showFooter\n                    title=\"Home\"\n                    rolePages={[\n                        {\n                            component: () => <FindPageView />,\n                            role: \"Volunteer\",\n                        },\n                    ]}>\n                    <WrongPageComponent text=\"Must be signed in as Volunteer to view submissions\" />\n                </PageComponent>\n                <br />\n            </div>\n        </SubmissionSortContainer.Provider>\n    )\n}\n","import {\n    createStyles,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemText,\n    makeStyles,\n    Theme,\n} from \"@material-ui/core\"\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\"\nimport * as clipboard from \"clipboard-polyfill\"\nimport React from \"react\"\nimport {useSnack} from \"../hooks\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        list: {\n            backgroundColor: theme.palette.background.paper,\n        },\n    }),\n)\n\nexport interface InfoListItem {\n    action:\n        | {type: \"copy\"; value?: string} // if value is undefined used then copy description\n        | {callback: (id?: string) => void; type: \"callback\"}\n    actionItem?: JSX.Element\n    description: string | number | Date\n    id?: string\n    image?: string\n    name: string\n}\n\nexport interface InfoListComponentProps {\n    items: InfoListItem[]\n    style?: React.CSSProperties\n}\nexport const InfoListComponent: React.FC<InfoListComponentProps> = ({\n    items,\n    style,\n}) => {\n    const classes = useStyles()\n    const {updateSnack} = useSnack()\n\n    return (\n        <List\n            component=\"nav\"\n            aria-labelledby=\"nested-list-subheader\"\n            style={style}\n            className={classes.list}>\n            {items.map(({action, actionItem, description, id, image, name}) => {\n                return (\n                    <ListItem\n                        button\n                        onClick={() => {\n                            if (action.type === \"copy\") {\n                                clipboard.writeText(\n                                    action.value || String(description),\n                                )\n\n                                updateSnack({\n                                    message: \"copied to clipboard\",\n                                    severity: \"info\",\n                                })\n                            } else {\n                                action.callback(id)\n                            }\n                        }}\n                        key={name}>\n                        {image && (\n                            <ListItemAvatar>\n                                <img\n                                    style={{\n                                        // height: 150,\n                                        marginRight: 10,\n                                        width: 150,\n                                    }}\n                                    src={image}\n                                    alt={image}\n                                />\n                            </ListItemAvatar>\n                        )}\n                        <ListItemText\n                            primaryTypographyProps={{style: {fontSize: \"120%\"}}}\n                            primary={name}\n                            secondary={String(description)}\n                        />\n                        {actionItem && (\n                            <ListItemSecondaryAction>\n                                {actionItem}\n                            </ListItemSecondaryAction>\n                        )}\n                    </ListItem>\n                )\n            })}\n        </List>\n    )\n}\n","import Step from \"@material-ui/core/Step\"\nimport StepConnector from \"@material-ui/core/StepConnector\"\nimport {StepIconProps} from \"@material-ui/core/StepIcon\"\nimport StepLabel from \"@material-ui/core/StepLabel\"\nimport Stepper from \"@material-ui/core/Stepper\"\nimport {\n    createStyles,\n    makeStyles,\n    Theme,\n    withStyles,\n} from \"@material-ui/core/styles\"\nimport clsx from \"clsx\"\nimport React, {useCallback, useEffect, useMemo} from \"react\"\nimport {theme} from \"./theme\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        button: {\n            marginRight: theme.spacing(1),\n        },\n        instructions: {\n            marginBottom: theme.spacing(1),\n            marginTop: theme.spacing(1),\n        },\n        root: {\n            width: \"100%\",\n        },\n    }),\n)\n\nexport interface StepperStep {\n    icon: JSX.Element\n    label: string\n}\n\nexport interface CustomizedSteppersProps {\n    colors?: {color1: string; color2: string; color3: string}\n    currentStep: number\n    steps: StepperStep[]\n}\nexport const CustomizedSteppers: React.FC<CustomizedSteppersProps> = ({\n    steps,\n    currentStep,\n    colors: {color1, color2, color3} = {\n        color1: theme.palette.primary.main,\n        color2: theme.palette.primary.main,\n        color3: theme.palette.primary.main,\n    },\n}) => {\n    const classes = useStyles()\n    const [activeStep, setActiveStep] = React.useState(1)\n\n    const ColorLibConnector = useMemo(() => {\n        return withStyles({\n            active: {\n                \"& $line\": {\n                    backgroundImage: `linear-gradient( 95deg,${color1} 0%,${color2} 50%,${color3} 100%)`,\n                },\n            },\n            alternativeLabel: {\n                top: 22,\n            },\n            completed: {\n                \"& $line\": {\n                    backgroundImage: `linear-gradient( 95deg,${color1} 0%,${color2} 50%,${color3} 100%)`,\n                },\n            },\n            line: {\n                backgroundColor: \"#eaeaf0\",\n                border: 0,\n                borderRadius: 1,\n                height: 3,\n            },\n        })(StepConnector)\n    }, [color1, color2, color3])\n\n    const icons: {[index: string]: React.ReactElement} = useMemo(() => {\n        const object: {[key: number]: React.ReactElement} = {}\n        steps.forEach((step, i) => {\n            object[i + 1] = step.icon\n        })\n        return object\n    }, [steps])\n\n    const ColorLibStepIcon = useCallback(\n        (props: StepIconProps) => {\n            const classes = makeStyles({\n                active: {\n                    backgroundImage: `linear-gradient( 136deg, ${color1} 0%, ${color2} 50%, ${color3} 100%)`,\n                    boxShadow: \"0 4px 10px 0 rgba(0,0,0,.25)\",\n                },\n                completed: {\n                    backgroundImage: `linear-gradient( 136deg, ${color1} 0%, ${color2} 50%, ${color3} 100%)`,\n                },\n                root: {\n                    alignItems: \"center\",\n                    backgroundColor: \"#ccc\",\n                    borderRadius: \"50%\",\n                    color: \"#fff\",\n                    display: \"flex\",\n                    height: 50,\n                    justifyContent: \"center\",\n                    width: 50,\n                    zIndex: 1,\n                },\n            })()\n            const {active, completed} = props\n\n            return (\n                <div\n                    className={clsx(classes.root, {\n                        [classes.active]: active,\n                        [classes.completed]: completed,\n                    })}>\n                    {icons[String(props.icon)]}\n                </div>\n            )\n        },\n        [color1, color2, color3, icons],\n    )\n\n    useEffect(() => {\n        setActiveStep(currentStep)\n    }, [currentStep])\n    return (\n        <div className={classes.root}>\n            <Stepper\n                alternativeLabel\n                activeStep={activeStep}\n                connector={<ColorLibConnector />}>\n                {steps.map((step) => (\n                    <Step key={step.label}>\n                        <StepLabel StepIconComponent={ColorLibStepIcon}>\n                            {step.label}\n                        </StepLabel>\n                    </Step>\n                ))}\n            </Stepper>\n        </div>\n    )\n}\n","import {Link} from \"@material-ui/core\"\nimport Card from \"@material-ui/core/Card\"\nimport CardContent from \"@material-ui/core/CardContent\"\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\"\nimport Typography from \"@material-ui/core/Typography\"\nimport React from \"react\"\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        card: {\n            alignItems: \"column\",\n            display: \"flex\",\n            textDecoration: \"none\",\n        },\n        content: {\n            flex: \"1 0 auto\",\n        },\n        details: {\n            display: \"flex\",\n            flexDirection: \"column\",\n        },\n\n        image: {\n            display: \"flex\",\n            flex: 1,\n            justifyContent: \"center\",\n            marginTop: 10,\n        },\n\n        link: {\n            textDecoration: \"none\",\n        },\n    }),\n)\n\nexport interface CardOptionComponentProps {\n    path: string\n    subtitle: string\n    title: string\n}\n\nexport const CardOptionComponent: React.FunctionComponent<CardOptionComponentProps> = ({\n    path,\n    subtitle,\n    title,\n}) => {\n    const classes = useStyles()\n\n    return (\n        <Link href={path}>\n            <Card className={classes.card}>\n                <div className={classes.details}>\n                    <CardContent className={classes.content}>\n                        <Typography component=\"h3\" variant=\"h5\">\n                            {title}\n                        </Typography>\n                        <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                            {subtitle}\n                        </Typography>\n                    </CardContent>\n                </div>\n            </Card>\n        </Link>\n    )\n}\n","import {Grid, Grow} from \"@material-ui/core\"\nimport {makeStyles} from \"@material-ui/styles\"\nimport * as React from \"react\"\nimport {CardOptionComponent} from \"../components/card-option\"\nimport {PageComponent} from \"../components/page\"\n\nconst useStyles = makeStyles(() => ({\n    container: {\n        display: \"flex\",\n        flexGrow: 1,\n        justifyContent: \"center\",\n        padding: 10,\n    },\n}))\n\nexport interface LegalPageProps {}\nexport const LegalPage: React.FC<LegalPageProps> = () => {\n    const classes = useStyles()\n    return (\n        <PageComponent showFooter title=\"Legal\">\n            <div className={classes.container}>\n                {/* End hero unit */}\n                <Grid container spacing={4}>\n                    <Grid item xs={12} sm={6} md={4}>\n                        <Grow timeout={500} in>\n                            <div>\n                                <CardOptionComponent\n                                    title=\"Terms of Service\"\n                                    subtitle=\"Everything regarding how you can use the platform\"\n                                    path=\"/legal/terms-of-service\"\n                                />\n                            </div>\n                        </Grow>\n                    </Grid>\n\n                    <Grid item xs={12} sm={6} md={4}>\n                        <Grow timeout={1000} in>\n                            <div>\n                                <CardOptionComponent\n                                    title=\"Privacy Policy\"\n                                    subtitle=\"Everything regarding how we handle your data\"\n                                    path=\"/legal/privacy-policy\"\n                                />\n                            </div>\n                        </Grow>\n                    </Grid>\n\n                    <Grid item xs={12} sm={6} md={4}>\n                        <Grow timeout={1000} in>\n                            <div>\n                                <CardOptionComponent\n                                    title=\"Disclaimer\"\n                                    subtitle=\"Everything regarding Disclaimer\"\n                                    path=\"/legal/disclaimer\"\n                                />\n                            </div>\n                        </Grow>\n                    </Grid>\n                </Grid>\n            </div>\n        </PageComponent>\n    )\n}\n","import * as React from \"react\"\nimport {useState} from \"react\"\nimport {MarkdownComponent} from \"../../components/markdown\"\nimport {PageComponent} from \"../../components/page\"\n\nexport interface DisclaimerPageProps {}\nexport const DisclaimerPage: React.FC<DisclaimerPageProps> = () => {\n    const [showFooter, changeShowFooter] = useState<boolean>()\n    return (\n        <PageComponent\n            disableHide={false}\n            showFooter={showFooter}\n            title=\"Disclaimer\">\n            <MarkdownComponent\n                onFinish={() => changeShowFooter(true)}\n                url=\"disclaimer.md\"\n            />\n        </PageComponent>\n    )\n}\n","import * as React from \"react\"\nimport {useState} from \"react\"\nimport {MarkdownComponent} from \"../../components/markdown\"\nimport {PageComponent} from \"../../components/page\"\n\nexport interface FaqPageProps {}\nexport const FaqPage: React.FC<FaqPageProps> = () => {\n    const [showFooter, changeShowFooter] = useState<boolean>()\n    return (\n        <PageComponent disableHide={false} showFooter={showFooter} title=\"FAQ\">\n            <MarkdownComponent\n                onFinish={() => changeShowFooter(true)}\n                url=\"faq.md\"\n            />\n        </PageComponent>\n    )\n}\n","import * as React from \"react\"\nimport {useState} from \"react\"\nimport {MarkdownComponent} from \"../../components/markdown\"\nimport {PageComponent} from \"../../components/page\"\n\nexport interface PrivacyPolicyPageProps {}\nexport const PrivacyPolicyPage: React.FC<PrivacyPolicyPageProps> = () => {\n    const [showFooter, changeShowFooter] = useState<boolean>()\n    return (\n        <PageComponent\n            disableHide={false}\n            showFooter={showFooter}\n            title=\"Privacy Policy\">\n            <MarkdownComponent\n                onFinish={() => changeShowFooter(true)}\n                url=\"privacy-policy.md\"\n            />\n        </PageComponent>\n    )\n}\n","import * as React from \"react\"\nimport {useState} from \"react\"\nimport {MarkdownComponent} from \"../../components/markdown\"\nimport {PageComponent} from \"../../components/page\"\n\nexport interface TermsOfServicePageProps {}\nexport const TermsOfServicePage: React.FC<TermsOfServicePageProps> = () => {\n    const [showFooter, changeShowFooter] = useState<boolean>()\n    return (\n        <PageComponent\n            disableHide={false}\n            showFooter={showFooter}\n            title=\"Terms of Service\">\n            <MarkdownComponent\n                onFinish={() => changeShowFooter(true)}\n                url=\"terms-of-service.md\"\n            />\n        </PageComponent>\n    )\n}\n","import Paper from \"@material-ui/core/Paper\"\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\"\nimport Table from \"@material-ui/core/Table\"\nimport TableBody from \"@material-ui/core/TableBody\"\nimport TableCell from \"@material-ui/core/TableCell\"\nimport TableContainer from \"@material-ui/core/TableContainer\"\nimport TableHead from \"@material-ui/core/TableHead\"\nimport TablePagination from \"@material-ui/core/TablePagination\"\nimport TableRow from \"@material-ui/core/TableRow\"\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\"\nimport Typography from \"@material-ui/core/Typography\"\nimport React from \"react\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        paper: {\n            marginBottom: theme.spacing(2),\n            width: \"100%\",\n        },\n\n        root: {\n            width: \"100%\",\n        },\n\n        table: {\n            maxHeight: 500,\n        },\n\n        visuallyHidden: {\n            border: 0,\n            clip: \"rect(0 0 0 0)\",\n            height: 1,\n            margin: -1,\n            overflow: \"hidden\",\n            padding: 0,\n            position: \"absolute\",\n            top: 20,\n            width: 1,\n        },\n    }),\n)\n\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1\n    }\n    return 0\n}\n\ntype Order = \"asc\" | \"desc\"\n\nconst getComparator = <T extends object>(\n    order: Order,\n    orderBy: keyof T,\n): ((a: T, b: T) => number) =>\n    order === \"desc\"\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy)\n\nfunction stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\n    const stabilizedThis = array.map((el, index) => [el, index] as [T, number])\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0])\n        if (order !== 0) return order\n        return a[1] - b[1]\n    })\n    return stabilizedThis.map((el) => el[0])\n}\n\nexport interface HeadCell<T> {\n    disablePadding: boolean\n    id: keyof T\n    label: string\n    numeric: boolean\n}\n\ninterface EnhancedTableHeadProps<T> {\n    classes: ReturnType<typeof useStyles>\n    headCells: HeadCell<T>[]\n    onRequestSort: (event: React.MouseEvent<unknown>, property: keyof T) => void\n    order: Order\n    orderBy: keyof T\n}\n\nfunction EnhancedTableHead<T>(props: EnhancedTableHeadProps<T>) {\n    const {classes, headCells, onRequestSort, order, orderBy} = props\n    const createSortHandler = (property: keyof T) => (\n        event: React.MouseEvent<unknown>,\n    ) => {\n        onRequestSort(event, property)\n    }\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\" />\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={String(headCell.id)}\n                        align={headCell.numeric ? \"right\" : \"left\"}\n                        padding={headCell.disablePadding ? \"none\" : \"default\"}\n                        sortDirection={orderBy === headCell.id ? order : false}>\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : \"asc\"}\n                            onClick={createSortHandler(headCell.id)}>\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                                    {order === \"desc\"\n                                        ? \"sorted descending\"\n                                        : \"sorted ascending\"}\n                                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    )\n}\n\ninterface EnhancedTableToolbarProps {\n    title: string\n    toolbarBarItems?: JSX.Element[]\n}\n\nconst EnhancedTableToolbar = ({\n    title,\n    toolbarBarItems = [],\n}: EnhancedTableToolbarProps) => {\n    return (\n        <div style={{display: \"flex\", flexDirection: \"row\"}}>\n            <div style={{flex: 0.99, margin: 20}}>\n                <Typography\n                    style={{textAlign: \"start\"}}\n                    variant=\"h6\"\n                    id=\"tableTitle\">\n                    {title}\n                </Typography>\n            </div>\n\n            <div style={{flex: 0.01, margin: 20}}>{toolbarBarItems}</div>\n        </div>\n    )\n}\n\nexport interface EnhancedTableProps<T extends ComparableObject> {\n    customItems?: ((object: T) => JSX.Element | null)[]\n    headCells: HeadCell<T>[]\n    initialOrderProperty: keyof T\n    nameProperty: keyof T\n    onRowClick: (row: T) => void\n    rows: T[]\n    title: string\n    toolbarBarItems?: JSX.Element[]\n}\nexport type ComparableObject = {[key: string]: number | string | Date}\nexport function EnhancedTable<T extends ComparableObject>({\n    initialOrderProperty,\n    nameProperty,\n    rows,\n    headCells,\n    title,\n    onRowClick,\n    customItems = [],\n    toolbarBarItems = [],\n}: EnhancedTableProps<T>) {\n    const classes = useStyles()\n    const [order, setOrder] = React.useState<Order>(\"desc\")\n    const [orderBy, setOrderBy] = React.useState<keyof T>(initialOrderProperty)\n    const [page, setPage] = React.useState(0)\n    const [rowsPerPage, setRowsPerPage] = React.useState(5)\n\n    const handleRequestSort = (property: keyof T) => {\n        const isAsc = orderBy === property && order === \"asc\"\n        setOrder(isAsc ? \"desc\" : \"asc\")\n        setOrderBy(property)\n    }\n\n    const handleChangePage = (newPage: number) => {\n        setPage(newPage)\n    }\n\n    const handleChangeRowsPerPage = (\n        event: React.ChangeEvent<HTMLInputElement>,\n    ) => {\n        setRowsPerPage(parseInt(event.target.value, 10))\n        setPage(0)\n    }\n\n    const emptyRows =\n        rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage)\n\n    return (\n        <div className={classes.root}>\n            <Paper className={classes.paper}>\n                <EnhancedTableToolbar\n                    title={title}\n                    toolbarBarItems={toolbarBarItems}\n                />\n                <TableContainer className={classes.table}>\n                    <Table\n                        aria-labelledby=\"tableTitle\"\n                        size=\"medium\"\n                        aria-label=\"enhanced table\">\n                        <EnhancedTableHead\n                            headCells={headCells}\n                            classes={classes}\n                            order={order}\n                            orderBy={orderBy}\n                            onRequestSort={(_, property) =>\n                                handleRequestSort(property)\n                            }\n                        />\n                        <TableBody>\n                            {stableSort(rows, getComparator<T>(order, orderBy))\n                                .slice(\n                                    page * rowsPerPage,\n                                    page * rowsPerPage + rowsPerPage,\n                                )\n                                .map((row) => {\n                                    return (\n                                        <TableRow\n                                            hover\n                                            tabIndex={-1}\n                                            key={String(\n                                                row.id || row[nameProperty],\n                                            )}>\n                                            <TableCell\n                                                style={{paddingRight: 10}}\n                                                component=\"th\"\n                                                scope=\"row\"\n                                                padding=\"checkbox\">\n                                                {customItems.map(\n                                                    (customItem) => {\n                                                        return customItem(row)\n                                                    },\n                                                )}\n                                            </TableCell>\n\n                                            <TableCell\n                                                onClick={() => onRowClick(row)}\n                                                component=\"th\"\n                                                scope=\"row\"\n                                                padding=\"none\">\n                                                {row[nameProperty]}\n                                            </TableCell>\n                                            {headCells\n                                                .filter((property) => {\n                                                    return (\n                                                        property.id !==\n                                                        nameProperty\n                                                    )\n                                                })\n                                                .map((rowName) => {\n                                                    return (\n                                                        <TableCell\n                                                            key={rowName.id.toString()}\n                                                            align=\"right\">\n                                                            {row[rowName.id]}\n                                                        </TableCell>\n                                                    )\n                                                })}\n                                        </TableRow>\n                                    )\n                                })}\n                            {emptyRows > 0 && (\n                                <TableRow style={{height: 53 * emptyRows}}>\n                                    <TableCell colSpan={6} />\n                                </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[5, 10, 20, 30]}\n                    component=\"div\"\n                    count={rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={(_, page) => handleChangePage(page)}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n        </div>\n    )\n}\n","export const downloadString = (\n    text: string,\n    fileType: string,\n    fileName: string,\n) => {\n    const blob = new Blob([text], {type: fileType})\n    const a = document.createElement(\"a\")\n    a.download = fileName\n    a.href = URL.createObjectURL(blob)\n    a.dataset.downloadurl = [fileType, a.download, a.href].join(\":\")\n    a.style.display = \"none\"\n    document.body.appendChild(a)\n    a.click()\n    document.body.removeChild(a)\n    setTimeout(() => {\n        URL.revokeObjectURL(a.href)\n    }, 1500)\n}\n","/* eslint-disable no-restricted-globals */\n\nimport {assert} from \"@dynamo/common\"\nimport {\n    Button,\n    Card,\n    CardContent,\n    createStyles,\n    makeStyles,\n    Typography,\n} from \"@material-ui/core\"\nimport CardMedia from \"@material-ui/core/CardMedia\"\nimport CloudDownloadIcon from \"@material-ui/icons/CloudDownload\"\nimport React, {useCallback, useMemo, useState} from \"react\"\nimport {createContainer, useContainer} from \"unstated-next\"\nimport {FileItemPreview} from \"../components/file-item-preview\"\nimport {FormComponent, FormItem} from \"../components/form/form\"\nimport {InfoListComponent, InfoListItem} from \"../components/info-list\"\nimport {ModalComponent} from \"../components/modal\"\nimport {PageComponent, RolePage} from \"../components/page\"\nimport {ComparableObject, EnhancedTable, HeadCell} from \"../components/table\"\nimport {WrongPageComponent} from \"../components/wrong-page\"\nimport {\n    File,\n    Job,\n    JobProgress,\n    JobType,\n    Submission,\n    useCancelSubmissionMutation,\n    useCreateNewJobFromSubmissionMutation,\n    useMeQuery,\n    UserType,\n    useSubmissionJobsQuery,\n    useSubmissionQuery,\n    useToggleJobReceivedMutation,\n} from \"../graphql/schema.generated\"\nimport {useDateFromNow, useQuery, useSnack} from \"../hooks\"\nimport {downloadString} from \"../services/download\"\nimport {jsonToCsv} from \"../services/jsonToCsv\"\nimport {goTo, goToNewTab} from \"../services/utils\"\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        submissionPageView: {\n            maxWidth: 1200,\n            minWidth: 500,\n            textAlign: \"center\",\n            width: \"50vw\",\n        },\n\n        viewOriginalSubmissionButton: {marginBottom: 35},\n    }),\n)\n\nconst headCells: HeadCell<Job>[] = [\n    {\n        disablePadding: true,\n        id: \"id\",\n        label: \"Job ID\",\n        numeric: false,\n    },\n    {disablePadding: true, id: \"quantity\", label: \"Quantity\", numeric: true},\n    {disablePadding: false, id: \"progress\", label: \"Progress\", numeric: true},\n    {disablePadding: false, id: \"type\", label: \"Type\", numeric: true},\n]\n\nexport interface SubmissionInfoProps {\n    submission: Submission\n}\nexport const SubmissionInfo: React.FC<SubmissionInfoProps> = ({\n    submission: {\n        address,\n        createdAt,\n        description,\n        distance,\n        files: {assemblyUrl},\n        id,\n        quantity,\n        submitter,\n    },\n}) => {\n    const date = useDateFromNow(createdAt)\n    return (\n        <InfoListComponent\n            items={\n                [\n                    {\n                        action: {type: \"copy\"},\n                        description: id,\n                        name: \"Id\",\n                    },\n                    {\n                        action: {type: \"copy\"},\n                        description: quantity,\n                        name: \"Quantity\",\n                    },\n                    {\n                        action: {type: \"copy\"},\n                        description: date,\n                        name: \"Created\",\n                    },\n                    {\n                        action: {type: \"copy\"},\n                        description: description ?? \"N/A\",\n                        name: \"Description\",\n                    },\n\n                    {\n                        action: {\n                            callback: () => {\n                                if (assemblyUrl) {\n                                    goToNewTab(assemblyUrl)\n                                }\n                            },\n                            type: \"callback\",\n                        },\n                        description: assemblyUrl || \"N/A\",\n                        name: \"Assembly Information\",\n                    },\n\n                    {\n                        action: {type: \"copy\", value: submitter.email},\n                        description: `${submitter.firstName} ${submitter.lastName} <${submitter.email}>`,\n                        name: \"Submitter\",\n                    },\n                    {\n                        action: {type: \"copy\"},\n                        description: address,\n                        name: `Shipping Address (Distance: ${distance.toFixed(\n                            1,\n                        )} miles)`,\n                    },\n                ] as InfoListItem[]\n            }\n        />\n    )\n}\n\nconst useMyUserType = () => {\n    const {data, loading} = useMeQuery()\n    if (loading) {\n        return undefined\n    }\n    assert(data?.me, `Couldn't load my user`)\n    return data.me.user.type\n}\n\nexport interface SubmissionActionsProps {\n    submission: Submission\n}\nexport const SubmissionActions: React.FC<SubmissionActionsProps> = ({\n    submission,\n}) => {\n    const {id, name} = submission\n    const userType = useMyUserType()\n\n    const {updateSnack} = useSnack()\n    const [cancel] = useCancelSubmissionMutation({\n        onCompleted: (cancelResponse) => {\n            if (cancelResponse.cancelSubmission) {\n                goTo(\"/\")\n            }\n        },\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n        variables: {id},\n    })\n    const onRemoveSubmission = useCallback(() => {\n        // eslint-disable-next-line no-alert\n        if (!confirm(`Are you sure you want to remove submission \"${name}\"?`)) {\n            return\n        }\n        cancel()\n    }, [cancel, name])\n\n    switch (userType) {\n        case \"Submitter\":\n            return (\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={onRemoveSubmission}>\n                    Remove Submission\n                </Button>\n            )\n        case \"Volunteer\":\n            return <CreateNewJobModal {...{submission}} />\n        default:\n            return <div>Loading...</div>\n    }\n}\n\nexport interface SubmissionTitleProps {\n    submission: Submission\n}\nexport const SubmissionTitle: React.FC<SubmissionTitleProps> = ({\n    submission: {\n        createdAt,\n        files: {preview},\n        name,\n    },\n}) => {\n    const date = useDateFromNow(createdAt)\n\n    return (\n        <div>\n            <Typography component=\"h5\" variant=\"h5\">\n                {name}\n            </Typography>\n            <Typography variant=\"subtitle1\">{date}</Typography>\n            {preview && (\n                <CardMedia\n                    style={{borderRadius: 20, marginTop: 10}}\n                    component=\"img\"\n                    image={preview.presignedUrl}\n                    title={name}\n                />\n            )}\n        </div>\n    )\n}\n\nexport interface SubmissionPageViewProps {\n    showJobs?: boolean\n    submission: Submission\n}\nexport const SubmissionPageView: React.FC<SubmissionPageViewProps> = ({\n    showJobs = false,\n    submission,\n}) => {\n    const classes = useStyles()\n\n    return (\n        <div className={classes.submissionPageView}>\n            <Card>\n                <CardContent>\n                    <SubmissionTitle {...{submission}} />\n\n                    {showJobs && <SubmissionJobs {...{submission}} />}\n                    <FileItemPreview\n                        items={[\n                            ...submission.files.modelFiles.map((file) => {\n                                return {file, type: \"stl\" as \"stl\"}\n                            }),\n                            ...submission.files.laserCuttingFiles.map(\n                                (file) => {\n                                    return {file, type: \"dxf\" as \"dxf\"}\n                                },\n                            ),\n                        ]}\n                    />\n                    <SubmissionInfo {...{submission}} />\n                    <SubmissionActions {...{submission}} />\n                </CardContent>\n            </Card>\n        </div>\n    )\n}\n\nexport interface SubmissionPageProps {}\nexport const SubmissionPage: React.FC<SubmissionPageProps> = () => {\n    const {updateSnack} = useSnack()\n    const id = useQuery().get(\"id\")\n\n    assert(id, `Submission id must be set.`)\n\n    const {data} = useSubmissionQuery({\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n        variables: {id},\n    })\n\n    const submissionPage = useCallback(\n        (userType: UserType, showJobs?: boolean): RolePage => ({\n            component: () => (\n                <div style={{display: \"flex\", justifyContent: \"center\"}}>\n                    {data?.submission && (\n                        <SubmissionPageView\n                            submission={data?.submission}\n                            {...{showJobs}}\n                        />\n                    )}\n                </div>\n            ),\n            role: userType,\n        }),\n        [data],\n    )\n\n    return (\n        <SubmissionFilesContainer.Provider>\n            <PageComponent\n                disableHide={false}\n                showFooter\n                title=\"Submission\"\n                rolePages={[\n                    submissionPage(\"Submitter\", true),\n                    submissionPage(\"Volunteer\"),\n                ]}>\n                <WrongPageComponent text=\"Must be signed in to view Job\" />\n            </PageComponent>\n        </SubmissionFilesContainer.Provider>\n    )\n}\n\nconst SubmissionFilesContainer = createContainer(() => {\n    const [jobType, setJobType] = useState<JobType>(\"Printing\")\n\n    return {jobType, setJobType}\n})\n\nexport interface SubmissionSelectorProps {\n    label: string\n    submission: Submission\n}\nexport const SubmissionSelector: React.FC<SubmissionSelectorProps> = ({\n    label,\n    submission,\n}) => {\n    const {jobType} = useContainer(SubmissionFilesContainer)\n\n    const [files, renderType] = useMemo(() => {\n        switch (jobType) {\n            case \"LaserCutting\":\n                return [submission.files.laserCuttingFiles, \"dxf\"] as const\n            case \"Printing\":\n                return [submission.files.modelFiles, \"stl\"] as const\n            default:\n                return [[] as File[], undefined] as const\n        }\n    }, [submission.files, jobType])\n\n    if (renderType === undefined) {\n        return null\n    }\n\n    return (\n        <>\n            <Typography gutterBottom>{label}</Typography>\n            <FileItemPreview\n                items={files.map((file) => {\n                    return {file, type: renderType}\n                })}\n            />\n        </>\n    )\n}\n\n/**\n * TODO: There is currently a bug that exists which is not worth fixing at the moment.\n * When you create a job, the max value of the job type doesn't update.\n *\n * To reproduce, create a job from a submission where the # of laser cutting quantity needed is less than model quantity.\n * Then, go to the model quantity and set the quantity to max, then change the type of the job.\n * The internal state will hold the previous job type.\n */\nexport interface CreateNewJobModalProps {\n    submission: Submission\n}\nexport const CreateNewJobModal: React.FC<CreateNewJobModalProps> = ({\n    submission,\n}) => {\n    const {jobType, setJobType} = useContainer(SubmissionFilesContainer)\n\n    const laserCutterOption = submission.files.laserCuttingFiles?.length\n        ? {LaserCutting: \"Laser Cutting\"}\n        : {}\n    const printingOption = submission.files.modelFiles?.length\n        ? {Printing: \"3D Printing\"}\n        : {}\n\n    const maxQuantity = useMemo(() => {\n        switch (jobType) {\n            case \"LaserCutting\":\n                return submission.progress.laserCuttingQuantity\n            case \"Printing\":\n                return submission.progress.modelQuantity\n            default:\n                return submission.quantity\n        }\n    }, [jobType, submission.progress, submission.quantity])\n    const submitFormItems = useMemo<FormItem[]>(\n        () =>\n            [\n                {\n                    alignment: {xs: 12},\n                    defaultValue: submission.files.laserCuttingFiles?.length\n                        ? \"LaserCutting\"\n                        : \"Printing\",\n                    id: \".type\",\n                    label: \"Job Type\",\n                    options: {\n                        ...laserCutterOption,\n                        ...printingOption,\n                    },\n                    required: true,\n                    type: \"select\",\n                },\n                {\n                    alignment: {xs: 12},\n                    id: \".models\",\n                    label: \"Model Preview...\",\n                    render: ({label}) => (\n                        <SubmissionSelector {...{label, submission}} />\n                    ),\n                    type: \"custom\",\n                },\n                {\n                    alignment: {xs: 12},\n                    defaultValue: 5,\n                    ending: \"Parts\",\n                    id: \".quantity\",\n                    label: \"Quantity\",\n                    max: maxQuantity,\n                    min: 1,\n                    step: 1,\n                    type: \"slider\",\n                },\n            ] as FormItem[],\n        [laserCutterOption, maxQuantity, printingOption, submission],\n    )\n\n    const [mutate] = useCreateNewJobFromSubmissionMutation({\n        onCompleted: ({createNewJobFromSubmission: {id}}) => {\n            goTo(`/job/?id=${id}`)\n        },\n    })\n    const onSubmit = useCallback(\n        ({quantity}: {quantity: number}) => {\n            assert(jobType, `Job type must be set!`)\n\n            mutate({\n                variables: {\n                    id: submission.id,\n                    quantity,\n                    type: jobType,\n                },\n            })\n        },\n        [jobType, mutate, submission.id],\n    )\n\n    const onUpdate = useCallback(\n        (id: string, value: unknown) => {\n            if (id !== \".type\" || !value) {\n                return\n            }\n            assert(\n                value === \"LaserCutting\" || value === \"Printing\",\n                `Invalid job type: ${value}`,\n            )\n\n            setJobType(value)\n        },\n        [setJobType],\n    )\n\n    return (\n        <ModalComponent title=\"Create New Job\">\n            <FormComponent\n                submitButtonTitle=\"Create New Job\"\n                formItems={submitFormItems}\n                {...{onSubmit, onUpdate}}\n            />\n        </ModalComponent>\n    )\n}\n\nexport interface MarkAsReceivedButtonProps {\n    id: string\n    progress: JobProgress\n}\nexport const MarkAsReceivedButton: React.FC<MarkAsReceivedButtonProps> = ({\n    id,\n    progress,\n}) => {\n    const {updateSnack} = useSnack()\n    const [mutate] = useToggleJobReceivedMutation({\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n        variables: {id},\n    })\n\n    return (\n        <Button\n            variant=\"contained\"\n            color={progress === \"Shipped\" ? \"primary\" : \"secondary\"}\n            onClick={() => mutate()}>\n            {progress === \"Shipped\" ? \"Received\" : \"Undo\"}\n        </Button>\n    )\n}\n\nexport interface SubmissionJobsProps {\n    submission: Submission\n}\nexport const SubmissionJobs: React.FC<SubmissionJobsProps> = ({\n    submission: {id, name},\n}) => {\n    const {updateSnack} = useSnack()\n    const {data, loading} = useSubmissionJobsQuery({variables: {id}})\n    if (loading) {\n        return <div>Loading...</div>\n    }\n    assert(data?.submissionJobs, `Couldn't get submitted jobs!`)\n\n    return (\n        <div style={{marginTop: 20}}>\n            <EnhancedTable\n                initialOrderProperty=\"createdAt\"\n                nameProperty=\"id\"\n                customItems={[\n                    ({id, progress}: ComparableObject) => {\n                        assert(typeof id === \"string\", \"invalid id\")\n                        assert(typeof progress === \"string\", \"invalid progress\")\n\n                        if (progress === \"Shipped\" || progress === \"Received\") {\n                            return <MarkAsReceivedButton {...{id, progress}} />\n                        }\n                        return null\n                    },\n                ]}\n                toolbarBarItems={[\n                    <Button\n                        key=\"export\"\n                        onClick={() => {\n                            data.submissionJobs.length > 0\n                                ? downloadString(\n                                      jsonToCsv(\n                                          data.submissionJobs,\n                                          (value) => {\n                                              return value?.firstName &&\n                                                  value?.lastName\n                                                  ? `${\n                                                        value.firstName\n                                                    } ${String(\n                                                        value.lastName.charAt(\n                                                            0,\n                                                        ),\n                                                    ).toUpperCase()}`\n                                                  : \"INFORMATION_REDACTED\"\n                                          },\n                                      ),\n                                      \"\",\n                                      `${id}-${name}-JobExport.csv`,\n                                  )\n                                : updateSnack({\n                                      message: \"No submissions to download\",\n                                  })\n                        }}\n                        style={{\n                            fontSize: 12,\n                            height: 35,\n                            width: 200,\n                        }}\n                        variant=\"contained\"\n                        startIcon={<CloudDownloadIcon />}\n                        color=\"default\">\n                        Export Jobs\n                    </Button>,\n                ]}\n                rows={(data.submissionJobs as unknown) as ComparableObject[]}\n                headCells={\n                    (headCells as unknown) as HeadCell<ComparableObject>[]\n                }\n                onRowClick={(row) => {\n                    goTo(`/job?id=${row.id}`)\n                }}\n                title=\"Accepted Jobs\"\n            />\n        </div>\n    )\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {removeIn} from \"./utils\"\n\nexport const jsonToCsv = (\n    objects: {[id: string]: any}[],\n    objectHandler?: (obj: {[id: string]: any}) => string,\n) => {\n    if (objects.length >= 1) {\n        const title = Object.keys(\n            removeIn(removeIn(objects[0], \"__typename\"), \"file\"),\n        ).join(\",\")\n        const values = objects\n            .map((object) =>\n                Object.values(removeIn(removeIn(object, \"__typename\"), \"file\")),\n            )\n            .map((values) =>\n                values\n                    .map((value) => {\n                        if (value) {\n                            switch (typeof value) {\n                                case \"object\":\n                                    if (objectHandler) {\n                                        return objectHandler(value)\n                                    }\n                                    return \"\"\n\n                                default:\n                                    return `\"${String(value).trim()}\"`\n                            }\n                        }\n                        return \"\"\n                    })\n                    .join(\",\"),\n            )\n            .join(\"\\n\")\n        return `${title}\\n${values}`\n    }\n    throw new Error(\"Must be greater than 0 elements in objects\")\n}\n","import {IconButton} from \"@material-ui/core\"\nimport DeleteIcon from \"@material-ui/icons/Delete\"\nimport ReplayIcon from \"@material-ui/icons/Replay\"\nimport hash from \"object-hash\"\nimport React, {useEffect} from \"react\"\nimport {IPreviewProps} from \"react-dropzone-uploader\"\nimport {useContainer} from \"unstated-next\"\nimport {removeNested, renderFileType} from \"../services/utils\"\nimport {FileRender, FileRenderStateContainer} from \"./file-renderer\"\n\nexport const FilePreview = ({\n    canCancel,\n    canRemove,\n    canRestart,\n    className,\n    extra: {multiple},\n    fileWithMeta: {\n        cancel,\n        file,\n        meta: {type},\n        remove,\n        restart,\n    },\n    files,\n    handleChange,\n    id,\n    meta,\n    style,\n}: IPreviewProps & {\n    handleChange: (value: File[] | File | undefined) => void\n    id: string\n}) => {\n    const {name, percent, status} = meta\n    const renderType = renderFileType(name)\n    const {changePreviewImage} = useContainer(FileRenderStateContainer)\n    const hashName = hash(`${file.name}-${file.size}`)\n    useEffect(() => {\n        if (status === \"done\") {\n            const allFiles = files.map((file) => file.file)\n            handleChange(multiple ? allFiles : allFiles[0])\n        }\n    }, [files, handleChange, multiple, status])\n\n    return (\n        <div className={className} style={style}>\n            {renderType && (\n                <FileRender\n                    id={id}\n                    name={hashName}\n                    width={200}\n                    height={200}\n                    type={renderType}\n                    source={\n                        type.startsWith(\"image/\")\n                            ? {type: \"url\", url: URL.createObjectURL(file)}\n                            : {file, type: \"file\"}\n                    }\n                />\n            )}\n            {name}\n            <div className=\"dzu-previewStatusContainer\">\n                {status !== \"done\" && (\n                    <progress\n                        max={100}\n                        value={status === \"headers_received\" ? 100 : percent}\n                    />\n                )}\n\n                {status === \"uploading\" && canCancel && (\n                    <IconButton\n                        color=\"primary\"\n                        onClick={cancel}\n                        aria-label=\"cancel\">\n                        <DeleteIcon />\n                    </IconButton>\n                )}\n                {status !== \"preparing\" &&\n                    status !== \"getting_upload_params\" &&\n                    status !== \"uploading\" &&\n                    canRemove && (\n                        <IconButton\n                            color=\"primary\"\n                            onClick={() => {\n                                if (files.length === 1) {\n                                    handleChange(multiple ? [] : undefined)\n                                }\n                                changePreviewImage((old) => {\n                                    return (\n                                        removeNested(\n                                            old,\n                                            `${id}.${hashName}`,\n                                        ) as never\n                                    )\n                                })\n                                remove()\n                            }}\n                            aria-label=\"remove\">\n                            <DeleteIcon />\n                        </IconButton>\n                    )}\n                {[\n                    \"error_upload_params\",\n                    \"exception_upload\",\n                    \"error_upload\",\n                    \"aborted\",\n                    \"ready\",\n                ].includes(status) &&\n                    canRestart && (\n                        <IconButton\n                            color=\"primary\"\n                            onClick={restart}\n                            aria-label=\"restart\">\n                            <ReplayIcon />\n                        </IconButton>\n                    )}\n            </div>\n        </div>\n    )\n}\n","import AppBar from \"@material-ui/core/AppBar\"\nimport Box from \"@material-ui/core/Box\"\nimport {makeStyles, Theme} from \"@material-ui/core/styles\"\nimport Tab from \"@material-ui/core/Tab\"\nimport Tabs from \"@material-ui/core/Tabs\"\nimport Typography from \"@material-ui/core/Typography\"\nimport React from \"react\"\n\ninterface TabPanelProps {\n    children?: React.ReactNode\n    index: number\n    value: number\n}\n\nfunction TabPanel(props: TabPanelProps) {\n    const {children, index, value, ...other} = props\n\n    return (\n        <Typography\n            component=\"div\"\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}>\n            {value === index && <Box p={3}>{children}</Box>}\n        </Typography>\n    )\n}\n\nconst tabProps = (index: number) => {\n    return {\n        \"aria-controls\": `simple-tabpanel-${index}`,\n        id: `simple-tab-${index}`,\n    }\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {\n        backgroundColor: theme.palette.background.paper,\n        flexGrow: 1,\n        marginTop: 10,\n        maxWidth: 1000,\n        minWidth: 200,\n        width: \"45vw\",\n    },\n}))\n\nexport interface TabView {\n    component: JSX.Element\n    name: string\n}\n\nexport interface TabsComponentProps {\n    currentTab?: number\n    style?: React.CSSProperties\n    tabs: TabView[]\n}\nexport const TabsComponent: React.FC<TabsComponentProps> = ({\n    currentTab = 0,\n    style,\n    tabs,\n}) => {\n    const classes = useStyles()\n    const [value, setValue] = React.useState(currentTab)\n\n    const handleChange = (_: React.ChangeEvent<{}>, newValue: number) => {\n        setValue(newValue)\n    }\n\n    return (\n        <div className={classes.root} style={style}>\n            <AppBar color=\"transparent\" position=\"static\">\n                <Tabs\n                    textColor=\"primary\"\n                    indicatorColor=\"primary\"\n                    value={value}\n                    onChange={handleChange}>\n                    {tabs.map(({name}, i) => {\n                        return (\n                            <Tab\n                                key={`${name}${i.toString()}`}\n                                label={name}\n                                {...tabProps(i)}\n                            />\n                        )\n                    })}\n                </Tabs>\n            </AppBar>\n            {tabs.map(({component}, i) => {\n                return (\n                    <TabPanel key={`${i.toString()}`} value={value} index={i}>\n                        {component}\n                    </TabPanel>\n                )\n            })}\n        </div>\n    )\n}\n","import {assert} from \"@dynamo/common\"\nimport {Button, Typography} from \"@material-ui/core\"\nimport Container from \"@material-ui/core/Container\"\nimport {makeStyles} from \"@material-ui/core/styles\"\nimport ImageIcon from \"@material-ui/icons/Image\"\nimport React, {useCallback, useMemo, useState} from \"react\"\nimport {createContainer, useContainer} from \"unstated-next\"\nimport {v4 as uuid} from \"uuid\"\nimport {FilePreview} from \"../../components/file-preview\"\nimport {FileRenderStateContainer} from \"../../components/file-renderer\"\nimport {FormComponent, FormItem} from \"../../components/form/form\"\nimport {InfoListComponent} from \"../../components/info-list\"\nimport {PageComponent} from \"../../components/page\"\nimport {TabsComponent} from \"../../components/tabs\"\nimport {WrongPageComponent} from \"../../components/wrong-page\"\nimport {\n    MedicalItem,\n    MutationCreateSubmissionArgs,\n    SubmissionFilesInput,\n    useCreateSubmissionMutation,\n    useMedicalItemsQuery,\n    User,\n} from \"../../graphql/schema.generated\"\nimport {useSnack} from \"../../hooks\"\nimport {dataURLtoFile, getNested, goTo} from \"../../services/utils\"\n\nexport const SubmissionStateContainer = createContainer(() => {\n    const [submission, changeSubmission] = useState<\n        Partial<MutationCreateSubmissionArgs>\n    >({})\n    const [step, changeStep] = useState<\"first\" | \"second\">(\"first\")\n    return {\n        changeStep,\n        changeSubmission,\n        step,\n        submission,\n    } as const\n})\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        alignItems: \"center\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        marginTop: theme.spacing(8),\n    },\n}))\n\nexport interface CreateSubmissionPageViewProps {\n    medicalItems: MedicalItem[]\n    onSubmit: (form: MutationCreateSubmissionArgs) => void\n    user: User\n}\n\nconst MAX_JOBS = 400\n\nexport interface SubmissionItemSelectProps {\n    medicalItems: MedicalItem[]\n}\nexport const SubmissionItemSelect: React.FC<SubmissionItemSelectProps> = ({\n    medicalItems,\n}) => {\n    const {\n        changeStep,\n        changeSubmission,\n        submission: {description, files, marketplaceId, name},\n    } = useContainer(SubmissionStateContainer)\n\n    const {updateSnack} = useSnack()\n    const onMarketplaceSelect = useCallback(\n        (id?: string) => {\n            changeSubmission({\n                marketplaceId: id,\n                name: medicalItems.find((item) => item.id === id)?.name,\n            })\n            changeStep(\"second\")\n        },\n        [changeStep, changeSubmission, medicalItems],\n    )\n\n    const onCustomSelect = useCallback(\n        (custom: {description?: string; files: SubmissionFilesInput}) => {\n            changeSubmission((old) => {\n                return {...old, ...custom, marketplaceId: undefined}\n            })\n            changeStep(\"second\")\n        },\n        [changeStep, changeSubmission],\n    )\n\n    const formItems = useMemo(() => {\n        return [\n            {\n                PreviewComponent: FilePreview,\n                accept: \".jpg,.JPG,.JPEG,.jpeg,.png,.PNG\",\n                alignment: {xs: 12},\n                defaultValue: files?.preview,\n                icon: <ImageIcon />,\n                id: \".files.preview\",\n                label: \"Upload Thumbnail\",\n                multiple: false,\n                required: true,\n                type: \"file-upload\",\n            },\n\n            {\n                alignment: {xs: 12},\n                defaultValue: name,\n                id: \".name\",\n                label: \"Name\",\n                required: true,\n                type: \"text\",\n            },\n\n            {\n                alignment: {xs: 12},\n                defaultValue: description,\n                id: \".description\",\n                label: \"Description\",\n                multiline: true,\n                type: \"text\",\n            },\n\n            {\n                alignment: {xs: 12},\n                defaultValue: files?.assembly,\n                id: \".files.assemblyUrl\",\n                label: \"Assembly Instructions (URL)\",\n                type: \"text\",\n            },\n\n            {\n                PreviewComponent: FilePreview,\n                accept: \".stl,.STL\",\n                alignment: {xs: 12},\n                defaultValue: files?.model,\n                id: \".files.model\",\n                label: \"Upload STL (3D Printing)\",\n                required: true,\n                type: \"file-upload\",\n            },\n\n            {\n                PreviewComponent: FilePreview,\n                accept: \".dxf,.DXF\",\n                alignment: {xs: 12},\n                defaultValue: files?.laserCutting,\n                id: \".files.laserCutting\",\n                label: \"Upload DXF (Laser Cutting)\",\n                required: true,\n                type: \"file-upload\",\n            },\n        ] as FormItem[]\n    }, [description, files, name])\n\n    return (\n        <TabsComponent\n            currentTab={!files || marketplaceId ? 0 : 1}\n            tabs={[\n                {\n                    component: (\n                        <InfoListComponent\n                            items={medicalItems.map(\n                                ({description, files: {preview}, id, name}) => {\n                                    return {\n                                        action: {\n                                            callback: onMarketplaceSelect,\n                                            type: \"callback\",\n                                        },\n                                        description,\n                                        id,\n                                        image: preview?.presignedUrl,\n                                        name,\n                                    }\n                                },\n                            )}\n                        />\n                    ),\n                    name: \"Frequent\",\n                },\n                {\n                    component: (\n                        <FormComponent\n                            submitButtonTitle=\"Create Submission\"\n                            formItems={formItems}\n                            onSubmit={(\n                                form: Partial<MutationCreateSubmissionArgs>,\n                            ) => {\n                                if (\n                                    (form.files?.laserCutting &&\n                                        form.files.laserCutting.length >= 1) ||\n                                    (form.files?.model &&\n                                        form.files.model.length >= 1)\n                                ) {\n                                    onCustomSelect(\n                                        form as {\n                                            description?: string\n                                            files: SubmissionFilesInput\n                                        },\n                                    )\n                                } else {\n                                    updateSnack({\n                                        message:\n                                            \"You must upload an STL or DXF file to proceed\",\n                                    })\n                                }\n                            }}\n                        />\n                    ),\n                    name: \"Custom\",\n                },\n            ]}\n        />\n    )\n}\n\nexport const CreateSubmissionPageView: React.FC<CreateSubmissionPageViewProps> = ({\n    medicalItems,\n    onSubmit,\n    user: {address, latitude, longitude},\n}) => {\n    const classes = useStyles()\n    const {changeStep, step, submission} = useContainer(\n        SubmissionStateContainer,\n    )\n\n    const {previewImage} = useContainer(FileRenderStateContainer)\n\n    const submitFormItems: FormItem[] = [\n        {\n            alignment: {xs: 12},\n            defaultValue: 85,\n            ending: \"Parts\",\n            id: \".quantity\",\n            label: \"Quantity\",\n            max: MAX_JOBS,\n            min: 5,\n            step: 1,\n            type: \"slider\",\n        },\n\n        {\n            alignment: {xs: 12},\n            defaultValue: {\n                geometry: {\n                    coordinates: [longitude, latitude],\n                },\n                properties: {\n                    display_name: address,\n                },\n            },\n            id: \".address\",\n            label: \"Shipping Address\",\n            locationIds: {\n                latitude: \".geolocation.latitude\",\n                longitude: \".geolocation.longitude\",\n            },\n            required: true,\n            type: \"location\",\n        },\n    ]\n\n    const findItemFromId = useCallback(\n        (id: string) => {\n            return medicalItems.find((medicalItem) => medicalItem.id === id)\n        },\n        [medicalItems],\n    )\n\n    const stepViews = useMemo(() => {\n        switch (step) {\n            case \"first\":\n                return <SubmissionItemSelect medicalItems={medicalItems} />\n            case \"second\": {\n                const createdSubmission = submission.marketplaceId\n                    ? findItemFromId(submission.marketplaceId)\n                    : submission\n\n                assert(createdSubmission, \"submission not defined\")\n                const {description, files, name} = createdSubmission\n\n                const previewPreview = Object.values(\n                    getNested(previewImage || {}, \".files.preview\") || {},\n                )[0] as string\n\n                const modelPreview = Object.values(\n                    getNested(previewImage || {}, \".files.model\") || {},\n                )[0] as string\n\n                const laserCuttingPreview = Object.values(\n                    getNested(previewImage || {}, \".files.laserCutting\") || {},\n                )[0] as string\n\n                return (\n                    <div\n                        style={{\n                            marginTop: 10,\n                            maxWidth: 1000,\n                            minWidth: 200,\n                            width: \"45vw\",\n                        }}>\n                        <InfoListComponent\n                            items={[\n                                {\n                                    action: {\n                                        callback: () => {\n                                            changeStep(\"first\")\n                                        },\n                                        type: \"callback\",\n                                    },\n                                    actionItem: (\n                                        <Button\n                                            variant=\"outlined\"\n                                            onClick={() => {\n                                                changeStep(\"first\")\n                                            }}>\n                                            Edit\n                                        </Button>\n                                    ),\n                                    description: description || \"\",\n                                    id: submission.marketplaceId || uuid(),\n                                    image:\n                                        files?.preview?.presignedUrl ||\n                                        previewPreview ||\n                                        modelPreview ||\n                                        laserCuttingPreview,\n                                    name: name || \"\",\n                                },\n                            ]}\n                        />\n\n                        <FormComponent\n                            submitButtonTitle=\"Create Submission\"\n                            formItems={submitFormItems}\n                            onSubmit={(form: {}) => {\n                                const submitted = {\n                                    ...submission,\n                                    ...form,\n                                } as MutationCreateSubmissionArgs\n\n                                if (submitted.files) {\n                                    if (!submitted.files?.laserCutting) {\n                                        submitted.files.laserCutting = []\n                                    }\n\n                                    if (!submitted.files?.model) {\n                                        submitted.files.model = []\n                                    }\n                                }\n\n                                if (submitted.files) {\n                                    if (!submitted.files.preview) {\n                                        submitted.files.preview = dataURLtoFile(\n                                            modelPreview ||\n                                                laserCuttingPreview ||\n                                                \"\",\n                                            \"thumbnail.png\",\n                                        )\n                                    }\n                                }\n\n                                onSubmit(submitted)\n                            }}\n                        />\n                    </div>\n                )\n            }\n        }\n    }, [\n        changeStep,\n        findItemFromId,\n        medicalItems,\n        onSubmit,\n        previewImage,\n        step,\n        submission,\n        submitFormItems,\n    ])\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <div className={classes.paper}>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Create Medical Submission\n                </Typography>\n                <div\n                    style={{\n                        maxWidth: 1000,\n                        minWidth: 200,\n                        width: \"45vw\",\n                    }}\n                />\n                {stepViews}\n            </div>\n        </Container>\n    )\n}\n\nexport interface CreateSubmissionPageProps {}\nexport const CreateSubmissionPage: React.FC<CreateSubmissionPageProps> = () => {\n    const {updateSnack} = useSnack()\n    const {data} = useMedicalItemsQuery({\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n    })\n\n    const [mutate] = useCreateSubmissionMutation({\n        onCompleted: ({createSubmission: {id}}) => {\n            goTo(`/submission/?id=${id}`)\n        },\n        onError: ({message}) => {\n            updateSnack({message})\n        },\n    })\n    const onSubmit = useCallback(\n        (variables: MutationCreateSubmissionArgs) => {\n            mutate({variables})\n        },\n        [mutate],\n    )\n\n    return (\n        <SubmissionStateContainer.Provider>\n            <PageComponent\n                showFooter\n                title=\"Create Job\"\n                rolePages={[\n                    {\n                        component: (user) => (\n                            <div>\n                                {data?.medicalItems && (\n                                    <FileRenderStateContainer.Provider>\n                                        <CreateSubmissionPageView\n                                            medicalItems={data.medicalItems}\n                                            {...{onSubmit, user}}\n                                        />\n                                    </FileRenderStateContainer.Provider>\n                                )}\n                            </div>\n                        ),\n                        role: \"Submitter\",\n                    },\n                ]}>\n                <WrongPageComponent text=\"Must be logged in as a Submitter to create a job\" />\n            </PageComponent>\n        </SubmissionStateContainer.Provider>\n    )\n}\n","import {ApolloProvider} from \"@apollo/react-hooks\"\nimport React, {useState} from \"react\"\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\"\nimport {client, NotifyMessage} from \"./client\"\nimport {SnackBarComponent} from \"./components/snackbar\"\nimport {SnackContext} from \"./hooks/useSnack\"\nimport {IndexPage} from \"./pages\"\nimport {AboutPage} from \"./pages/about\"\nimport {AccountChoosePage} from \"./pages/account/choose\"\nimport {ForgotPasswordPage} from \"./pages/account/forgot-password\"\nimport {LoginPage} from \"./pages/account/login\"\nimport {LogoutPage} from \"./pages/account/logout\"\nimport {PasswordResetPage} from \"./pages/account/password-reset\"\nimport {RegisterPage} from \"./pages/account/register\"\nimport {AccountUpdatePage} from \"./pages/account/update\"\nimport {ContactPage} from \"./pages/contact\"\nimport {FindPage} from \"./pages/find\"\nimport {JobPage} from \"./pages/job\"\nimport {LegalPage} from \"./pages/legal\"\nimport {DisclaimerPage} from \"./pages/legal/disclaimer\"\nimport {FaqPage} from \"./pages/legal/faq\"\nimport {PrivacyPolicyPage} from \"./pages/legal/privacy-policy\"\nimport {TermsOfServicePage} from \"./pages/legal/terms-of-service\"\nimport {SubmissionPage} from \"./pages/submission\"\nimport {CreateSubmissionPage} from \"./pages/submission/create\"\n\nexport interface AppViewProps {}\nexport const AppView: React.FC<AppViewProps> = () => {\n    const [snack, updateSnack] = useState<NotifyMessage>()\n\n    return (\n        <SnackContext.Provider value={{updateSnack}}>\n            <div className=\"App\">\n                <BrowserRouter>\n                    <Switch>\n                        <Route path=\"/submission/create\">\n                            <CreateSubmissionPage />\n                        </Route>\n\n                        <Route path=\"/submission\">\n                            <SubmissionPage />\n                        </Route>\n\n                        <Route path=\"/find\">\n                            <FindPage />\n                        </Route>\n\n                        <Route path=\"/legal/terms-of-service\">\n                            <TermsOfServicePage />\n                        </Route>\n\n                        <Route path=\"/legal/privacy-policy\">\n                            <PrivacyPolicyPage />\n                        </Route>\n\n                        <Route path=\"/faq\">\n                            <FaqPage />\n                        </Route>\n\n                        <Route path=\"/legal/disclaimer\">\n                            <DisclaimerPage />\n                        </Route>\n\n                        <Route path=\"/account/logout\">\n                            <LogoutPage />\n                        </Route>\n\n                        <Route path=\"/account/password-reset\">\n                            <PasswordResetPage />\n                        </Route>\n\n                        <Route path=\"/account/forgot-password\">\n                            <ForgotPasswordPage />\n                        </Route>\n\n                        <Route path=\"/account/update\">\n                            <AccountUpdatePage />\n                        </Route>\n\n                        <Route path=\"/account/register/choose\">\n                            <AccountChoosePage />\n                        </Route>\n\n                        <Route path=\"/job\">\n                            <JobPage />\n                        </Route>\n\n                        <Route path=\"/account/register\">\n                            <RegisterPage />\n                        </Route>\n\n                        <Route path=\"/account/login\">\n                            <LoginPage />\n                        </Route>\n\n                        <Route path=\"/about\">\n                            <AboutPage />\n                        </Route>\n\n                        <Route path=\"/legal\">\n                            <LegalPage />\n                        </Route>\n\n                        <Route path=\"/contact\">\n                            <ContactPage />\n                        </Route>\n\n                        <Route path=\"/\">\n                            <IndexPage />\n                        </Route>\n                    </Switch>\n                </BrowserRouter>\n\n                <SnackBarComponent state={[snack, updateSnack]} />\n            </div>\n        </SnackContext.Provider>\n    )\n}\n\nexport interface AppProps {}\nexport const App: React.FC<AppProps> = () => (\n    <ApolloProvider {...{client}}>\n        <AppView />\n    </ApolloProvider>\n)\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n        ),\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        if (!process.env.PUBLIC_URL) {\n            throw new Error(\"Expected process.env.PUBLIC_URL to be defined!\")\n        }\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\")\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {\"Service-Worker\": \"script\"},\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\")\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\",\n            )\n        })\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister()\n            })\n            .catch((error) => {\n                console.error(error.message)\n            })\n    }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport {App} from \"./App\"\nimport \"./index.css\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import {red} from \"@material-ui/core/colors\"\nimport {createMuiTheme} from \"@material-ui/core/styles\"\n\nexport const background = \"white\"\n\n// Create a theme instance.\nexport const theme = createMuiTheme({\n    palette: {\n        background: {\n            default: \"#fff\",\n        },\n        error: {\n            main: red.A400,\n        },\n        primary: {\n            main: \"#2e48a8\",\n        },\n        secondary: {\n            main: \"#19857b\",\n        },\n    },\n    typography: {\n        fontFamily: [\"Righteous\"].join(\",\"),\n    },\n})\n","/* eslint-disable no-return-assign */\nlet cache: Record<string, string | null> = {}\n\ntype KeyType = \"JWT_TOKEN\" | \"REFRESH_TOKEN\" | \"USER_ID\"\n\nexport const cachedStorage = {\n    clear: () => {\n        cache = {}\n        localStorage.clear()\n    },\n    getItem: (key: KeyType) =>\n        cache[key] ?? (cache[key] = localStorage.getItem(key)),\n    removeItem: (key: KeyType) => {\n        delete cache[key]\n        localStorage.removeItem(key)\n    },\n    setItem: (key: KeyType, value: string) => {\n        cache[key] = value\n        localStorage.setItem(key, value)\n    },\n} as const\n","import {NormalizedCacheObject} from \"apollo-cache-inmemory\"\nimport ApolloClient from \"apollo-client\"\nimport {cachedStorage} from \".\"\nimport {\n    LoginRefreshTokenDocument,\n    LoginRefreshTokenMutation,\n    LoginRefreshTokenMutationVariables,\n} from \"../graphql/schema.generated\"\n\nconst decode = (jwt: string): {exp?: number} | undefined =>\n    jwt && JSON.parse(atob(jwt.split(\".\")[1]))\n\nconst tokenExpired = (jwt: string) =>\n    (decode(jwt)?.exp ?? 0) * 1000.0 <= Date.now()\n\nconst getNewToken = async (client: ApolloClient<NormalizedCacheObject>) => {\n    const [userId, refreshToken] = [\n        cachedStorage.getItem(\"USER_ID\"),\n        cachedStorage.getItem(\"REFRESH_TOKEN\"),\n    ] as const\n    if (!userId || !refreshToken) {\n        // logout()\n        return \"\"\n    }\n\n    const {data, errors} = await client.mutate<\n        LoginRefreshTokenMutation,\n        LoginRefreshTokenMutationVariables\n    >({\n        mutation: LoginRefreshTokenDocument,\n        variables: {refreshToken, userId},\n    })\n    if (errors || !data?.loginRefreshToken?.token) {\n        // logout()\n        return \"\"\n    }\n\n    cachedStorage.setItem(\"JWT_TOKEN\", data.loginRefreshToken.token)\n    return data?.loginRefreshToken?.token\n}\n\nexport const getJwtToken = async (\n    client: ApolloClient<NormalizedCacheObject>,\n) => {\n    const jwtToken = cachedStorage.getItem(\"JWT_TOKEN\")\n    if (!jwtToken || tokenExpired(jwtToken)) {\n        return await getNewToken(client)\n    }\n    return jwtToken\n}\n","export * from \"./cachedStorage\"\nexport * from \"../hooks/useDateFromNow\"\nexport * from \"./refreshToken\"\n","import {Logging} from \"@nimashoghi/logging\"\nimport {\n    InMemoryCache,\n    IntrospectionFragmentMatcher,\n} from \"apollo-cache-inmemory\"\nimport {ApolloClient} from \"apollo-client\"\nimport {ApolloLink} from \"apollo-link\"\nimport {setContext} from \"apollo-link-context\"\nimport {onError} from \"apollo-link-error\"\nimport {createUploadLink} from \"apollo-upload-client\"\nimport introspectionQueryResultData from \"./graphql/fragmentMatcher.generated\"\nimport {AuthenticationResult} from \"./graphql/schema.generated\"\nimport {goTo} from \"./services/utils\"\nimport {cachedStorage, getJwtToken} from \"./util\"\n\nconst logger = Logging.logger({__filename})\n\nexport const login = ({\n    id,\n    refreshToken,\n    token,\n}: Omit<AuthenticationResult, \"user\">) => {\n    cachedStorage.setItem(\"JWT_TOKEN\", token)\n    cachedStorage.setItem(\"REFRESH_TOKEN\", refreshToken)\n    cachedStorage.setItem(\"USER_ID\", id)\n}\n\nexport const logout = () => {\n    cachedStorage.removeItem(\"JWT_TOKEN\")\n    cachedStorage.removeItem(\"REFRESH_TOKEN\")\n    cachedStorage.removeItem(\"USER_ID\")\n}\n\nexport type NotifyMessage = {\n    message: string\n    severity?: \"error\" | \"success\" | \"info\" | \"warning\"\n}\n\nconst cache = new InMemoryCache({\n    fragmentMatcher: new IntrospectionFragmentMatcher({\n        introspectionQueryResultData,\n    }),\n})\n\nconst errorLink = onError(({graphQLErrors, networkError}) => {\n    if (graphQLErrors) {\n        graphQLErrors.forEach(({locations, message, path}) => {\n            if (message === \"Your user was not found in the database!\") {\n                goTo(\"/account/logout\")\n            }\n            logger.error`[GraphQL error]: Message: ${message}, Location: ${JSON.stringify(\n                locations,\n            )}, Path: ${path}`\n        })\n    }\n    if (networkError) {\n        logger.error`[Network error]: ${networkError}`\n    }\n})\n\nconst authLink = setContext(async (_, {headers}) => {\n    const token = await getJwtToken(client)\n\n    return {\n        headers: {\n            ...headers,\n            ...(token ? {authorization: `Bearer ${token}`} : {}),\n        },\n    }\n})\n\nconst uploadLink = createUploadLink({\n    uri:\n        process.env.NODE_ENV !== \"production\"\n            ? \"http://localhost:80/graphql\"\n            : \"https://api.operationdynamo.org\",\n})\n\nconst link = ApolloLink.from([errorLink, authLink, uploadLink])\n\nexport const client = new ApolloClient({cache, link})\n"],"sourceRoot":""}